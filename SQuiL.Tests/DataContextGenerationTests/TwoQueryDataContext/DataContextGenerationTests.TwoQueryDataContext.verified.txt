{
  Diagnostics: [
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TestCase :: TwoQueryDataContextDataContext :: ConnectionStringTwoQueryDataContext1 :: TwoQueryDataContext1 :: Use BIWarehouse; Select 1,
      Message: TestCase :: TwoQueryDataContextDataContext :: ConnectionStringTwoQueryDataContext1 :: TwoQueryDataContext1 :: Use BIWarehouse; Select 1,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: CodeBlock { CodeType = USING, DatabaseType = Token { Type = IDENTIFIER, Offset = 4, Value = BIWarehouse, Original = BIWarehouse }, Name = BIWarehouse, DefaultValue = , IsObject = False, IsTable = False, IsRequired = True, IsNullable = True, Size = , Properties =  },
      Message: CodeBlock { CodeType = USING, DatabaseType = Token { Type = IDENTIFIER, Offset = 4, Value = BIWarehouse, Original = BIWarehouse }, Name = BIWarehouse, DefaultValue = , IsObject = False, IsTable = False, IsRequired = True, IsNullable = True, Size = , Properties =  },
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: CodeBlock { CodeType = BODY, DatabaseType = Token { Type = BODY, Offset = 18, Value = Select 1 , Original = Select 1 }, Name = Select 1 , DefaultValue = , IsObject = False, IsTable = False, IsRequired = True, IsNullable = True, Size = , Properties =  },
      Message: CodeBlock { CodeType = BODY, DatabaseType = Token { Type = BODY, Offset = 18, Value = Select 1 , Original = Select 1 }, Name = Select 1 , DefaultValue = , IsObject = False, IsTable = False, IsRequired = True, IsNullable = True, Size = , Properties =  },
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: KEYWORD_USE => ,
      Message: KEYWORD_USE => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => BIWarehouse,
      Message: IDENTIFIER => BIWarehouse,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: BODY => Select 1,
      Message: BODY => Select 1,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TestCase :: TwoQueryDataContextDataContext :: ConnectionStringTwoQueryDataContext2 :: TwoQueryDataContext2 :: Declare		@PersonID varchar(10), 			@Debug bit = 1;  Set	@PersonID = '0300996';  Declare	@Return_Participation table( 	SectionID varchar(20), 	PersonID varchar(10), 	ProfessorID varchar(10), 	TermCode varchar(10), 	CompletedDate datetime );  Declare	@Return_Override table( 	SectionID varchar(20), 	TermCode varchar(10), 	CourseCode varchar(20), 	BeginDate datetime, 	EndDate datetime );  Use DataRepositoryTest;  Insert Into @Return_Participation Select * From ( Select		--pv.ElementId As ElementID, 			Max(Iif(pv.PropertyName = 'ParticipationSectionId', PropertyValue, Null)) as SectionID, 			Max(Iif(pv.PropertyName = 'ParticipationStudentId', PropertyValue, Null)) as PersonID, 			Max(Iif(pv.PropertyName = 'ParticipationTeacherId', PropertyValue, Null)) as ProfessorID, 			Max(Iif(pv.PropertyName = 'ParticipationTerm', PropertyValue, Null)) as TermCode, 			Max(Iif(pv.PropertyName = 'ParticipationCompletedOn', Cast(PropertyValue As datetime), Null)) as CompletedDate From		CourseEvaluation_PropertyValues pv 			Inner Join ( 				Select		ElementId 				From		CourseEvaluation_PropertyValues 				Where		PropertyName = 'Tag' 							And PropertyValue = 'Participation' 			) tags 				On tags.ElementId = pv.ElementId Group By	pv.ElementId ) list Where PersonID = @PersonID;  Insert Into @Return_Override Select		Max(Iif(pv.PropertyName = 'SectionDateSectionId', PropertyValue, Null)) as SectionID, 			Max(Iif(pv.PropertyName = 'SectionDateTerm', PropertyValue, Null)) as TermCode, 			Max(Iif(pv.PropertyName = 'SectionDateDescription', PropertyValue, Null)) as CourseCode, 			Max(Iif(pv.PropertyName = 'SectionDateEvaluationBeginDate', Cast(PropertyValue As date), Null)) as BeginDate, 			Max(Iif(pv.PropertyName = 'SectionDateEvaluationEndDate', Cast(PropertyValue As date), Null)) as EndDate Fr	om		CourseEvaluation_PropertyValues pv 			Inner Join ( 				Select		ElementId 				From		CourseEvaluation_PropertyValues 				Where		PropertyName = 'Tag' 							And PropertyValue = 'SectionDate' 			) tags 				On tags.ElementId = pv.ElementId Group By	pv.ElementId  Select * From @Return_Participation; Select * From @Return_Override;  /*  ParticipationCompletedOn ParticipationSectionId ParticipationStudentId ParticipationTeacherId ParticipationTerm  */,
      Message: TestCase :: TwoQueryDataContextDataContext :: ConnectionStringTwoQueryDataContext2 :: TwoQueryDataContext2 :: Declare		@PersonID varchar(10), 			@Debug bit = 1;  Set	@PersonID = '0300996';  Declare	@Return_Participation table( 	SectionID varchar(20), 	PersonID varchar(10), 	ProfessorID varchar(10), 	TermCode varchar(10), 	CompletedDate datetime );  Declare	@Return_Override table( 	SectionID varchar(20), 	TermCode varchar(10), 	CourseCode varchar(20), 	BeginDate datetime, 	EndDate datetime );  Use DataRepositoryTest;  Insert Into @Return_Participation Select * From ( Select		--pv.ElementId As ElementID, 			Max(Iif(pv.PropertyName = 'ParticipationSectionId', PropertyValue, Null)) as SectionID, 			Max(Iif(pv.PropertyName = 'ParticipationStudentId', PropertyValue, Null)) as PersonID, 			Max(Iif(pv.PropertyName = 'ParticipationTeacherId', PropertyValue, Null)) as ProfessorID, 			Max(Iif(pv.PropertyName = 'ParticipationTerm', PropertyValue, Null)) as TermCode, 			Max(Iif(pv.PropertyName = 'ParticipationCompletedOn', Cast(PropertyValue As datetime), Null)) as CompletedDate From		CourseEvaluation_PropertyValues pv 			Inner Join ( 				Select		ElementId 				From		CourseEvaluation_PropertyValues 				Where		PropertyName = 'Tag' 							And PropertyValue = 'Participation' 			) tags 				On tags.ElementId = pv.ElementId Group By	pv.ElementId ) list Where PersonID = @PersonID;  Insert Into @Return_Override Select		Max(Iif(pv.PropertyName = 'SectionDateSectionId', PropertyValue, Null)) as SectionID, 			Max(Iif(pv.PropertyName = 'SectionDateTerm', PropertyValue, Null)) as TermCode, 			Max(Iif(pv.PropertyName = 'SectionDateDescription', PropertyValue, Null)) as CourseCode, 			Max(Iif(pv.PropertyName = 'SectionDateEvaluationBeginDate', Cast(PropertyValue As date), Null)) as BeginDate, 			Max(Iif(pv.PropertyName = 'SectionDateEvaluationEndDate', Cast(PropertyValue As date), Null)) as EndDate Fr	om		CourseEvaluation_PropertyValues pv 			Inner Join ( 				Select		ElementId 				From		CourseEvaluation_PropertyValues 				Where		PropertyName = 'Tag' 							And PropertyValue = 'SectionDate' 			) tags 				On tags.ElementId = pv.ElementId Group By	pv.ElementId  Select * From @Return_Participation; Select * From @Return_Override;  /*  ParticipationCompletedOn ParticipationSectionId ParticipationStudentId ParticipationTeacherId ParticipationTerm  */,
      Category: Logger
    },
    {
      Id: SP1001,
      Title: Failed Parsing SQuiL File,
      Severity: Error,
      WarningLevel: 0,
      Location: : (0,0)-(0,0),
      MessageFormat: Expected a declare with @Param_<variable or object name>, @Params_<tablename>, @Return_<variable or object name>, or/and @Returns_<tablename>, but found @PersonID instead.,
      Message: Expected a declare with @Param_<variable or object name>, @Params_<tablename>, @Return_<variable or object name>, or/and @Returns_<tablename>, but found @PersonID instead.,
      Category: Design
    }
  ]
}