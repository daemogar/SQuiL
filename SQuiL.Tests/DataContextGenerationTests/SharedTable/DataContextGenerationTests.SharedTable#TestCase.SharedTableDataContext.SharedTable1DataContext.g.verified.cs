//HintName: TestCase.SharedTableDataContext.SharedTable1DataContext.g.cs
// <auto-generated />

#nullable enable

using Microsoft.Data.SqlClient;

using SQuiL;

namespace TestCase;

partial class SharedTableDataContext : SQuiLBaseDataContext
{
	public async Task<SharedTable1Response> ProcessSharedTable1Async(
		SharedTable1Request request,
		CancellationToken cancellationToken = default!)
	{
		var builder = ConnectionStringBuilder("SQuiLDatabase");
		using SqlConnection connection = new(builder.ConnectionString);
		var command = connection.CreateCommand();
		
		List<SqlParameter> parameters = new()
		{
			new("EnvironmentName", System.Data.SqlDbType.VarChar, EnvironmentName.Length) { Value = EnvironmentName }, 
			new("Debug", System.Data.SqlDbType.Bit) { Value = EnvironmentName != "Production" }, 
		});
		
		command.CommandText = Query(parameters);
		command.Parameters.AddRange(parameters);
		
		await connection.OpenAsync(cancellationToken);
		
		SharedTable1Response response = new();
		
		var isBob = false;
		
		using var reader = await command.ExecuteReaderAsync(cancellationToken);
		
		do
		{
			var tableTag = reader.GetName(0);
			if(tableTag.StartsWith("__SQuiL__Table__Type__"))
			{
				switch (tableTag)
				{
					case "__SQuiL__Table__Type__Return_Bob__":
					{
						if (isBob) throw new Exception(
							"Already returned value for `Bob`");
						
						isBob = true;
						
						if (!await reader.ReadAsync(cancellationToken)) break;
						
						if (response.Object is not null)
							throw new Exception("Bob was already set.");
						
						if (reader.GetString(0) == "Return_Bob")
						{
							response.Bob = new(
								reader.GetInt32(reader.GetOrdinal("ID")));
						}
						else
						{
							continue;
						}
						
						if (await reader.ReadAsync(cancellationToken))
							throw new Exception(
								"Return object results in more than one object. Consider using a return table instead.");
						
						break;
					}
				}
			}
		}
		while (await reader.NextResultAsync(cancellationToken));
		
		if (!isBob) throw new Exception("Expected return table `Bob`)");
		
		return response;
		
		string Query(List<SqlParameter> parameters) => $"""
		Declare @Return_Bob table(
			[__SQuiL__Table__Type__Return_Bob__] varchar(max) default('Return_Bob'),
			ID int);
		
		Use [{builder.InitialCatalog}];
		
		Select 1;
		
		""";
	}
}
