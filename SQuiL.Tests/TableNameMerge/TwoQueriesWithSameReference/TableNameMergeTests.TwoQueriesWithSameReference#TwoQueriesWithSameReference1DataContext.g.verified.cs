//HintName: TwoQueriesWithSameReference1DataContext.g.cs
// <auto-generated />

#nullable enable

using Microsoft.Data.SqlClient;

using SQuiL;

namespace TestCase;

partial class TwoQueriesWithSameReferenceDataContext : SQuiLBaseDataContext
{
	public async Task<TwoQueriesWithSameReference1Response> ProcessTwoQueriesWithSameReference1Async(
		TwoQueriesWithSameReference1Request request,
		CancellationToken cancellationToken = default!)
	{
		var builder = ConnectionStringBuilder("SQuiLDatabase");
		using SqlConnection connection = new(builder.ConnectionString);
		var command = connection.CreateCommand();
		
		List<SqlParameter> parameters = new()
		{
			new("@EnvironmentName", System.Data.SqlDbType.VarChar, EnvironmentName.Length) { Value = EnvironmentName }, 
			new("@Debug", System.Data.SqlDbType.Bit) { Value = EnvironmentName != "Production" }, 
		};
		
		command.CommandText = Query(parameters);
		command.Parameters.AddRange(parameters.ToArray());
		
		await connection.OpenAsync(cancellationToken);
		
		TwoQueriesWithSameReference1Response response = new();
		
		var isQuestions = false;
		
		using var reader = await command.ExecuteReaderAsync(cancellationToken);
		
		do
		{
			var tableTag = reader.GetName(0);
			if(tableTag.StartsWith("__SQuiL__Table__Type__"))
			{
				switch (tableTag)
				{
					case "__SQuiL__Table__Type__Error__":
					{
						if (!await reader.ReadAsync(cancellationToken)) break;
						
						break;
					}
					case "__SQuiL__Table__Type__Returns_Questions__":
					{
						isQuestions = true;
						
						if (!await reader.ReadAsync(cancellationToken)) break;
						
						var indexNumber = reader.GetOrdinal("Number");
						var indexMessage = reader.GetOrdinal("Message");
						
						do
						{
							if (reader.GetString(0) == "Returns_Questions")
							{
								response.Questions.Add(new(
									reader.GetInt32(indexNumber),
									reader.GetString(indexMessage)));
							}
						}
						while (await reader.ReadAsync(cancellationToken));
						break;
					}
				}
			}
		}
		while (await reader.NextResultAsync(cancellationToken));
		
		if (!isQuestions) throw new Exception("Expected return table `Questions`)");
		
		return response;
		
		string Query(List<SqlParameter> parameters) => $"""
		Declare @Returns_Questions table(
			[__SQuiL__Table__Type__Returns_Questions__] varchar(max) default('Returns_Questions'),
			[Number] int,
			[Message] varchar(max));
		
		Use [{builder.InitialCatalog}];
		
		Select * From @Returns_Questions;
		
		""";
	}
}
