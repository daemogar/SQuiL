//HintName: BinaryDataParameterDataContext.g.cs
// <auto-generated />

#nullable enable

using Microsoft.Data.SqlClient;
using System.Data.Common;

using SQuiL;

namespace TestCase;

partial class BinaryDataParameterDataContext : SQuiLBaseDataContext
{
	public async Task<BinaryDataParameterResponse> ProcessBinaryDataParameterAsync(
		BinaryDataParameterRequest request,
		CancellationToken cancellationToken = default!)
	{
		var builder = ConnectionStringBuilder("SQuiLDatabase");
		using var connection = CreateConnection(builder.ConnectionString);
		
		var command = connection.CreateCommand();
		
		List<DbParameter> parameters = new()
		{
			CreateParameter("@EnvironmentName", System.Data.SqlDbType.VarChar, EnvironmentName.Length, EnvironmentName),
			CreateParameter("@Debug", System.Data.SqlDbType.Bit, request.Debug || EnvironmentName != "Production"),
			CreateParameter("@Param_BinaryDataField", System.Data.SqlDbType.Binary, request.BinaryDataField ?? (object)System.DBNull.Value
			, p => p.IsNullable = true),
			CreateParameter("@Param_VarBinaryDataField", System.Data.SqlDbType.VarBinary, request.VarBinaryDataField ?? (object)System.DBNull.Value
			, p => p.IsNullable = true)
		};
		
		command.CommandText = Query(parameters);
		command.Parameters.AddRange(parameters.ToArray());
		
		await connection.OpenAsync(cancellationToken);
		
		BinaryDataParameterResponse response = new();
		
		var isBinaryTable = false;
		
		using var reader = await command.ExecuteReaderAsync(cancellationToken);
		
		do
		{
			var tableTag = reader.GetName(0);
			if(tableTag.StartsWith("__SQuiL__Table__Type__"))
			{
				switch (tableTag)
				{
					case "__SQuiL__Table__Type__Error__":
					{
						if (!await reader.ReadAsync(cancellationToken)) break;
						
						break;
					}
					case "__SQuiL__Table__Type__Returns_BinaryTable__":
					{
						isBinaryTable = true;
						
						if (!await reader.ReadAsync(cancellationToken)) break;
						
						var indexDataBinary = reader.GetOrdinal("DataBinary");
						var indexDataVarBinary = reader.GetOrdinal("DataVarBinary");
						
						do
						{
							if (reader.GetString(0) == "Returns_BinaryTable")
							{
								var valueDataBinary = reader.GetFieldValue<byte[]>(indexDataBinary);
								var valueDataVarBinary = reader.GetFieldValue<byte[]>(indexDataVarBinary);
								response.BinaryTable.Add(new(
									valueDataBinary,
									valueDataVarBinary));
							}
						}
						while (await reader.ReadAsync(cancellationToken));
						break;
					}
				}
			}
		}
		while (await reader.NextResultAsync(cancellationToken));
		
		if (!isBinaryTable) throw new Exception("Expected return table `BinaryTable`");
		
		return response;
		
		string Query(List<DbParameter> parameters) => $"""
		Declare @Returns_BinaryTable table(
			[__SQuiL__Table__Type__Returns_BinaryTable__] varchar(max) default('Returns_BinaryTable'),
			[DataBinary] binary(10),
			[DataVarBinary] varbinary(max));
		
		Use [{builder.InitialCatalog}];
		
		Select * From @BinaryTable
		
		""";
	}
}
