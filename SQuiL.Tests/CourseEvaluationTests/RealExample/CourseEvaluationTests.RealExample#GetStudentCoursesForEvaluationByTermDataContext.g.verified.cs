//HintName: GetStudentCoursesForEvaluationByTermDataContext.g.cs
// <auto-generated />

#nullable enable

using Microsoft.Data.SqlClient;

using SQuiL;

namespace CourseEvaluation.Application.Data;

partial class CourseEvaluationDataContext : SQuiLBaseDataContext
{
	public async Task<GetStudentCoursesForEvaluationByTermResponse> ProcessGetStudentCoursesForEvaluationByTermAsync(
		GetStudentCoursesForEvaluationByTermRequest request,
		CancellationToken cancellationToken = default!)
	{
		var builder = ConnectionStringBuilder("Warehouse");
		using SqlConnection connection = new(builder.ConnectionString);
		var command = connection.CreateCommand();
		
		List<SqlParameter> parameters = new()
		{
			new("EnvironmentName", System.Data.SqlDbType.VarChar, EnvironmentName.Length) { Value = EnvironmentName }, 
			new("Debug", System.Data.SqlDbType.Bit) { Value = EnvironmentName != "Production" }, 
			new("PersonID", System.Data.SqlDbType.VarChar, 10) 
			{
				IsNullable = true,
				Value = request.PersonID switch
				{
					null => (object)System.DBNull.Value,
					{ Length: <= 10 } => request.PersonID,
					_ => throw new Exception(
						"Request model data is larger then database size for the property [PersonID].")
				}
			}
			,
			new("CourseCode", System.Data.SqlDbType.VarChar, 20) 
			{
				IsNullable = true,
				Value = request.CourseCode switch
				{
					null => (object)System.DBNull.Value,
					{ Length: <= 20 } => request.CourseCode,
					_ => throw new Exception(
						"Request model data is larger then database size for the property [CourseCode].")
				}
			}
			,
			new("AsOfDate", System.Data.SqlDbType.Date) 
			{
				IsNullable = true,
				Value = request.AsOfDate ?? (object)System.DBNull.Value
			}
		};
		
		command.CommandText = Query(parameters);
		command.Parameters.AddRange(parameters.ToArray());
		
		await connection.OpenAsync(cancellationToken);
		
		GetStudentCoursesForEvaluationByTermResponse response = new();
		
		var isCourses = false;
		
		using var reader = await command.ExecuteReaderAsync(cancellationToken);
		
		do
		{
			var tableTag = reader.GetName(0);
			if(tableTag.StartsWith("__SQuiL__Table__Type__"))
			{
				switch (tableTag)
				{
					case "__SQuiL__Table__Type__Returns_Courses__":
					{
						isCourses = true;
						
						if (!await reader.ReadAsync(cancellationToken)) break;
						
						var indexEvalationID = reader.GetOrdinal("EvalationID");
						var indexTermCode = reader.GetOrdinal("TermCode");
						var indexCourseCode = reader.GetOrdinal("CourseCode");
						var indexCourseTitle = reader.GetOrdinal("CourseTitle");
						var indexProfessorPicture = reader.GetOrdinal("ProfessorPicture");
						var indexProfessorName = reader.GetOrdinal("ProfessorName");
						var indexEvaluationState = reader.GetOrdinal("EvaluationState");
						var indexEvaluationStatus = reader.GetOrdinal("EvaluationStatus");
						
						do
						{
							if (reader.GetString(0) == "Returns_Courses")
							{
								response.Courses.Add(new(
									reader.GetString(indexEvalationID),
									reader.GetString(indexTermCode),
									reader.GetString(indexCourseCode),
									reader.GetString(indexCourseTitle),
									reader.GetString(indexProfessorPicture),
									reader.GetString(indexProfessorName),
									reader.GetString(indexEvaluationState),
									reader.GetString(indexEvaluationStatus)));
							}
						}
						while (await reader.ReadAsync(cancellationToken));
						break;
					}
				}
			}
		}
		while (await reader.NextResultAsync(cancellationToken));
		
		if (!isCourses) throw new Exception("Expected return table `Courses`)");
		
		return response;
		
		string inputTerms(List<SqlParameter> parameters)
		{
			System.Text.StringBuilder query = new();
			query.Append("Insert Into @Params_Terms(TermCode)");
			
			if (request.Terms.Count == 0) return "";
			
			query.AppendLine(" Values");
			
			var comma = "";
			var index = 0;
			
			foreach(var item in request.Terms)
			{
				index++;
				
				query.AppendLine(comma);
				query.Append('(');
				AddParams(query, parameters, index, "ParamsTerms", "TermCode", System.Data.SqlDbType.VarChar, item.TermCode, 10);
				query.Append(')');
				
				comma = ",";
			}
			
			query.AppendLine(";");
			query.AppendLine();
			
			return query.ToString();
		}
		
		string inputParticipation(List<SqlParameter> parameters)
		{
			System.Text.StringBuilder query = new();
			query.Append("Insert Into @Params_Participation(SectionID, PersonID, ProfessorID, TermCode, CompletedDate)");
			
			if (request.Participation.Count == 0) return "";
			
			query.AppendLine(" Values");
			
			var comma = "";
			var index = 0;
			
			foreach(var item in request.Participation)
			{
				index++;
				
				query.AppendLine(comma);
				query.Append('(');
				AddParams(query, parameters, index, "ParamsParticipation", "SectionID", System.Data.SqlDbType.VarChar, item.SectionID, 20);
				query.Append(", ");
				AddParams(query, parameters, index, "ParamsParticipation", "PersonID", System.Data.SqlDbType.VarChar, item.PersonID, 10);
				query.Append(", ");
				AddParams(query, parameters, index, "ParamsParticipation", "ProfessorID", System.Data.SqlDbType.VarChar, item.ProfessorID, 10);
				query.Append(", ");
				AddParams(query, parameters, index, "ParamsParticipation", "TermCode", System.Data.SqlDbType.VarChar, item.TermCode, 10);
				query.Append(", ");
				AddParams(query, parameters, index, "ParamsParticipation", "CompletedDate", System.Data.SqlDbType.DateTimeOffset, item.CompletedDate);
				query.Append(')');
				
				comma = ",";
			}
			
			query.AppendLine(";");
			query.AppendLine();
			
			return query.ToString();
		}
		
		string inputOverrides(List<SqlParameter> parameters)
		{
			System.Text.StringBuilder query = new();
			query.Append("Insert Into @Params_Overrides(SectionID, TermCode, CourseCode, BeginDate, EndDate)");
			
			if (request.Overrides.Count == 0) return "";
			
			query.AppendLine(" Values");
			
			var comma = "";
			var index = 0;
			
			foreach(var item in request.Overrides)
			{
				index++;
				
				query.AppendLine(comma);
				query.Append('(');
				AddParams(query, parameters, index, "ParamsOverrides", "SectionID", System.Data.SqlDbType.VarChar, item.SectionID, 20);
				query.Append(", ");
				AddParams(query, parameters, index, "ParamsOverrides", "TermCode", System.Data.SqlDbType.VarChar, item.TermCode, 10);
				query.Append(", ");
				AddParams(query, parameters, index, "ParamsOverrides", "CourseCode", System.Data.SqlDbType.VarChar, item.CourseCode, 20);
				query.Append(", ");
				AddParams(query, parameters, index, "ParamsOverrides", "BeginDate", System.Data.SqlDbType.DateTimeOffset, item.BeginDate);
				query.Append(", ");
				AddParams(query, parameters, index, "ParamsOverrides", "EndDate", System.Data.SqlDbType.DateTimeOffset, item.EndDate);
				query.Append(')');
				
				comma = ",";
			}
			
			query.AppendLine(";");
			query.AppendLine();
			
			return query.ToString();
		}
		
		string Query(List<SqlParameter> parameters) => $"""
		Declare @Params_Terms table(
			[__SQuiL__Table__Type__Params_Terms__] varchar(max) default('Params_Terms'),
			TermCode varchar(10));
		{inputTerms(parameters)}
		
		Declare @Params_Participation table(
			[__SQuiL__Table__Type__Params_Participation__] varchar(max) default('Params_Participation'),
			SectionID varchar(20),
			PersonID varchar(10),
			ProfessorID varchar(10),
			TermCode varchar(10),
			CompletedDate datetime);
		{inputParticipation(parameters)}
		
		Declare @Params_Overrides table(
			[__SQuiL__Table__Type__Params_Overrides__] varchar(max) default('Params_Overrides'),
			SectionID varchar(20),
			TermCode varchar(10),
			CourseCode varchar(20),
			BeginDate datetime,
			EndDate datetime);
		{inputOverrides(parameters)}
		
		Declare @Returns_Courses table(
			[__SQuiL__Table__Type__Returns_Courses__] varchar(max) default('Returns_Courses'),
			EvalationID varchar(20),
			TermCode varchar(10),
			CourseCode varchar(20),
			CourseTitle varchar(100),
			ProfessorPicture varchar(1000),
			ProfessorName varchar(100),
			EvaluationState varchar(6),
			EvaluationStatus varchar(50));
		
		Use [{builder.InitialCatalog}];
		
		If @Param_AsOfDate Is Null Set @Param_AsOfDate = GetDate();
		
		Begin -- Courses
			Declare @Courses table(
				SectionID varchar(20),
				PersonID varchar(10),
				TermCode varchar(10),
				CourseCode varchar(20),
				CourseTitle varchar(100),
				BeginDate date,
				EndDate date)
			Insert Into @Courses
			Select		ss.SectionID, ss.PersonID, s.SectionTermActual, s.CourseName, s.CourseTitle,
						Case
							When o.BeginDate Is Not Null And o.BeginDate < t.StartDate Then t.StartDate 
							When o.BeginDate Is Not Null Then o.BeginDate
							When s.SectionStartDate < DateAdd(week, -4, s.SectionEndDate) Then DateAdd(week, -4, s.SectionEndDate)
							Else s.SectionStartDate
						End,
						Case 
							When o.EndDate Is Not Null And DateAdd(week, 1, o.EndDate) > t.GradesDueDate Then t.GradesDueDate
							When o.EndDate Is Not Null And DateAdd(week, 1, o.EndDate) > DateAdd(week, 1, t.EndDate) Then DateAdd(week, 1, t.EndDate)
							When o.EndDate Is Not Null Then DateAdd(week, 1, o.EndDate)
							When DateAdd(week, 1, s.SectionEndDate) > t.GradesDueDate Then t.GradesDueDate
							Else DateAdd(week, 1, s.SectionEndDate)
						End
			From		adm.StudentSections ss
						Inner Join adm.Sections s
							On s.SectionID = ss.SectionID
						Inner Join pub.Terms t
							On t.Term = s.SectionTermActual
						Inner Join @Terms tt
							On t.Term = tt.TermCode
						Left Join @Overrides o
							On o.SectionID = ss.SectionID
							And o.CourseCode = s.CourseName
							And o.TermCode = s.SectionTermActual
			Where		ss.PersonID = @PersonID
						And (@CourseCode Is Null Or s.CourseName = @CourseCode)
						And (
							GetDate() Between t.PreRegStartDate And DateAdd(week, 2, t.EndDate)
							Or s.SectionTermActual = t.Term
						);
		
			If @PersonID = '0300996' Begin
				Update		@Courses
				Set			BeginDate = '2008-10-15',
							EndDate = '2008-10-26'
				Where		SectionID = '19454'
			End;
		
			Update		@Courses
			Set			BeginDate = Case Format(BeginDate, 'dddd')
							When 'Friday' Then DateAdd(day, -1, BeginDate)
							When 'Saturday' Then DateAdd(day, 1, BeginDate)
							Else BeginDate
						End,
						EndDate = Case Format(EndDate, 'dddd')
							When 'Friday' Then DateAdd(day, -1, EndDate)
							When 'Saturday' Then DateAdd(day, 1, EndDate)
							Else EndDate
						End;
		
		End;
		
		Insert Into @Returns_Courses(EvalationID, TermCode, CourseCode, CourseTitle, ProfessorPicture, ProfessorName, EvaluationState, EvaluationStatus)
		Select EvaluationID, TermCode, CourseCode, CourseTitle, PictureLink, PreferredName, Trim(SubString(EvaluationStatus, 1, 6)), SubString(EvaluationStatus, 8, 1000) From (
		Select		Char(64 + sf.FacultyOrder) + Cast(sf.SectionFacultyID As varchar(10)) As EvaluationID,
					c.TermCode, /*c.SectionID,*/ c.CourseCode, c.CourseTitle, p.PictureLink, p.PreferredName, Case
						When e.CompletedDate Is Not Null Then 'DONE  :Completed On ' + Format(e.CompletedDate, 'dddd, MMMM d')
						When @Param_AsOfDate < c.BeginDate Then 'OPENS :Opens On ' + Format(c.BeginDate, 'dddd, MMMM d')
						When @Param_AsOfDate < c.EndDate Then 'OPEN  :Open Until ' + Format(c.EndDate, 'dddd, MMMM d')
						Else 'CLOSED:Closed On ' + Format(c.EndDate, 'dddd, MMMM d')
					End EvaluationStatus
		From		@Courses c
					Inner Join adm.SectionFaculty sf
						On sf.SectionID = c.SectionID
					Inner Join pub.spPerson p
						On p.PersonID = sf.PersonID
					Left Join @Participation e
						On e.SectionID = c.SectionID
						And e.PersonID = c.PersonID
						And e.ProfessorID = sf.PersonID
						And e.TermCode = c.TermCode
		) list;
		
		Select * From @Returns_Courses;
		
		If @Param_Debug = 1 Begin
			Select '@Variables' As [TableName], @Lookup As '@Lookup';
			Select '@Courses' As [TableName], * From @Courses;
			Select '@Participation' As [TableName], * From @Returns_Participation;
			Select '@Overrides' As [TableName], * From @Returns_Overrides;
		End;
		
		""";
	}
}
