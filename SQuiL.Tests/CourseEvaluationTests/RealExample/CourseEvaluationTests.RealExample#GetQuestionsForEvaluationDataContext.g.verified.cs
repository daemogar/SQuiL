//HintName: GetQuestionsForEvaluationDataContext.g.cs
// <auto-generated />

#nullable enable

using Microsoft.Data.SqlClient;

using SQuiL;

namespace CourseEvaluation.Application.Data;

partial class CourseEvaluationDataContext : SQuiLBaseDataContext
{
	public async Task<GetQuestionsForEvaluationResponse> ProcessGetQuestionsForEvaluationAsync(
		GetQuestionsForEvaluationRequest request,
		CancellationToken cancellationToken = default!)
	{
		var builder = ConnectionStringBuilder("DataRepository");
		using SqlConnection connection = new(builder.ConnectionString);
		var command = connection.CreateCommand();
		
		List<SqlParameter> parameters = new()
		{
			new("EnvironmentName", System.Data.SqlDbType.VarChar, EnvironmentName.Length) { Value = EnvironmentName }, 
			new("Debug", System.Data.SqlDbType.Bit) { Value = EnvironmentName != "Production" }, };
		
		command.CommandText = Query(parameters);
		command.Parameters.AddRange(parameters.ToArray());
		
		await connection.OpenAsync(cancellationToken);
		
		GetQuestionsForEvaluationResponse response = new();
		
		var isQuestions = false;
		
		using var reader = await command.ExecuteReaderAsync(cancellationToken);
		
		do
		{
			var tableTag = reader.GetName(0);
			if(tableTag.StartsWith("__SQuiL__Table__Type__"))
			{
				switch (tableTag)
				{
					case "__SQuiL__Table__Type__Returns_Questions__":
					{
						isQuestions = true;
						
						if (!await reader.ReadAsync(cancellationToken)) break;
						
						var indexSectionID = reader.GetOrdinal("SectionID");
						var indexCategory = reader.GetOrdinal("Category");
						var indexType = reader.GetOrdinal("Type");
						var indexQuestion = reader.GetOrdinal("Question");
						
						do
						{
							if (reader.GetString(0) == "Returns_Questions")
							{
								response.Questions.Add(new(
									reader.GetString(indexSectionID),
									reader.GetString(indexCategory),
									reader.GetString(indexType),
									reader.GetString(indexQuestion)));
							}
						}
						while (await reader.ReadAsync(cancellationToken));
						break;
					}
				}
			}
		}
		while (await reader.NextResultAsync(cancellationToken));
		
		if (!isQuestions) throw new Exception("Expected return table `Questions`)");
		
		return response;
		
		string inputSection(List<SqlParameter> parameters)
		{
			System.Text.StringBuilder query = new();
			query.Append("Insert Into @Param_Section(SectionID, Department, CourseCode, CourseTitle, IsOnline, IsGraduateCourse, IsAdultDegreeCourse, IsNursingCourse, IsConnectionsCourse, IsPrivateMusicLessons, IsServiceLearning)");
			
			if (request.Section is null)
				throw new NullReferenceException(
					"GetQuestionsForEvaluationRequest is missing the required property Section.");
			
			query.AppendLine();
			query.Append("Values (");
			
			AddParams(query, parameters, 0, "ParamSection", "SectionID", System.Data.SqlDbType.VarChar, request.Section.SectionID, 20);
			query.Append(", ");
			AddParams(query, parameters, 0, "ParamSection", "Department", System.Data.SqlDbType.VarChar, request.Section.Department, 100);
			query.Append(", ");
			AddParams(query, parameters, 0, "ParamSection", "CourseCode", System.Data.SqlDbType.VarChar, request.Section.CourseCode, 20);
			query.Append(", ");
			AddParams(query, parameters, 0, "ParamSection", "CourseTitle", System.Data.SqlDbType.VarChar, request.Section.CourseTitle, 150);
			query.Append(", ");
			AddParams(query, parameters, 0, "ParamSection", "IsOnline", System.Data.SqlDbType.Bit, request.Section.IsOnline);
			query.Append(", ");
			AddParams(query, parameters, 0, "ParamSection", "IsGraduateCourse", System.Data.SqlDbType.Bit, request.Section.IsGraduateCourse);
			query.Append(", ");
			AddParams(query, parameters, 0, "ParamSection", "IsAdultDegreeCourse", System.Data.SqlDbType.Bit, request.Section.IsAdultDegreeCourse);
			query.Append(", ");
			AddParams(query, parameters, 0, "ParamSection", "IsNursingCourse", System.Data.SqlDbType.Bit, request.Section.IsNursingCourse);
			query.Append(", ");
			AddParams(query, parameters, 0, "ParamSection", "IsConnectionsCourse", System.Data.SqlDbType.Bit, request.Section.IsConnectionsCourse);
			query.Append(", ");
			AddParams(query, parameters, 0, "ParamSection", "IsPrivateMusicLessons", System.Data.SqlDbType.Bit, request.Section.IsPrivateMusicLessons);
			query.Append(", ");
			AddParams(query, parameters, 0, "ParamSection", "IsServiceLearning", System.Data.SqlDbType.Bit, request.Section.IsServiceLearning);
			
			query.Append(')');
			query.AppendLine(";");
			query.AppendLine();
			
			return query.ToString();
		}
		
		string Query(List<SqlParameter> parameters) => $"""
		Declare @Param_Section table(
			[__SQuiL__Table__Type__Param_Section__] varchar(max) default('Param_Section'),
			SectionID varchar(20),
			Department varchar(100),
			CourseCode varchar(20),
			CourseTitle varchar(150),
			IsOnline bit,
			IsGraduateCourse bit,
			IsAdultDegreeCourse bit,
			IsNursingCourse bit,
			IsConnectionsCourse bit,
			IsPrivateMusicLessons bit,
			IsServiceLearning bit);
		{inputSection(parameters)}
		
		Declare @Returns_Questions table(
			[__SQuiL__Table__Type__Returns_Questions__] varchar(max) default('Returns_Questions'),
			SectionID varchar(20),
			Category varchar(200),
			Type varchar(20),
			Question varchar(1000));
		
		Use [{builder.InitialCatalog}];
		
		Insert Into @Returns_Questions(SectionID, Category, Type, Question)
		Select		s.SectionID,
					Case ShowWhen
						When 'global' Then 'Global Questions'
						When 'online' Then 'Online Questions'
						When 'graduate' Then 'Graduate Questions'
						When 'department' Then s.Department + ' Questions'
						When 'section' Then s.CourseTitle + ' Questions (' + s.CourseCode + ')'
						When 'service_learning' Then 'Service Learning Questions'
						When 'nursing' Then 'Nursing Questions'
						When 'connections' Then 'Southern Connections Questions'
						When 'private_music_instruction' Then 'Private Music Leason Questions'
						Else Null
					End,
					Upper(QuestionType) As QuestionType,
					QuestionText From (
		Select		--pv.ElementId As ElementID,
					Cast(Max(Iif(pv.PropertyName = 'QuestionEnabled', Iif(PropertyValue = 'True', 1, 0), 0)) As bit) As IsEnabled,
					Cast(Max(Iif(pv.PropertyName = 'QuestionOrder', PropertyValue, Null)) As int) As SortOrder,
					--Max(Iif(pv.PropertyName = 'QuestionSectionId', PropertyValue, Null)) As SectionID,
					Max(Iif(pv.PropertyName = 'QuestionShowCondition', PropertyValue, Null)) As Condition,
					Max(Iif(pv.PropertyName = 'QuestionShowWhen', Iif(PropertyValue = 'division', 'department', PropertyValue), Null)) As ShowWhen,
					Max(Iif(pv.PropertyName = 'QuestionText', PropertyValue, Null)) As QuestionText,
					Max(Iif(pv.PropertyName = 'QuestionType', Case PropertyValue
						When 'likert' Then PropertyValue
						When 'shortanswer' Then PropertyValue
						Else Null
					End, Null)) As QuestionType
					--Max(Iif(pv.PropertyName = 'TermCode', SubString(PropertyValue, 1, 3), Null)) As TermCode
		From		CourseEvaluation_PropertyValues pv
					Inner Join (
						Select		ElementId
						From		CourseEvaluation_PropertyValues
						Where		PropertyName = 'Tag'
									And PropertyValue = 'EvaluationQuestion'
					) tags
						On tags.ElementId = pv.ElementId
		Group By	pv.ElementId
		) list Cross Join @Sections s
		Where		IsEnabled = 1 And Case ShowWhen
						When 'global' Then 1
						When 'online' Then IsOnline
						When 'graduate' Then IsGraduateCourse
						When 'department' Then Iif(Department = Condition, 1, 0)
						When 'section' Then Iif(list.Condition = s.SectionID, 1, 0)
						When 'service_learning' Then IsServiceLearning
						When 'nursing' Then IsNursingCourse
						When 'connections' Then IsConnectionsCourse
						When 'private_music_instruction' Then IsPrivateMusicLessons
						Else 0
					End = 1
		Order By	list.QuestionType, Case ShowWhen
						When 'global' Then 1
						When 'online' Then 2
						When 'graduate' Then 3
						When 'department' Then 4
						When 'section' Then 5
						When 'service_learning' Then 6
						When 'nursing' Then 7
						When 'connections' Then 8
						When 'private_music_instruction' Then 9
						Else 99
					End, SortOrder
		
		Select * From @Returns_Questions;
		
		/*
		
		
		global;
		online=MATCH(section.MeetingRm,ONLINE);
		graduate=MATCH(section.IsGraduateCourse,True);
		department=section.DeptName;
		section=sectionId;
		service_learning=MATCH(section.GenEd,SERV1,SERV2,SERV3);
		nursing=MATCH_BEGIN(section.CourseName,NRSG,NRNT-125);
		connections=MATCH_BEGIN(section.CourseName,NOND-101,ENGR-121);
		private_music_instruction=MATCH_BEGIN(section.CourseName,MUPF-334)
		
		
		
		QuestionEnabled
		QuestionOrder
		QuestionSectionId
		QuestionShowCondition
		QuestionShowWhen
		QuestionText
		QuestionType
		Tag
		TermCode
		
		*/
		
		""";
	}
}
