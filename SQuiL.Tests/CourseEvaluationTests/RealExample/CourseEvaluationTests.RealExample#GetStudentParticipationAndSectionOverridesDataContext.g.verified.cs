//HintName: GetStudentParticipationAndSectionOverridesDataContext.g.cs
// <auto-generated />

#nullable enable

using Microsoft.Data.SqlClient;

using SQuiL;

namespace CourseEvaluation.Application.Data;

partial class CourseEvaluationDataContext : SQuiLBaseDataContext
{
	public async Task<GetStudentParticipationAndSectionOverridesResponse> ProcessGetStudentParticipationAndSectionOverridesAsync(
		GetStudentParticipationAndSectionOverridesRequest request,
		CancellationToken cancellationToken = default!)
	{
		var builder = ConnectionStringBuilder("DataRepository");
		using SqlConnection connection = new(builder.ConnectionString);
		var command = connection.CreateCommand();
		
		List<SqlParameter> parameters = new()
		{
			new("EnvironmentName", System.Data.SqlDbType.VarChar, EnvironmentName.Length) { Value = EnvironmentName }, 
			new("Debug", System.Data.SqlDbType.Bit) { Value = EnvironmentName != "Production" }, 
			new("PersonID", System.Data.SqlDbType.VarChar, 10) 
			{
				IsNullable = true,
				Value = request.PersonID switch
				{
					null => (object)System.DBNull.Value,
					{ Length: <= 10 } => request.PersonID,
					_ => throw new Exception(
						"Request model data is larger then database size for the property [PersonID].")
				}
			}
		};
		
		command.CommandText = Query(parameters);
		command.Parameters.AddRange(parameters.ToArray());
		
		await connection.OpenAsync(cancellationToken);
		
		GetStudentParticipationAndSectionOverridesResponse response = new();
		
		var isParticipation = false;
		var isOverrides = false;
		
		using var reader = await command.ExecuteReaderAsync(cancellationToken);
		
		do
		{
			var tableTag = reader.GetName(0);
			if(tableTag.StartsWith("__SQuiL__Table__Type__"))
			{
				switch (tableTag)
				{
					case "__SQuiL__Table__Type__Returns_Participation__":
					{
						isParticipation = true;
						
						if (!await reader.ReadAsync(cancellationToken)) break;
						
						var indexSectionID = reader.GetOrdinal("SectionID");
						var indexPersonID = reader.GetOrdinal("PersonID");
						var indexProfessorID = reader.GetOrdinal("ProfessorID");
						var indexTermCode = reader.GetOrdinal("TermCode");
						var indexCompletedDate = reader.GetOrdinal("CompletedDate");
						
						do
						{
							if (reader.GetString(0) == "Returns_Participation")
							{
								response.Participation.Add(new(
									reader.GetString(indexSectionID),
									reader.GetString(indexPersonID),
									reader.GetString(indexProfessorID),
									reader.GetString(indexTermCode),
									reader.GetDateTime(indexCompletedDate)));
							}
						}
						while (await reader.ReadAsync(cancellationToken));
						break;
					}
					case "__SQuiL__Table__Type__Returns_Overrides__":
					{
						isOverrides = true;
						
						if (!await reader.ReadAsync(cancellationToken)) break;
						
						var indexSectionID = reader.GetOrdinal("SectionID");
						var indexTermCode = reader.GetOrdinal("TermCode");
						var indexCourseCode = reader.GetOrdinal("CourseCode");
						var indexBeginDate = reader.GetOrdinal("BeginDate");
						var indexEndDate = reader.GetOrdinal("EndDate");
						
						do
						{
							if (reader.GetString(0) == "Returns_Overrides")
							{
								response.Overrides.Add(new(
									reader.GetString(indexSectionID),
									reader.GetString(indexTermCode),
									reader.GetString(indexCourseCode),
									reader.GetDateTime(indexBeginDate),
									reader.GetDateTime(indexEndDate)));
							}
						}
						while (await reader.ReadAsync(cancellationToken));
						break;
					}
				}
			}
		}
		while (await reader.NextResultAsync(cancellationToken));
		
		if (!isParticipation) throw new Exception("Expected return table `Participation`)");
		if (!isOverrides) throw new Exception("Expected return table `Overrides`)");
		
		return response;
		
		string inputTerms(List<SqlParameter> parameters)
		{
			System.Text.StringBuilder query = new();
			query.Append("Insert Into @Params_Terms(TermCode)");
			
			if (request.Terms.Count == 0) return "";
			
			query.AppendLine(" Values");
			
			var comma = "";
			var index = 0;
			
			foreach(var item in request.Terms)
			{
				index++;
				
				query.AppendLine(comma);
				query.Append('(');
				AddParams(query, parameters, index, "ParamsTerms", "TermCode", System.Data.SqlDbType.VarChar, item.TermCode, 10);
				query.Append(')');
				
				comma = ",";
			}
			
			query.AppendLine(";");
			query.AppendLine();
			
			return query.ToString();
		}
		
		string Query(List<SqlParameter> parameters) => $"""
		Declare @Params_Terms table(
			[__SQuiL__Table__Type__Params_Terms__] varchar(max) default('Params_Terms'),
			TermCode varchar(10));
		{inputTerms(parameters)}
		
		Declare @Returns_Participation table(
			[__SQuiL__Table__Type__Returns_Participation__] varchar(max) default('Returns_Participation'),
			SectionID varchar(20),
			PersonID varchar(10),
			ProfessorID varchar(10),
			TermCode varchar(10),
			CompletedDate datetime);
		
		Declare @Returns_Overrides table(
			[__SQuiL__Table__Type__Returns_Overrides__] varchar(max) default('Returns_Overrides'),
			SectionID varchar(20),
			TermCode varchar(10),
			CourseCode varchar(20),
			BeginDate datetime,
			EndDate datetime);
		
		Use [{builder.InitialCatalog}];
		
		--Test;
		
		Insert Into @Returns_Participation(SectionID, PersonID, ProfessorID, TermCode, CompletedDate)
		Select list.* From (
		Select		--pv.ElementId As ElementID,
					Max(Iif(pv.PropertyName = 'ParticipationSectionId', PropertyValue, Null)) as SectionID,
					Max(Iif(pv.PropertyName = 'ParticipationStudentId', PropertyValue, Null)) as PersonID,
					Max(Iif(pv.PropertyName = 'ParticipationTeacherId', PropertyValue, Null)) as ProfessorID,
					Max(Iif(pv.PropertyName = 'ParticipationTerm', PropertyValue, Null)) as TermCode,
					Max(Iif(pv.PropertyName = 'ParticipationCompletedOn', Cast(PropertyValue As datetime), Null)) as CompletedDate
		From		CourseEvaluation_PropertyValues pv
					Inner Join (
						Select		ElementId
						From		CourseEvaluation_PropertyValues
						Where		PropertyName = 'Tag'
									And PropertyValue = 'Participation'
					) tags
						On tags.ElementId = pv.ElementId
		Group By	pv.ElementId
		) list Inner Join @Params_Terms t On list.TermCode = t.TermCode
		Where		PersonID = @PersonID;
		
		Insert Into @Returns_Overrides(SectionID, TermCode, CourseCode, BeginDate, EndDate)
		Select list.* From (
		Select		Max(Iif(pv.PropertyName = 'SectionDateSectionId', PropertyValue, Null)) as SectionID,
					Max(Iif(pv.PropertyName = 'SectionDateTerm', PropertyValue, Null)) as TermCode,
					Max(Iif(pv.PropertyName = 'SectionDateDescription', PropertyValue, Null)) as CourseCode,
					Max(Iif(pv.PropertyName = 'SectionDateEvaluationBeginDate', Cast(PropertyValue As date), Null)) as BeginDate,
					Max(Iif(pv.PropertyName = 'SectionDateEvaluationEndDate', Cast(PropertyValue As date), Null)) as EndDate
		From		CourseEvaluation_PropertyValues pv
					Inner Join (
						Select		ElementId
						From		CourseEvaluation_PropertyValues
						Where		PropertyName = 'Tag'
									And PropertyValue = 'SectionDate'
					) tags
						On tags.ElementId = pv.ElementId
		Group By	pv.ElementId
		) list Inner Join @Params_Terms t On list.TermCode = t.TermCode;
		
		Select * From @Returns_Participation;
		Select * From @Returns_Overrides;
		
		Select * From @Params_Terms;
		
		/*
		
		ParticipationCompletedOn
		ParticipationSectionId
		ParticipationStudentId
		ParticipationTeacherId
		ParticipationTerm
		
		*/
		
		""";
	}
}
