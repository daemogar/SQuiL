{
  Diagnostics: [
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: CodeBlock { CodeType = INPUT_ARGUMENT, DatabaseType = Token { Type = TYPE_STRING, Offset = 29, Value = EvaluationID, Original = @Param_EvaluationID varchar(21) }, Name = EvaluationID, DefaultValue = , IsObject = False, IsTable = False, IsRequired = True, IsNullable = True, Size = 21, Properties =  },
      Message: CodeBlock { CodeType = INPUT_ARGUMENT, DatabaseType = Token { Type = TYPE_STRING, Offset = 29, Value = EvaluationID, Original = @Param_EvaluationID varchar(21) }, Name = EvaluationID, DefaultValue = , IsObject = False, IsTable = False, IsRequired = True, IsNullable = True, Size = 21, Properties =  },
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: CodeBlock { CodeType = OUTPUT_VARIABLE, DatabaseType = Token { Type = TYPE_STRING, Offset = 109, Value = 10, Original = @Return_SectionID varchar(10) }, Name = SectionID, DefaultValue = , IsObject = False, IsTable = False, IsRequired = False, IsNullable = False, Size = 10, Properties =  },
      Message: CodeBlock { CodeType = OUTPUT_VARIABLE, DatabaseType = Token { Type = TYPE_STRING, Offset = 109, Value = 10, Original = @Return_SectionID varchar(10) }, Name = SectionID, DefaultValue = , IsObject = False, IsTable = False, IsRequired = False, IsNullable = False, Size = 10, Properties =  },
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: CodeBlock { CodeType = OUTPUT_VARIABLE, DatabaseType = Token { Type = TYPE_STRING, Offset = 154, Value = 10, Original = @Return_PersonID varchar(10) }, Name = PersonID, DefaultValue = , IsObject = False, IsTable = False, IsRequired = False, IsNullable = False, Size = 10, Properties =  },
      Message: CodeBlock { CodeType = OUTPUT_VARIABLE, DatabaseType = Token { Type = TYPE_STRING, Offset = 154, Value = 10, Original = @Return_PersonID varchar(10) }, Name = PersonID, DefaultValue = , IsObject = False, IsTable = False, IsRequired = False, IsNullable = False, Size = 10, Properties =  },
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: CodeBlock { CodeType = OUTPUT_VARIABLE, DatabaseType = Token { Type = TYPE_STRING, Offset = 199, Value = 10, Original = @Return_TermCode varchar(10) }, Name = TermCode, DefaultValue = , IsObject = False, IsTable = False, IsRequired = False, IsNullable = False, Size = 10, Properties =  },
      Message: CodeBlock { CodeType = OUTPUT_VARIABLE, DatabaseType = Token { Type = TYPE_STRING, Offset = 199, Value = 10, Original = @Return_TermCode varchar(10) }, Name = TermCode, DefaultValue = , IsObject = False, IsTable = False, IsRequired = False, IsNullable = False, Size = 10, Properties =  },
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: CodeBlock { CodeType = USING, DatabaseType = Token { Type = IDENTIFIER, Offset = 224, Value = BIWarehouse, Original = BIWarehouse }, Name = BIWarehouse, DefaultValue = , IsObject = False, IsTable = False, IsRequired = True, IsNullable = True, Size = , Properties =  },
      Message: CodeBlock { CodeType = USING, DatabaseType = Token { Type = IDENTIFIER, Offset = 224, Value = BIWarehouse, Original = BIWarehouse }, Name = BIWarehouse, DefaultValue = , IsObject = False, IsTable = False, IsRequired = True, IsNullable = True, Size = , Properties =  },
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: CodeBlock { CodeType = BODY, DatabaseType = Token { Type = BODY, Offset = 240, Value = Select		@Return_SectionID = sf.SectionID, 			@Return_PersonID = sf.PersonID, 			@Return_TermCode = s.SectionTermActual From		adm.SectionFaculty sf 			Inner Join adm.Sections s 				On s.SectionID = sf.SectionID 			Inner Join pub.spPerson p 				On p.PersonID = sf.PersonID Where		Char(64 + sf.FacultyOrder) + Cast(sf.SectionFacultyID As varchar(10)) = @Param_EvaluationID;  Select 'Return_SectionID' As [__SQuiL__Table__Type__Return_SectionID__], @Return_SectionID; Select 'Return_PersonID' As [__SQuiL__Table__Type__Return_PersonID__], @Return_PersonID; Select 'Return_TermCode' As [__SQuiL__Table__Type__Return_TermCode__], @Return_TermCode; , Original = Select		@Return_SectionID = sf.SectionID, 			@Return_PersonID = sf.PersonID, 			@Return_TermCode = s.SectionTermActual From		adm.SectionFaculty sf 			Inner Join adm.Sections s 				On s.SectionID = sf.SectionID 			Inner Join pub.spPerson p 				On p.PersonID = sf.PersonID Where		Char(64 + sf.FacultyOrder) + Cast(sf.SectionFacultyID As varchar(10)) = @Param_EvaluationID;  Select @Return_SectionID; Select @Return_PersonID; Select @Return_TermCode; }, Name = Select		@Return_SectionID = sf.SectionID, 			@Return_PersonID = sf.PersonID, 			@Return_TermCode = s.SectionTermActual From		adm.SectionFaculty sf 			Inner Join adm.Sections s 				On s.SectionID = sf.SectionID 			Inner Join pub.spPerson p 				On p.PersonID = sf.PersonID Where		Char(64 + sf.FacultyOrder) + Cast(sf.SectionFacultyID As varchar(10)) = @Param_EvaluationID;  Select 'Return_SectionID' As [__SQuiL__Table__Type__Return_SectionID__], @Return_SectionID; Select 'Return_PersonID' As [__SQuiL__Table__Type__Return_PersonID__], @Return_PersonID; Select 'Return_TermCode' As [__SQuiL__Table__Type__Return_TermCode__], @Return_TermCode; , DefaultValue = , IsObject = False, IsTable = False, IsRequired = True, IsNullable = True, Size = , Properties =  },
      Message: CodeBlock { CodeType = BODY, DatabaseType = Token { Type = BODY, Offset = 240, Value = Select		@Return_SectionID = sf.SectionID, 			@Return_PersonID = sf.PersonID, 			@Return_TermCode = s.SectionTermActual From		adm.SectionFaculty sf 			Inner Join adm.Sections s 				On s.SectionID = sf.SectionID 			Inner Join pub.spPerson p 				On p.PersonID = sf.PersonID Where		Char(64 + sf.FacultyOrder) + Cast(sf.SectionFacultyID As varchar(10)) = @Param_EvaluationID;  Select 'Return_SectionID' As [__SQuiL__Table__Type__Return_SectionID__], @Return_SectionID; Select 'Return_PersonID' As [__SQuiL__Table__Type__Return_PersonID__], @Return_PersonID; Select 'Return_TermCode' As [__SQuiL__Table__Type__Return_TermCode__], @Return_TermCode; , Original = Select		@Return_SectionID = sf.SectionID, 			@Return_PersonID = sf.PersonID, 			@Return_TermCode = s.SectionTermActual From		adm.SectionFaculty sf 			Inner Join adm.Sections s 				On s.SectionID = sf.SectionID 			Inner Join pub.spPerson p 				On p.PersonID = sf.PersonID Where		Char(64 + sf.FacultyOrder) + Cast(sf.SectionFacultyID As varchar(10)) = @Param_EvaluationID;  Select @Return_SectionID; Select @Return_PersonID; Select @Return_TermCode; }, Name = Select		@Return_SectionID = sf.SectionID, 			@Return_PersonID = sf.PersonID, 			@Return_TermCode = s.SectionTermActual From		adm.SectionFaculty sf 			Inner Join adm.Sections s 				On s.SectionID = sf.SectionID 			Inner Join pub.spPerson p 				On p.PersonID = sf.PersonID Where		Char(64 + sf.FacultyOrder) + Cast(sf.SectionFacultyID As varchar(10)) = @Param_EvaluationID;  Select 'Return_SectionID' As [__SQuiL__Table__Type__Return_SectionID__], @Return_SectionID; Select 'Return_PersonID' As [__SQuiL__Table__Type__Return_PersonID__], @Return_PersonID; Select 'Return_TermCode' As [__SQuiL__Table__Type__Return_TermCode__], @Return_TermCode; , DefaultValue = , IsObject = False, IsTable = False, IsRequired = True, IsNullable = True, Size = , Properties =  },
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: KEYWORD_DECLARE => ,
      Message: KEYWORD_DECLARE => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: VARIABLE => Param_EvaluationID,
      Message: VARIABLE => Param_EvaluationID,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_STRING => 21,
      Message: TYPE_STRING => 21,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: KEYWORD_SET => ,
      Message: KEYWORD_SET => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: VARIABLE => Param_EvaluationID,
      Message: VARIABLE => Param_EvaluationID,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_EQUAL => ,
      Message: SYMBOL_EQUAL => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: LITERAL_STRING => A25311,
      Message: LITERAL_STRING => A25311,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: KEYWORD_DECLARE => ,
      Message: KEYWORD_DECLARE => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: VARIABLE => Return_SectionID,
      Message: VARIABLE => Return_SectionID,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_STRING => 10,
      Message: TYPE_STRING => 10,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_EQUAL => ,
      Message: SYMBOL_EQUAL => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: LITERAL_STRING => ,
      Message: LITERAL_STRING => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: KEYWORD_DECLARE => ,
      Message: KEYWORD_DECLARE => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: VARIABLE => Return_PersonID,
      Message: VARIABLE => Return_PersonID,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_STRING => 10,
      Message: TYPE_STRING => 10,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_EQUAL => ,
      Message: SYMBOL_EQUAL => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: LITERAL_STRING => ,
      Message: LITERAL_STRING => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: KEYWORD_DECLARE => ,
      Message: KEYWORD_DECLARE => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: VARIABLE => Return_TermCode,
      Message: VARIABLE => Return_TermCode,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_STRING => 10,
      Message: TYPE_STRING => 10,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_EQUAL => ,
      Message: SYMBOL_EQUAL => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: LITERAL_STRING => ,
      Message: LITERAL_STRING => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: KEYWORD_USE => ,
      Message: KEYWORD_USE => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => BIWarehouse,
      Message: IDENTIFIER => BIWarehouse,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SELECT_VARIABLE => Return_SectionID,
      Message: SELECT_VARIABLE => Return_SectionID,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SELECT_VARIABLE => Return_SectionID,
      Message: SELECT_VARIABLE => Return_SectionID,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SELECT_VARIABLE => Return_PersonID,
      Message: SELECT_VARIABLE => Return_PersonID,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SELECT_VARIABLE => Return_TermCode,
      Message: SELECT_VARIABLE => Return_TermCode,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: BODY => Select		@Return_SectionID = sf.SectionID, 			@Return_PersonID = sf.PersonID, 			@Return_TermCode = s.SectionTermActual From		adm.SectionFaculty sf 			Inner Join adm.Sections s 				On s.SectionID = sf.SectionID 			Inner Join pub.spPerson p 				On p.PersonID = sf.PersonID Where		Char(64 + sf.FacultyOrder) + Cast(sf.SectionFacultyID As varchar(10)) = @Param_EvaluationID;  Select @Return_SectionID; Select @Return_PersonID; Select @Return_TermCode;,
      Message: BODY => Select		@Return_SectionID = sf.SectionID, 			@Return_PersonID = sf.PersonID, 			@Return_TermCode = s.SectionTermActual From		adm.SectionFaculty sf 			Inner Join adm.Sections s 				On s.SectionID = sf.SectionID 			Inner Join pub.spPerson p 				On p.PersonID = sf.PersonID Where		Char(64 + sf.FacultyOrder) + Cast(sf.SectionFacultyID As varchar(10)) = @Param_EvaluationID;  Select @Return_SectionID; Select @Return_PersonID; Select @Return_TermCode;,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: CodeBlock { CodeType = INPUT_ARGUMENT, DatabaseType = Token { Type = TYPE_DATE, Offset = 24, Value = , Original = @Param_AsOfDate date }, Name = AsOfDate, DefaultValue = , IsObject = False, IsTable = False, IsRequired = False, IsNullable = True, Size = , Properties =  },
      Message: CodeBlock { CodeType = INPUT_ARGUMENT, DatabaseType = Token { Type = TYPE_DATE, Offset = 24, Value = , Original = @Param_AsOfDate date }, Name = AsOfDate, DefaultValue = , IsObject = False, IsTable = False, IsRequired = False, IsNullable = True, Size = , Properties =  },
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: CodeBlock { CodeType = OUTPUT_TABLE, DatabaseType = Token { Type = TYPE_TABLE, Offset = 79, Value = Terms, Original = @Returns_Terms table }, Name = Terms, DefaultValue = , IsObject = False, IsTable = True, IsRequired = False, IsNullable = False, Size = , Properties = System.Collections.Generic.List`1[SQuiL.SourceGenerator.Parser.CodeItem] },
      Message: CodeBlock { CodeType = OUTPUT_TABLE, DatabaseType = Token { Type = TYPE_TABLE, Offset = 79, Value = Terms, Original = @Returns_Terms table }, Name = Terms, DefaultValue = , IsObject = False, IsTable = True, IsRequired = False, IsNullable = False, Size = , Properties = System.Collections.Generic.List`1[SQuiL.SourceGenerator.Parser.CodeItem] },
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: CodeBlock { CodeType = USING, DatabaseType = Token { Type = IDENTIFIER, Offset = 138, Value = BIWarehouse, Original = BIWarehouse }, Name = BIWarehouse, DefaultValue = , IsObject = False, IsTable = False, IsRequired = True, IsNullable = True, Size = , Properties =  },
      Message: CodeBlock { CodeType = USING, DatabaseType = Token { Type = IDENTIFIER, Offset = 138, Value = BIWarehouse, Original = BIWarehouse }, Name = BIWarehouse, DefaultValue = , IsObject = False, IsTable = False, IsRequired = True, IsNullable = True, Size = , Properties =  },
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: CodeBlock { CodeType = BODY, DatabaseType = Token { Type = BODY, Offset = 154, Value = If @Param_AsOfDate Is Null Set @Param_AsOfDate = GetDate();  Insert Into @Returns_Terms(TermCode) Select		t.Term From		pub.Terms t Where		@Param_AsOfDate Between t.RegStartDate And IsNull(t.GradesDueDate, DateAdd(week, 1, t.EndDate))  Select * From @Returns_Terms; , Original = If @Param_AsOfDate Is Null Set @Param_AsOfDate = GetDate();  Insert Into @Returns_Terms Select		t.Term From		pub.Terms t Where		@Param_AsOfDate Between t.RegStartDate And IsNull(t.GradesDueDate, DateAdd(week, 1, t.EndDate))  Select * From @Returns_Terms; }, Name = If @Param_AsOfDate Is Null Set @Param_AsOfDate = GetDate();  Insert Into @Returns_Terms(TermCode) Select		t.Term From		pub.Terms t Where		@Param_AsOfDate Between t.RegStartDate And IsNull(t.GradesDueDate, DateAdd(week, 1, t.EndDate))  Select * From @Returns_Terms; , DefaultValue = , IsObject = False, IsTable = False, IsRequired = True, IsNullable = True, Size = , Properties =  },
      Message: CodeBlock { CodeType = BODY, DatabaseType = Token { Type = BODY, Offset = 154, Value = If @Param_AsOfDate Is Null Set @Param_AsOfDate = GetDate();  Insert Into @Returns_Terms(TermCode) Select		t.Term From		pub.Terms t Where		@Param_AsOfDate Between t.RegStartDate And IsNull(t.GradesDueDate, DateAdd(week, 1, t.EndDate))  Select * From @Returns_Terms; , Original = If @Param_AsOfDate Is Null Set @Param_AsOfDate = GetDate();  Insert Into @Returns_Terms Select		t.Term From		pub.Terms t Where		@Param_AsOfDate Between t.RegStartDate And IsNull(t.GradesDueDate, DateAdd(week, 1, t.EndDate))  Select * From @Returns_Terms; }, Name = If @Param_AsOfDate Is Null Set @Param_AsOfDate = GetDate();  Insert Into @Returns_Terms(TermCode) Select		t.Term From		pub.Terms t Where		@Param_AsOfDate Between t.RegStartDate And IsNull(t.GradesDueDate, DateAdd(week, 1, t.EndDate))  Select * From @Returns_Terms; , DefaultValue = , IsObject = False, IsTable = False, IsRequired = True, IsNullable = True, Size = , Properties =  },
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: KEYWORD_DECLARE => ,
      Message: KEYWORD_DECLARE => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: VARIABLE => Param_AsOfDate,
      Message: VARIABLE => Param_AsOfDate,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_DATE => ,
      Message: TYPE_DATE => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_EQUAL => ,
      Message: SYMBOL_EQUAL => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: LITERAL_NULL => ,
      Message: LITERAL_NULL => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: KEYWORD_SET => ,
      Message: KEYWORD_SET => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: VARIABLE => Param_AsOfDate,
      Message: VARIABLE => Param_AsOfDate,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_EQUAL => ,
      Message: SYMBOL_EQUAL => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: LITERAL_STRING => 2024-05-01,
      Message: LITERAL_STRING => 2024-05-01,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: KEYWORD_DECLARE => ,
      Message: KEYWORD_DECLARE => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: VARIABLE => Returns_Terms,
      Message: VARIABLE => Returns_Terms,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_TABLE => ,
      Message: TYPE_TABLE => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_LPREN => ,
      Message: SYMBOL_LPREN => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => TermCode,
      Message: IDENTIFIER => TermCode,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_STRING => 10,
      Message: TYPE_STRING => 10,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_RPREN => ,
      Message: SYMBOL_RPREN => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: KEYWORD_USE => ,
      Message: KEYWORD_USE => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => BIWarehouse,
      Message: IDENTIFIER => BIWarehouse,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: INSERT_INTO_TABLE => Returns_Terms,
      Message: INSERT_INTO_TABLE => Returns_Terms,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: BODY => If @Param_AsOfDate Is Null Set @Param_AsOfDate = GetDate();  Insert Into @Returns_Terms Select		t.Term From		pub.Terms t Where		@Param_AsOfDate Between t.RegStartDate And IsNull(t.GradesDueDate, DateAdd(week, 1, t.EndDate))  Select * From @Returns_Terms;,
      Message: BODY => If @Param_AsOfDate Is Null Set @Param_AsOfDate = GetDate();  Insert Into @Returns_Terms Select		t.Term From		pub.Terms t Where		@Param_AsOfDate Between t.RegStartDate And IsNull(t.GradesDueDate, DateAdd(week, 1, t.EndDate))  Select * From @Returns_Terms;,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: CodeBlock { CodeType = INPUT_ARGUMENT, DatabaseType = Token { Type = TYPE_BOOLEAN, Offset = 21, Value = , Original = @Param_Debug bit }, Name = Debug, DefaultValue = 1, IsObject = False, IsTable = False, IsRequired = False, IsNullable = False, Size = , Properties =  },
      Message: CodeBlock { CodeType = INPUT_ARGUMENT, DatabaseType = Token { Type = TYPE_BOOLEAN, Offset = 21, Value = , Original = @Param_Debug bit }, Name = Debug, DefaultValue = 1, IsObject = False, IsTable = False, IsRequired = False, IsNullable = False, Size = , Properties =  },
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: CodeBlock { CodeType = INPUT_ARGUMENT, DatabaseType = Token { Type = TYPE_STRING, Offset = 49, Value = PersonID, Original = @Param_PersonID varchar(10) }, Name = PersonID, DefaultValue = , IsObject = False, IsTable = False, IsRequired = True, IsNullable = True, Size = 10, Properties =  },
      Message: CodeBlock { CodeType = INPUT_ARGUMENT, DatabaseType = Token { Type = TYPE_STRING, Offset = 49, Value = PersonID, Original = @Param_PersonID varchar(10) }, Name = PersonID, DefaultValue = , IsObject = False, IsTable = False, IsRequired = True, IsNullable = True, Size = 10, Properties =  },
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: CodeBlock { CodeType = INPUT_ARGUMENT, DatabaseType = Token { Type = TYPE_STRING, Offset = 83, Value = 20, Original = @Param_CourseCode varchar(20) }, Name = CourseCode, DefaultValue = , IsObject = False, IsTable = False, IsRequired = False, IsNullable = True, Size = 20, Properties =  },
      Message: CodeBlock { CodeType = INPUT_ARGUMENT, DatabaseType = Token { Type = TYPE_STRING, Offset = 83, Value = 20, Original = @Param_CourseCode varchar(20) }, Name = CourseCode, DefaultValue = , IsObject = False, IsTable = False, IsRequired = False, IsNullable = True, Size = 20, Properties =  },
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: CodeBlock { CodeType = INPUT_ARGUMENT, DatabaseType = Token { Type = TYPE_DATE, Offset = 122, Value = , Original = @Param_AsOfDate date }, Name = AsOfDate, DefaultValue = , IsObject = False, IsTable = False, IsRequired = False, IsNullable = True, Size = , Properties =  },
      Message: CodeBlock { CodeType = INPUT_ARGUMENT, DatabaseType = Token { Type = TYPE_DATE, Offset = 122, Value = , Original = @Param_AsOfDate date }, Name = AsOfDate, DefaultValue = , IsObject = False, IsTable = False, IsRequired = False, IsNullable = True, Size = , Properties =  },
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: CodeBlock { CodeType = INPUT_TABLE, DatabaseType = Token { Type = TYPE_TABLE, Offset = 246, Value = Terms, Original = @Params_Terms table }, Name = Terms, DefaultValue = , IsObject = False, IsTable = True, IsRequired = False, IsNullable = False, Size = , Properties = System.Collections.Generic.List`1[SQuiL.SourceGenerator.Parser.CodeItem] },
      Message: CodeBlock { CodeType = INPUT_TABLE, DatabaseType = Token { Type = TYPE_TABLE, Offset = 246, Value = Terms, Original = @Params_Terms table }, Name = Terms, DefaultValue = , IsObject = False, IsTable = True, IsRequired = False, IsNullable = False, Size = , Properties = System.Collections.Generic.List`1[SQuiL.SourceGenerator.Parser.CodeItem] },
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: CodeBlock { CodeType = INPUT_TABLE, DatabaseType = Token { Type = TYPE_TABLE, Offset = 382, Value = Participation, Original = @Params_Participation table }, Name = Participation, DefaultValue = , IsObject = False, IsTable = True, IsRequired = False, IsNullable = False, Size = , Properties = System.Collections.Generic.List`1[SQuiL.SourceGenerator.Parser.CodeItem] },
      Message: CodeBlock { CodeType = INPUT_TABLE, DatabaseType = Token { Type = TYPE_TABLE, Offset = 382, Value = Participation, Original = @Params_Participation table }, Name = Participation, DefaultValue = , IsObject = False, IsTable = True, IsRequired = False, IsNullable = False, Size = , Properties = System.Collections.Generic.List`1[SQuiL.SourceGenerator.Parser.CodeItem] },
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: CodeBlock { CodeType = INPUT_TABLE, DatabaseType = Token { Type = TYPE_TABLE, Offset = 641, Value = Overrides, Original = @Params_Overrides table }, Name = Overrides, DefaultValue = , IsObject = False, IsTable = True, IsRequired = False, IsNullable = False, Size = , Properties = System.Collections.Generic.List`1[SQuiL.SourceGenerator.Parser.CodeItem] },
      Message: CodeBlock { CodeType = INPUT_TABLE, DatabaseType = Token { Type = TYPE_TABLE, Offset = 641, Value = Overrides, Original = @Params_Overrides table }, Name = Overrides, DefaultValue = , IsObject = False, IsTable = True, IsRequired = False, IsNullable = False, Size = , Properties = System.Collections.Generic.List`1[SQuiL.SourceGenerator.Parser.CodeItem] },
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: CodeBlock { CodeType = OUTPUT_TABLE, DatabaseType = Token { Type = TYPE_TABLE, Offset = 889, Value = Courses, Original = @Returns_Courses table }, Name = Courses, DefaultValue = , IsObject = False, IsTable = True, IsRequired = False, IsNullable = False, Size = , Properties = System.Collections.Generic.List`1[SQuiL.SourceGenerator.Parser.CodeItem] },
      Message: CodeBlock { CodeType = OUTPUT_TABLE, DatabaseType = Token { Type = TYPE_TABLE, Offset = 889, Value = Courses, Original = @Returns_Courses table }, Name = Courses, DefaultValue = , IsObject = False, IsTable = True, IsRequired = False, IsNullable = False, Size = , Properties = System.Collections.Generic.List`1[SQuiL.SourceGenerator.Parser.CodeItem] },
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: CodeBlock { CodeType = USING, DatabaseType = Token { Type = IDENTIFIER, Offset = 1189, Value = BIWarehouse, Original = BIWarehouse }, Name = BIWarehouse, DefaultValue = , IsObject = False, IsTable = False, IsRequired = True, IsNullable = True, Size = , Properties =  },
      Message: CodeBlock { CodeType = USING, DatabaseType = Token { Type = IDENTIFIER, Offset = 1189, Value = BIWarehouse, Original = BIWarehouse }, Name = BIWarehouse, DefaultValue = , IsObject = False, IsTable = False, IsRequired = True, IsNullable = True, Size = , Properties =  },
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: CodeBlock { CodeType = BODY, DatabaseType = Token { Type = BODY, Offset = 1205, Value = If @Param_AsOfDate Is Null Set @Param_AsOfDate = GetDate();  Begin -- Courses 	Declare @Courses table( 		SectionID varchar(20), 		PersonID varchar(10), 		TermCode varchar(10), 		CourseCode varchar(20), 		CourseTitle varchar(100), 		BeginDate date, 		EndDate date) 	Insert Into @Courses 	Select		ss.SectionID, ss.PersonID, s.SectionTermActual, s.CourseName, s.CourseTitle, 				Case 					When o.BeginDate Is Not Null And o.BeginDate < t.StartDate Then t.StartDate  					When o.BeginDate Is Not Null Then o.BeginDate 					When s.SectionStartDate < DateAdd(week, -4, s.SectionEndDate) Then DateAdd(week, -4, s.SectionEndDate) 					Else s.SectionStartDate 				End, 				Case  					When o.EndDate Is Not Null And DateAdd(week, 1, o.EndDate) > t.GradesDueDate Then t.GradesDueDate 					When o.EndDate Is Not Null And DateAdd(week, 1, o.EndDate) > DateAdd(week, 1, t.EndDate) Then DateAdd(week, 1, t.EndDate) 					When o.EndDate Is Not Null Then DateAdd(week, 1, o.EndDate) 					When DateAdd(week, 1, s.SectionEndDate) > t.GradesDueDate Then t.GradesDueDate 					Else DateAdd(week, 1, s.SectionEndDate) 				End 	From		adm.StudentSections ss 				Inner Join adm.Sections s 					On s.SectionID = ss.SectionID 				Inner Join pub.Terms t 					On t.Term = s.SectionTermActual 				Inner Join @Terms tt 					On t.Term = tt.TermCode 				Left Join @Overrides o 					On o.SectionID = ss.SectionID 					And o.CourseCode = s.CourseName 					And o.TermCode = s.SectionTermActual 	Where		ss.PersonID = @PersonID 				And (@CourseCode Is Null Or s.CourseName = @CourseCode) 				And ( 					GetDate() Between t.PreRegStartDate And DateAdd(week, 2, t.EndDate) 					Or s.SectionTermActual = t.Term 				);  	If @PersonID = '0300996' Begin 		Update		@Courses 		Set			BeginDate = '2008-10-15', 					EndDate = '2008-10-26' 		Where		SectionID = '19454' 	End;  	Update		@Courses 	Set			BeginDate = Case Format(BeginDate, 'dddd') 					When 'Friday' Then DateAdd(day, -1, BeginDate) 					When 'Saturday' Then DateAdd(day, 1, BeginDate) 					Else BeginDate 				End, 				EndDate = Case Format(EndDate, 'dddd') 					When 'Friday' Then DateAdd(day, -1, EndDate) 					When 'Saturday' Then DateAdd(day, 1, EndDate) 					Else EndDate 				End;  End;  Insert Into @Returns_Courses(EvalationID, TermCode, CourseCode, CourseTitle, ProfessorPicture, ProfessorName, EvaluationState, EvaluationStatus) Select EvaluationID, TermCode, CourseCode, CourseTitle, PictureLink, PreferredName, Trim(SubString(EvaluationStatus, 1, 6)), SubString(EvaluationStatus, 8, 1000) From ( Select		Char(64 + sf.FacultyOrder) + Cast(sf.SectionFacultyID As varchar(10)) As EvaluationID, 			c.TermCode, /*c.SectionID,*/ c.CourseCode, c.CourseTitle, p.PictureLink, p.PreferredName, Case 				When e.CompletedDate Is Not Null Then 'DONE  :Completed On ' + Format(e.CompletedDate, 'dddd, MMMM d') 				When @Param_AsOfDate < c.BeginDate Then 'OPENS :Opens On ' + Format(c.BeginDate, 'dddd, MMMM d') 				When @Param_AsOfDate < c.EndDate Then 'OPEN  :Open Until ' + Format(c.EndDate, 'dddd, MMMM d') 				Else 'CLOSED:Closed On ' + Format(c.EndDate, 'dddd, MMMM d') 			End EvaluationStatus From		@Courses c 			Inner Join adm.SectionFaculty sf 				On sf.SectionID = c.SectionID 			Inner Join pub.spPerson p 				On p.PersonID = sf.PersonID 			Left Join @Participation e 				On e.SectionID = c.SectionID 				And e.PersonID = c.PersonID 				And e.ProfessorID = sf.PersonID 				And e.TermCode = c.TermCode ) list;  Select * From @Returns_Courses;  If @Param_Debug = 1 Begin 	Select '@Variables' As [TableName], @Lookup As '@Lookup'; 	Select '@Courses' As [TableName], * From @Courses; 	Select '@Participation' As [TableName], * From @Returns_Participation; 	Select '@Overrides' As [TableName], * From @Returns_Overrides; End; , Original = If @Param_AsOfDate Is Null Set @Param_AsOfDate = GetDate();  Begin -- Courses 	Declare @Courses table( 		SectionID varchar(20), 		PersonID varchar(10), 		TermCode varchar(10), 		CourseCode varchar(20), 		CourseTitle varchar(100), 		BeginDate date, 		EndDate date) 	Insert Into @Courses 	Select		ss.SectionID, ss.PersonID, s.SectionTermActual, s.CourseName, s.CourseTitle, 				Case 					When o.BeginDate Is Not Null And o.BeginDate < t.StartDate Then t.StartDate  					When o.BeginDate Is Not Null Then o.BeginDate 					When s.SectionStartDate < DateAdd(week, -4, s.SectionEndDate) Then DateAdd(week, -4, s.SectionEndDate) 					Else s.SectionStartDate 				End, 				Case  					When o.EndDate Is Not Null And DateAdd(week, 1, o.EndDate) > t.GradesDueDate Then t.GradesDueDate 					When o.EndDate Is Not Null And DateAdd(week, 1, o.EndDate) > DateAdd(week, 1, t.EndDate) Then DateAdd(week, 1, t.EndDate) 					When o.EndDate Is Not Null Then DateAdd(week, 1, o.EndDate) 					When DateAdd(week, 1, s.SectionEndDate) > t.GradesDueDate Then t.GradesDueDate 					Else DateAdd(week, 1, s.SectionEndDate) 				End 	From		adm.StudentSections ss 				Inner Join adm.Sections s 					On s.SectionID = ss.SectionID 				Inner Join pub.Terms t 					On t.Term = s.SectionTermActual 				Inner Join @Terms tt 					On t.Term = tt.TermCode 				Left Join @Overrides o 					On o.SectionID = ss.SectionID 					And o.CourseCode = s.CourseName 					And o.TermCode = s.SectionTermActual 	Where		ss.PersonID = @PersonID 				And (@CourseCode Is Null Or s.CourseName = @CourseCode) 				And ( 					GetDate() Between t.PreRegStartDate And DateAdd(week, 2, t.EndDate) 					Or s.SectionTermActual = t.Term 				);  	If @PersonID = '0300996' Begin 		Update		@Courses 		Set			BeginDate = '2008-10-15', 					EndDate = '2008-10-26' 		Where		SectionID = '19454' 	End;  	Update		@Courses 	Set			BeginDate = Case Format(BeginDate, 'dddd') 					When 'Friday' Then DateAdd(day, -1, BeginDate) 					When 'Saturday' Then DateAdd(day, 1, BeginDate) 					Else BeginDate 				End, 				EndDate = Case Format(EndDate, 'dddd') 					When 'Friday' Then DateAdd(day, -1, EndDate) 					When 'Saturday' Then DateAdd(day, 1, EndDate) 					Else EndDate 				End;  End;  Insert Into @Returns_Courses Select EvaluationID, TermCode, CourseCode, CourseTitle, PictureLink, PreferredName, Trim(SubString(EvaluationStatus, 1, 6)), SubString(EvaluationStatus, 8, 1000) From ( Select		Char(64 + sf.FacultyOrder) + Cast(sf.SectionFacultyID As varchar(10)) As EvaluationID, 			c.TermCode, /*c.SectionID,*/ c.CourseCode, c.CourseTitle, p.PictureLink, p.PreferredName, Case 				When e.CompletedDate Is Not Null Then 'DONE  :Completed On ' + Format(e.CompletedDate, 'dddd, MMMM d') 				When @Param_AsOfDate < c.BeginDate Then 'OPENS :Opens On ' + Format(c.BeginDate, 'dddd, MMMM d') 				When @Param_AsOfDate < c.EndDate Then 'OPEN  :Open Until ' + Format(c.EndDate, 'dddd, MMMM d') 				Else 'CLOSED:Closed On ' + Format(c.EndDate, 'dddd, MMMM d') 			End EvaluationStatus From		@Courses c 			Inner Join adm.SectionFaculty sf 				On sf.SectionID = c.SectionID 			Inner Join pub.spPerson p 				On p.PersonID = sf.PersonID 			Left Join @Participation e 				On e.SectionID = c.SectionID 				And e.PersonID = c.PersonID 				And e.ProfessorID = sf.PersonID 				And e.TermCode = c.TermCode ) list;  Select * From @Returns_Courses;  If @Param_Debug = 1 Begin 	Select '@Variables' As [TableName], @Lookup As '@Lookup'; 	Select '@Courses' As [TableName], * From @Courses; 	Select '@Participation' As [TableName], * From @Returns_Participation; 	Select '@Overrides' As [TableName], * From @Returns_Overrides; End; }, Name = If @Param_AsOfDate Is Null Set @Param_AsOfDate = GetDate();  Begin -- Courses 	Declare @Courses table( 		SectionID varchar(20), 		PersonID varchar(10), 		TermCode varchar(10), 		CourseCode varchar(20), 		CourseTitle varchar(100), 		BeginDate date, 		EndDate date) 	Insert Into @Courses 	Select		ss.SectionID, ss.PersonID, s.SectionTermActual, s.CourseName, s.CourseTitle, 				Case 					When o.BeginDate Is Not Null And o.BeginDate < t.StartDate Then t.StartDate  					When o.BeginDate Is Not Null Then o.BeginDate 					When s.SectionStartDate < DateAdd(week, -4, s.SectionEndDate) Then DateAdd(week, -4, s.SectionEndDate) 					Else s.SectionStartDate 				End, 				Case  					When o.EndDate Is Not Null And DateAdd(week, 1, o.EndDate) > t.GradesDueDate Then t.GradesDueDate 					When o.EndDate Is Not Null And DateAdd(week, 1, o.EndDate) > DateAdd(week, 1, t.EndDate) Then DateAdd(week, 1, t.EndDate) 					When o.EndDate Is Not Null Then DateAdd(week, 1, o.EndDate) 					When DateAdd(week, 1, s.SectionEndDate) > t.GradesDueDate Then t.GradesDueDate 					Else DateAdd(week, 1, s.SectionEndDate) 				End 	From		adm.StudentSections ss 				Inner Join adm.Sections s 					On s.SectionID = ss.SectionID 				Inner Join pub.Terms t 					On t.Term = s.SectionTermActual 				Inner Join @Terms tt 					On t.Term = tt.TermCode 				Left Join @Overrides o 					On o.SectionID = ss.SectionID 					And o.CourseCode = s.CourseName 					And o.TermCode = s.SectionTermActual 	Where		ss.PersonID = @PersonID 				And (@CourseCode Is Null Or s.CourseName = @CourseCode) 				And ( 					GetDate() Between t.PreRegStartDate And DateAdd(week, 2, t.EndDate) 					Or s.SectionTermActual = t.Term 				);  	If @PersonID = '0300996' Begin 		Update		@Courses 		Set			BeginDate = '2008-10-15', 					EndDate = '2008-10-26' 		Where		SectionID = '19454' 	End;  	Update		@Courses 	Set			BeginDate = Case Format(BeginDate, 'dddd') 					When 'Friday' Then DateAdd(day, -1, BeginDate) 					When 'Saturday' Then DateAdd(day, 1, BeginDate) 					Else BeginDate 				End, 				EndDate = Case Format(EndDate, 'dddd') 					When 'Friday' Then DateAdd(day, -1, EndDate) 					When 'Saturday' Then DateAdd(day, 1, EndDate) 					Else EndDate 				End;  End;  Insert Into @Returns_Courses(EvalationID, TermCode, CourseCode, CourseTitle, ProfessorPicture, ProfessorName, EvaluationState, EvaluationStatus) Select EvaluationID, TermCode, CourseCode, CourseTitle, PictureLink, PreferredName, Trim(SubString(EvaluationStatus, 1, 6)), SubString(EvaluationStatus, 8, 1000) From ( Select		Char(64 + sf.FacultyOrder) + Cast(sf.SectionFacultyID As varchar(10)) As EvaluationID, 			c.TermCode, /*c.SectionID,*/ c.CourseCode, c.CourseTitle, p.PictureLink, p.PreferredName, Case 				When e.CompletedDate Is Not Null Then 'DONE  :Completed On ' + Format(e.CompletedDate, 'dddd, MMMM d') 				When @Param_AsOfDate < c.BeginDate Then 'OPENS :Opens On ' + Format(c.BeginDate, 'dddd, MMMM d') 				When @Param_AsOfDate < c.EndDate Then 'OPEN  :Open Until ' + Format(c.EndDate, 'dddd, MMMM d') 				Else 'CLOSED:Closed On ' + Format(c.EndDate, 'dddd, MMMM d') 			End EvaluationStatus From		@Courses c 			Inner Join adm.SectionFaculty sf 				On sf.SectionID = c.SectionID 			Inner Join pub.spPerson p 				On p.PersonID = sf.PersonID 			Left Join @Participation e 				On e.SectionID = c.SectionID 				And e.PersonID = c.PersonID 				And e.ProfessorID = sf.PersonID 				And e.TermCode = c.TermCode ) list;  Select * From @Returns_Courses;  If @Param_Debug = 1 Begin 	Select '@Variables' As [TableName], @Lookup As '@Lookup'; 	Select '@Courses' As [TableName], * From @Courses; 	Select '@Participation' As [TableName], * From @Returns_Participation; 	Select '@Overrides' As [TableName], * From @Returns_Overrides; End; , DefaultValue = , IsObject = False, IsTable = False, IsRequired = True, IsNullable = True, Size = , Properties =  },
      Message: CodeBlock { CodeType = BODY, DatabaseType = Token { Type = BODY, Offset = 1205, Value = If @Param_AsOfDate Is Null Set @Param_AsOfDate = GetDate();  Begin -- Courses 	Declare @Courses table( 		SectionID varchar(20), 		PersonID varchar(10), 		TermCode varchar(10), 		CourseCode varchar(20), 		CourseTitle varchar(100), 		BeginDate date, 		EndDate date) 	Insert Into @Courses 	Select		ss.SectionID, ss.PersonID, s.SectionTermActual, s.CourseName, s.CourseTitle, 				Case 					When o.BeginDate Is Not Null And o.BeginDate < t.StartDate Then t.StartDate  					When o.BeginDate Is Not Null Then o.BeginDate 					When s.SectionStartDate < DateAdd(week, -4, s.SectionEndDate) Then DateAdd(week, -4, s.SectionEndDate) 					Else s.SectionStartDate 				End, 				Case  					When o.EndDate Is Not Null And DateAdd(week, 1, o.EndDate) > t.GradesDueDate Then t.GradesDueDate 					When o.EndDate Is Not Null And DateAdd(week, 1, o.EndDate) > DateAdd(week, 1, t.EndDate) Then DateAdd(week, 1, t.EndDate) 					When o.EndDate Is Not Null Then DateAdd(week, 1, o.EndDate) 					When DateAdd(week, 1, s.SectionEndDate) > t.GradesDueDate Then t.GradesDueDate 					Else DateAdd(week, 1, s.SectionEndDate) 				End 	From		adm.StudentSections ss 				Inner Join adm.Sections s 					On s.SectionID = ss.SectionID 				Inner Join pub.Terms t 					On t.Term = s.SectionTermActual 				Inner Join @Terms tt 					On t.Term = tt.TermCode 				Left Join @Overrides o 					On o.SectionID = ss.SectionID 					And o.CourseCode = s.CourseName 					And o.TermCode = s.SectionTermActual 	Where		ss.PersonID = @PersonID 				And (@CourseCode Is Null Or s.CourseName = @CourseCode) 				And ( 					GetDate() Between t.PreRegStartDate And DateAdd(week, 2, t.EndDate) 					Or s.SectionTermActual = t.Term 				);  	If @PersonID = '0300996' Begin 		Update		@Courses 		Set			BeginDate = '2008-10-15', 					EndDate = '2008-10-26' 		Where		SectionID = '19454' 	End;  	Update		@Courses 	Set			BeginDate = Case Format(BeginDate, 'dddd') 					When 'Friday' Then DateAdd(day, -1, BeginDate) 					When 'Saturday' Then DateAdd(day, 1, BeginDate) 					Else BeginDate 				End, 				EndDate = Case Format(EndDate, 'dddd') 					When 'Friday' Then DateAdd(day, -1, EndDate) 					When 'Saturday' Then DateAdd(day, 1, EndDate) 					Else EndDate 				End;  End;  Insert Into @Returns_Courses(EvalationID, TermCode, CourseCode, CourseTitle, ProfessorPicture, ProfessorName, EvaluationState, EvaluationStatus) Select EvaluationID, TermCode, CourseCode, CourseTitle, PictureLink, PreferredName, Trim(SubString(EvaluationStatus, 1, 6)), SubString(EvaluationStatus, 8, 1000) From ( Select		Char(64 + sf.FacultyOrder) + Cast(sf.SectionFacultyID As varchar(10)) As EvaluationID, 			c.TermCode, /*c.SectionID,*/ c.CourseCode, c.CourseTitle, p.PictureLink, p.PreferredName, Case 				When e.CompletedDate Is Not Null Then 'DONE  :Completed On ' + Format(e.CompletedDate, 'dddd, MMMM d') 				When @Param_AsOfDate < c.BeginDate Then 'OPENS :Opens On ' + Format(c.BeginDate, 'dddd, MMMM d') 				When @Param_AsOfDate < c.EndDate Then 'OPEN  :Open Until ' + Format(c.EndDate, 'dddd, MMMM d') 				Else 'CLOSED:Closed On ' + Format(c.EndDate, 'dddd, MMMM d') 			End EvaluationStatus From		@Courses c 			Inner Join adm.SectionFaculty sf 				On sf.SectionID = c.SectionID 			Inner Join pub.spPerson p 				On p.PersonID = sf.PersonID 			Left Join @Participation e 				On e.SectionID = c.SectionID 				And e.PersonID = c.PersonID 				And e.ProfessorID = sf.PersonID 				And e.TermCode = c.TermCode ) list;  Select * From @Returns_Courses;  If @Param_Debug = 1 Begin 	Select '@Variables' As [TableName], @Lookup As '@Lookup'; 	Select '@Courses' As [TableName], * From @Courses; 	Select '@Participation' As [TableName], * From @Returns_Participation; 	Select '@Overrides' As [TableName], * From @Returns_Overrides; End; , Original = If @Param_AsOfDate Is Null Set @Param_AsOfDate = GetDate();  Begin -- Courses 	Declare @Courses table( 		SectionID varchar(20), 		PersonID varchar(10), 		TermCode varchar(10), 		CourseCode varchar(20), 		CourseTitle varchar(100), 		BeginDate date, 		EndDate date) 	Insert Into @Courses 	Select		ss.SectionID, ss.PersonID, s.SectionTermActual, s.CourseName, s.CourseTitle, 				Case 					When o.BeginDate Is Not Null And o.BeginDate < t.StartDate Then t.StartDate  					When o.BeginDate Is Not Null Then o.BeginDate 					When s.SectionStartDate < DateAdd(week, -4, s.SectionEndDate) Then DateAdd(week, -4, s.SectionEndDate) 					Else s.SectionStartDate 				End, 				Case  					When o.EndDate Is Not Null And DateAdd(week, 1, o.EndDate) > t.GradesDueDate Then t.GradesDueDate 					When o.EndDate Is Not Null And DateAdd(week, 1, o.EndDate) > DateAdd(week, 1, t.EndDate) Then DateAdd(week, 1, t.EndDate) 					When o.EndDate Is Not Null Then DateAdd(week, 1, o.EndDate) 					When DateAdd(week, 1, s.SectionEndDate) > t.GradesDueDate Then t.GradesDueDate 					Else DateAdd(week, 1, s.SectionEndDate) 				End 	From		adm.StudentSections ss 				Inner Join adm.Sections s 					On s.SectionID = ss.SectionID 				Inner Join pub.Terms t 					On t.Term = s.SectionTermActual 				Inner Join @Terms tt 					On t.Term = tt.TermCode 				Left Join @Overrides o 					On o.SectionID = ss.SectionID 					And o.CourseCode = s.CourseName 					And o.TermCode = s.SectionTermActual 	Where		ss.PersonID = @PersonID 				And (@CourseCode Is Null Or s.CourseName = @CourseCode) 				And ( 					GetDate() Between t.PreRegStartDate And DateAdd(week, 2, t.EndDate) 					Or s.SectionTermActual = t.Term 				);  	If @PersonID = '0300996' Begin 		Update		@Courses 		Set			BeginDate = '2008-10-15', 					EndDate = '2008-10-26' 		Where		SectionID = '19454' 	End;  	Update		@Courses 	Set			BeginDate = Case Format(BeginDate, 'dddd') 					When 'Friday' Then DateAdd(day, -1, BeginDate) 					When 'Saturday' Then DateAdd(day, 1, BeginDate) 					Else BeginDate 				End, 				EndDate = Case Format(EndDate, 'dddd') 					When 'Friday' Then DateAdd(day, -1, EndDate) 					When 'Saturday' Then DateAdd(day, 1, EndDate) 					Else EndDate 				End;  End;  Insert Into @Returns_Courses Select EvaluationID, TermCode, CourseCode, CourseTitle, PictureLink, PreferredName, Trim(SubString(EvaluationStatus, 1, 6)), SubString(EvaluationStatus, 8, 1000) From ( Select		Char(64 + sf.FacultyOrder) + Cast(sf.SectionFacultyID As varchar(10)) As EvaluationID, 			c.TermCode, /*c.SectionID,*/ c.CourseCode, c.CourseTitle, p.PictureLink, p.PreferredName, Case 				When e.CompletedDate Is Not Null Then 'DONE  :Completed On ' + Format(e.CompletedDate, 'dddd, MMMM d') 				When @Param_AsOfDate < c.BeginDate Then 'OPENS :Opens On ' + Format(c.BeginDate, 'dddd, MMMM d') 				When @Param_AsOfDate < c.EndDate Then 'OPEN  :Open Until ' + Format(c.EndDate, 'dddd, MMMM d') 				Else 'CLOSED:Closed On ' + Format(c.EndDate, 'dddd, MMMM d') 			End EvaluationStatus From		@Courses c 			Inner Join adm.SectionFaculty sf 				On sf.SectionID = c.SectionID 			Inner Join pub.spPerson p 				On p.PersonID = sf.PersonID 			Left Join @Participation e 				On e.SectionID = c.SectionID 				And e.PersonID = c.PersonID 				And e.ProfessorID = sf.PersonID 				And e.TermCode = c.TermCode ) list;  Select * From @Returns_Courses;  If @Param_Debug = 1 Begin 	Select '@Variables' As [TableName], @Lookup As '@Lookup'; 	Select '@Courses' As [TableName], * From @Courses; 	Select '@Participation' As [TableName], * From @Returns_Participation; 	Select '@Overrides' As [TableName], * From @Returns_Overrides; End; }, Name = If @Param_AsOfDate Is Null Set @Param_AsOfDate = GetDate();  Begin -- Courses 	Declare @Courses table( 		SectionID varchar(20), 		PersonID varchar(10), 		TermCode varchar(10), 		CourseCode varchar(20), 		CourseTitle varchar(100), 		BeginDate date, 		EndDate date) 	Insert Into @Courses 	Select		ss.SectionID, ss.PersonID, s.SectionTermActual, s.CourseName, s.CourseTitle, 				Case 					When o.BeginDate Is Not Null And o.BeginDate < t.StartDate Then t.StartDate  					When o.BeginDate Is Not Null Then o.BeginDate 					When s.SectionStartDate < DateAdd(week, -4, s.SectionEndDate) Then DateAdd(week, -4, s.SectionEndDate) 					Else s.SectionStartDate 				End, 				Case  					When o.EndDate Is Not Null And DateAdd(week, 1, o.EndDate) > t.GradesDueDate Then t.GradesDueDate 					When o.EndDate Is Not Null And DateAdd(week, 1, o.EndDate) > DateAdd(week, 1, t.EndDate) Then DateAdd(week, 1, t.EndDate) 					When o.EndDate Is Not Null Then DateAdd(week, 1, o.EndDate) 					When DateAdd(week, 1, s.SectionEndDate) > t.GradesDueDate Then t.GradesDueDate 					Else DateAdd(week, 1, s.SectionEndDate) 				End 	From		adm.StudentSections ss 				Inner Join adm.Sections s 					On s.SectionID = ss.SectionID 				Inner Join pub.Terms t 					On t.Term = s.SectionTermActual 				Inner Join @Terms tt 					On t.Term = tt.TermCode 				Left Join @Overrides o 					On o.SectionID = ss.SectionID 					And o.CourseCode = s.CourseName 					And o.TermCode = s.SectionTermActual 	Where		ss.PersonID = @PersonID 				And (@CourseCode Is Null Or s.CourseName = @CourseCode) 				And ( 					GetDate() Between t.PreRegStartDate And DateAdd(week, 2, t.EndDate) 					Or s.SectionTermActual = t.Term 				);  	If @PersonID = '0300996' Begin 		Update		@Courses 		Set			BeginDate = '2008-10-15', 					EndDate = '2008-10-26' 		Where		SectionID = '19454' 	End;  	Update		@Courses 	Set			BeginDate = Case Format(BeginDate, 'dddd') 					When 'Friday' Then DateAdd(day, -1, BeginDate) 					When 'Saturday' Then DateAdd(day, 1, BeginDate) 					Else BeginDate 				End, 				EndDate = Case Format(EndDate, 'dddd') 					When 'Friday' Then DateAdd(day, -1, EndDate) 					When 'Saturday' Then DateAdd(day, 1, EndDate) 					Else EndDate 				End;  End;  Insert Into @Returns_Courses(EvalationID, TermCode, CourseCode, CourseTitle, ProfessorPicture, ProfessorName, EvaluationState, EvaluationStatus) Select EvaluationID, TermCode, CourseCode, CourseTitle, PictureLink, PreferredName, Trim(SubString(EvaluationStatus, 1, 6)), SubString(EvaluationStatus, 8, 1000) From ( Select		Char(64 + sf.FacultyOrder) + Cast(sf.SectionFacultyID As varchar(10)) As EvaluationID, 			c.TermCode, /*c.SectionID,*/ c.CourseCode, c.CourseTitle, p.PictureLink, p.PreferredName, Case 				When e.CompletedDate Is Not Null Then 'DONE  :Completed On ' + Format(e.CompletedDate, 'dddd, MMMM d') 				When @Param_AsOfDate < c.BeginDate Then 'OPENS :Opens On ' + Format(c.BeginDate, 'dddd, MMMM d') 				When @Param_AsOfDate < c.EndDate Then 'OPEN  :Open Until ' + Format(c.EndDate, 'dddd, MMMM d') 				Else 'CLOSED:Closed On ' + Format(c.EndDate, 'dddd, MMMM d') 			End EvaluationStatus From		@Courses c 			Inner Join adm.SectionFaculty sf 				On sf.SectionID = c.SectionID 			Inner Join pub.spPerson p 				On p.PersonID = sf.PersonID 			Left Join @Participation e 				On e.SectionID = c.SectionID 				And e.PersonID = c.PersonID 				And e.ProfessorID = sf.PersonID 				And e.TermCode = c.TermCode ) list;  Select * From @Returns_Courses;  If @Param_Debug = 1 Begin 	Select '@Variables' As [TableName], @Lookup As '@Lookup'; 	Select '@Courses' As [TableName], * From @Courses; 	Select '@Participation' As [TableName], * From @Returns_Participation; 	Select '@Overrides' As [TableName], * From @Returns_Overrides; End; , DefaultValue = , IsObject = False, IsTable = False, IsRequired = True, IsNullable = True, Size = , Properties =  },
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: KEYWORD_DECLARE => ,
      Message: KEYWORD_DECLARE => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: VARIABLE => Param_Debug,
      Message: VARIABLE => Param_Debug,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_BOOLEAN => ,
      Message: TYPE_BOOLEAN => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_EQUAL => ,
      Message: SYMBOL_EQUAL => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: LITERAL_NUMBER => 1,
      Message: LITERAL_NUMBER => 1,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: VARIABLE => Param_PersonID,
      Message: VARIABLE => Param_PersonID,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_STRING => 10,
      Message: TYPE_STRING => 10,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: VARIABLE => Param_CourseCode,
      Message: VARIABLE => Param_CourseCode,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_STRING => 20,
      Message: TYPE_STRING => 20,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_EQUAL => ,
      Message: SYMBOL_EQUAL => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: LITERAL_NULL => ,
      Message: LITERAL_NULL => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: VARIABLE => Param_AsOfDate,
      Message: VARIABLE => Param_AsOfDate,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_DATE => ,
      Message: TYPE_DATE => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_EQUAL => ,
      Message: SYMBOL_EQUAL => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: LITERAL_NULL => ,
      Message: LITERAL_NULL => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: KEYWORD_SET => ,
      Message: KEYWORD_SET => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: VARIABLE => Param_PersonID,
      Message: VARIABLE => Param_PersonID,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_EQUAL => ,
      Message: SYMBOL_EQUAL => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: LITERAL_STRING => 0300996,
      Message: LITERAL_STRING => 0300996,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat:
COMMENT_SINGLELINE => --Set @CourseCode = 'MATH-120-A';
,
      Message:
COMMENT_SINGLELINE => --Set @CourseCode = 'MATH-120-A';
,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: KEYWORD_SET => ,
      Message: KEYWORD_SET => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: VARIABLE => Param_AsOfDate,
      Message: VARIABLE => Param_AsOfDate,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_EQUAL => ,
      Message: SYMBOL_EQUAL => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: LITERAL_STRING => 2008-09-19,
      Message: LITERAL_STRING => 2008-09-19,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: KEYWORD_DECLARE => ,
      Message: KEYWORD_DECLARE => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: VARIABLE => Params_Terms,
      Message: VARIABLE => Params_Terms,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_TABLE => ,
      Message: TYPE_TABLE => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_LPREN => ,
      Message: SYMBOL_LPREN => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => TermCode,
      Message: IDENTIFIER => TermCode,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_STRING => 10,
      Message: TYPE_STRING => 10,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_RPREN => ,
      Message: SYMBOL_RPREN => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: KEYWORD_INSERT => ,
      Message: KEYWORD_INSERT => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: KEYWORD_INTO => ,
      Message: KEYWORD_INTO => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: VARIABLE => Params_Terms,
      Message: VARIABLE => Params_Terms,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => Select,
      Message: IDENTIFIER => Select,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: LITERAL_STRING => F08,
      Message: LITERAL_STRING => F08,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: KEYWORD_INSERT => ,
      Message: KEYWORD_INSERT => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: KEYWORD_INTO => ,
      Message: KEYWORD_INTO => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: VARIABLE => Params_Terms,
      Message: VARIABLE => Params_Terms,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => Select,
      Message: IDENTIFIER => Select,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: LITERAL_STRING => F06,
      Message: LITERAL_STRING => F06,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: KEYWORD_DECLARE => ,
      Message: KEYWORD_DECLARE => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: VARIABLE => Params_Participation,
      Message: VARIABLE => Params_Participation,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_TABLE => ,
      Message: TYPE_TABLE => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_LPREN => ,
      Message: SYMBOL_LPREN => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => SectionID,
      Message: IDENTIFIER => SectionID,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_STRING => 20,
      Message: TYPE_STRING => 20,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => PersonID,
      Message: IDENTIFIER => PersonID,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_STRING => 10,
      Message: TYPE_STRING => 10,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => ProfessorID,
      Message: IDENTIFIER => ProfessorID,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_STRING => 10,
      Message: TYPE_STRING => 10,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => TermCode,
      Message: IDENTIFIER => TermCode,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_STRING => 10,
      Message: TYPE_STRING => 10,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => CompletedDate,
      Message: IDENTIFIER => CompletedDate,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_DATETIME => ,
      Message: TYPE_DATETIME => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_RPREN => ,
      Message: SYMBOL_RPREN => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: KEYWORD_INSERT => ,
      Message: KEYWORD_INSERT => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: KEYWORD_INTO => ,
      Message: KEYWORD_INTO => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: VARIABLE => Participation,
      Message: VARIABLE => Participation,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => Select,
      Message: IDENTIFIER => Select,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: LITERAL_STRING => 20655,
      Message: LITERAL_STRING => 20655,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: VARIABLE => PersonID,
      Message: VARIABLE => PersonID,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: LITERAL_STRING => 0300801,
      Message: LITERAL_STRING => 0300801,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: LITERAL_STRING => F08,
      Message: LITERAL_STRING => F08,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: LITERAL_STRING => 2023-11-29,
      Message: LITERAL_STRING => 2023-11-29,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: KEYWORD_DECLARE => ,
      Message: KEYWORD_DECLARE => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: VARIABLE => Params_Overrides,
      Message: VARIABLE => Params_Overrides,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_TABLE => ,
      Message: TYPE_TABLE => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_LPREN => ,
      Message: SYMBOL_LPREN => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => SectionID,
      Message: IDENTIFIER => SectionID,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_STRING => 20,
      Message: TYPE_STRING => 20,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => TermCode,
      Message: IDENTIFIER => TermCode,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_STRING => 10,
      Message: TYPE_STRING => 10,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => CourseCode,
      Message: IDENTIFIER => CourseCode,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_STRING => 20,
      Message: TYPE_STRING => 20,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => BeginDate,
      Message: IDENTIFIER => BeginDate,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_DATETIME => ,
      Message: TYPE_DATETIME => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => EndDate,
      Message: IDENTIFIER => EndDate,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_DATETIME => ,
      Message: TYPE_DATETIME => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_RPREN => ,
      Message: SYMBOL_RPREN => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: KEYWORD_INSERT => ,
      Message: KEYWORD_INSERT => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: KEYWORD_INTO => ,
      Message: KEYWORD_INTO => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: VARIABLE => Overrides,
      Message: VARIABLE => Overrides,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => Select,
      Message: IDENTIFIER => Select,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: LITERAL_STRING => 19012,
      Message: LITERAL_STRING => 19012,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: LITERAL_STRING => F08,
      Message: LITERAL_STRING => F08,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: LITERAL_STRING => CPTR-365-A,
      Message: LITERAL_STRING => CPTR-365-A,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: LITERAL_STRING => 2023-09-15,
      Message: LITERAL_STRING => 2023-09-15,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: LITERAL_STRING => 2023-11-20,
      Message: LITERAL_STRING => 2023-11-20,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: KEYWORD_DECLARE => ,
      Message: KEYWORD_DECLARE => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: VARIABLE => Returns_Courses,
      Message: VARIABLE => Returns_Courses,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_TABLE => ,
      Message: TYPE_TABLE => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_LPREN => ,
      Message: SYMBOL_LPREN => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => EvalationID,
      Message: IDENTIFIER => EvalationID,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_STRING => 20,
      Message: TYPE_STRING => 20,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => TermCode,
      Message: IDENTIFIER => TermCode,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_STRING => 10,
      Message: TYPE_STRING => 10,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat:
COMMENT_SINGLELINE => --SectionID varchar(20),
,
      Message:
COMMENT_SINGLELINE => --SectionID varchar(20),
,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => CourseCode,
      Message: IDENTIFIER => CourseCode,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_STRING => 20,
      Message: TYPE_STRING => 20,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => CourseTitle,
      Message: IDENTIFIER => CourseTitle,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_STRING => 100,
      Message: TYPE_STRING => 100,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => ProfessorPicture,
      Message: IDENTIFIER => ProfessorPicture,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_STRING => 1000,
      Message: TYPE_STRING => 1000,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => ProfessorName,
      Message: IDENTIFIER => ProfessorName,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_STRING => 100,
      Message: TYPE_STRING => 100,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => EvaluationState,
      Message: IDENTIFIER => EvaluationState,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_STRING => 6,
      Message: TYPE_STRING => 6,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => EvaluationStatus,
      Message: IDENTIFIER => EvaluationStatus,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_STRING => 50,
      Message: TYPE_STRING => 50,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_RPREN => ,
      Message: SYMBOL_RPREN => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: KEYWORD_USE => ,
      Message: KEYWORD_USE => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => BIWarehouse,
      Message: IDENTIFIER => BIWarehouse,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: INSERT_INTO_TABLE => Courses,
      Message: INSERT_INTO_TABLE => Courses,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: INSERT_INTO_TABLE => Returns_Courses,
      Message: INSERT_INTO_TABLE => Returns_Courses,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: BODY => If @Param_AsOfDate Is Null Set @Param_AsOfDate = GetDate();  Begin -- Courses 	Declare @Courses table( 		SectionID varchar(20), 		PersonID varchar(10), 		TermCode varchar(10), 		CourseCode varchar(20), 		CourseTitle varchar(100), 		BeginDate date, 		EndDate date) 	Insert Into @Courses 	Select		ss.SectionID, ss.PersonID, s.SectionTermActual, s.CourseName, s.CourseTitle, 				Case 					When o.BeginDate Is Not Null And o.BeginDate < t.StartDate Then t.StartDate  					When o.BeginDate Is Not Null Then o.BeginDate 					When s.SectionStartDate < DateAdd(week, -4, s.SectionEndDate) Then DateAdd(week, -4, s.SectionEndDate) 					Else s.SectionStartDate 				End, 				Case  					When o.EndDate Is Not Null And DateAdd(week, 1, o.EndDate) > t.GradesDueDate Then t.GradesDueDate 					When o.EndDate Is Not Null And DateAdd(week, 1, o.EndDate) > DateAdd(week, 1, t.EndDate) Then DateAdd(week, 1, t.EndDate) 					When o.EndDate Is Not Null Then DateAdd(week, 1, o.EndDate) 					When DateAdd(week, 1, s.SectionEndDate) > t.GradesDueDate Then t.GradesDueDate 					Else DateAdd(week, 1, s.SectionEndDate) 				End 	From		adm.StudentSections ss 				Inner Join adm.Sections s 					On s.SectionID = ss.SectionID 				Inner Join pub.Terms t 					On t.Term = s.SectionTermActual 				Inner Join @Terms tt 					On t.Term = tt.TermCode 				Left Join @Overrides o 					On o.SectionID = ss.SectionID 					And o.CourseCode = s.CourseName 					And o.TermCode = s.SectionTermActual 	Where		ss.PersonID = @PersonID 				And (@CourseCode Is Null Or s.CourseName = @CourseCode) 				And ( 					GetDate() Between t.PreRegStartDate And DateAdd(week, 2, t.EndDate) 					Or s.SectionTermActual = t.Term 				);  	If @PersonID = '0300996' Begin 		Update		@Courses 		Set			BeginDate = '2008-10-15', 					EndDate = '2008-10-26' 		Where		SectionID = '19454' 	End;  	Update		@Courses 	Set			BeginDate = Case Format(BeginDate, 'dddd') 					When 'Friday' Then DateAdd(day, -1, BeginDate) 					When 'Saturday' Then DateAdd(day, 1, BeginDate) 					Else BeginDate 				End, 				EndDate = Case Format(EndDate, 'dddd') 					When 'Friday' Then DateAdd(day, -1, EndDate) 					When 'Saturday' Then DateAdd(day, 1, EndDate) 					Else EndDate 				End;  End;  Insert Into @Returns_Courses Select EvaluationID, TermCode, CourseCode, CourseTitle, PictureLink, PreferredName, Trim(SubString(EvaluationStatus, 1, 6)), SubString(EvaluationStatus, 8, 1000) From ( Select		Char(64 + sf.FacultyOrder) + Cast(sf.SectionFacultyID As varchar(10)) As EvaluationID, 			c.TermCode, /*c.SectionID,*/ c.CourseCode, c.CourseTitle, p.PictureLink, p.PreferredName, Case 				When e.CompletedDate Is Not Null Then 'DONE  :Completed On ' + Format(e.CompletedDate, 'dddd, MMMM d') 				When @Param_AsOfDate < c.BeginDate Then 'OPENS :Opens On ' + Format(c.BeginDate, 'dddd, MMMM d') 				When @Param_AsOfDate < c.EndDate Then 'OPEN  :Open Until ' + Format(c.EndDate, 'dddd, MMMM d') 				Else 'CLOSED:Closed On ' + Format(c.EndDate, 'dddd, MMMM d') 			End EvaluationStatus From		@Courses c 			Inner Join adm.SectionFaculty sf 				On sf.SectionID = c.SectionID 			Inner Join pub.spPerson p 				On p.PersonID = sf.PersonID 			Left Join @Participation e 				On e.SectionID = c.SectionID 				And e.PersonID = c.PersonID 				And e.ProfessorID = sf.PersonID 				And e.TermCode = c.TermCode ) list;  Select * From @Returns_Courses;  If @Param_Debug = 1 Begin 	Select '@Variables' As [TableName], @Lookup As '@Lookup'; 	Select '@Courses' As [TableName], * From @Courses; 	Select '@Participation' As [TableName], * From @Returns_Participation; 	Select '@Overrides' As [TableName], * From @Returns_Overrides; End;,
      Message: BODY => If @Param_AsOfDate Is Null Set @Param_AsOfDate = GetDate();  Begin -- Courses 	Declare @Courses table( 		SectionID varchar(20), 		PersonID varchar(10), 		TermCode varchar(10), 		CourseCode varchar(20), 		CourseTitle varchar(100), 		BeginDate date, 		EndDate date) 	Insert Into @Courses 	Select		ss.SectionID, ss.PersonID, s.SectionTermActual, s.CourseName, s.CourseTitle, 				Case 					When o.BeginDate Is Not Null And o.BeginDate < t.StartDate Then t.StartDate  					When o.BeginDate Is Not Null Then o.BeginDate 					When s.SectionStartDate < DateAdd(week, -4, s.SectionEndDate) Then DateAdd(week, -4, s.SectionEndDate) 					Else s.SectionStartDate 				End, 				Case  					When o.EndDate Is Not Null And DateAdd(week, 1, o.EndDate) > t.GradesDueDate Then t.GradesDueDate 					When o.EndDate Is Not Null And DateAdd(week, 1, o.EndDate) > DateAdd(week, 1, t.EndDate) Then DateAdd(week, 1, t.EndDate) 					When o.EndDate Is Not Null Then DateAdd(week, 1, o.EndDate) 					When DateAdd(week, 1, s.SectionEndDate) > t.GradesDueDate Then t.GradesDueDate 					Else DateAdd(week, 1, s.SectionEndDate) 				End 	From		adm.StudentSections ss 				Inner Join adm.Sections s 					On s.SectionID = ss.SectionID 				Inner Join pub.Terms t 					On t.Term = s.SectionTermActual 				Inner Join @Terms tt 					On t.Term = tt.TermCode 				Left Join @Overrides o 					On o.SectionID = ss.SectionID 					And o.CourseCode = s.CourseName 					And o.TermCode = s.SectionTermActual 	Where		ss.PersonID = @PersonID 				And (@CourseCode Is Null Or s.CourseName = @CourseCode) 				And ( 					GetDate() Between t.PreRegStartDate And DateAdd(week, 2, t.EndDate) 					Or s.SectionTermActual = t.Term 				);  	If @PersonID = '0300996' Begin 		Update		@Courses 		Set			BeginDate = '2008-10-15', 					EndDate = '2008-10-26' 		Where		SectionID = '19454' 	End;  	Update		@Courses 	Set			BeginDate = Case Format(BeginDate, 'dddd') 					When 'Friday' Then DateAdd(day, -1, BeginDate) 					When 'Saturday' Then DateAdd(day, 1, BeginDate) 					Else BeginDate 				End, 				EndDate = Case Format(EndDate, 'dddd') 					When 'Friday' Then DateAdd(day, -1, EndDate) 					When 'Saturday' Then DateAdd(day, 1, EndDate) 					Else EndDate 				End;  End;  Insert Into @Returns_Courses Select EvaluationID, TermCode, CourseCode, CourseTitle, PictureLink, PreferredName, Trim(SubString(EvaluationStatus, 1, 6)), SubString(EvaluationStatus, 8, 1000) From ( Select		Char(64 + sf.FacultyOrder) + Cast(sf.SectionFacultyID As varchar(10)) As EvaluationID, 			c.TermCode, /*c.SectionID,*/ c.CourseCode, c.CourseTitle, p.PictureLink, p.PreferredName, Case 				When e.CompletedDate Is Not Null Then 'DONE  :Completed On ' + Format(e.CompletedDate, 'dddd, MMMM d') 				When @Param_AsOfDate < c.BeginDate Then 'OPENS :Opens On ' + Format(c.BeginDate, 'dddd, MMMM d') 				When @Param_AsOfDate < c.EndDate Then 'OPEN  :Open Until ' + Format(c.EndDate, 'dddd, MMMM d') 				Else 'CLOSED:Closed On ' + Format(c.EndDate, 'dddd, MMMM d') 			End EvaluationStatus From		@Courses c 			Inner Join adm.SectionFaculty sf 				On sf.SectionID = c.SectionID 			Inner Join pub.spPerson p 				On p.PersonID = sf.PersonID 			Left Join @Participation e 				On e.SectionID = c.SectionID 				And e.PersonID = c.PersonID 				And e.ProfessorID = sf.PersonID 				And e.TermCode = c.TermCode ) list;  Select * From @Returns_Courses;  If @Param_Debug = 1 Begin 	Select '@Variables' As [TableName], @Lookup As '@Lookup'; 	Select '@Courses' As [TableName], * From @Courses; 	Select '@Participation' As [TableName], * From @Returns_Participation; 	Select '@Overrides' As [TableName], * From @Returns_Overrides; End;,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: CodeBlock { CodeType = INPUT_ARGUMENT, DatabaseType = Token { Type = TYPE_BOOLEAN, Offset = 22, Value = , Original = @Param_Debug bit }, Name = Debug, DefaultValue = 1, IsObject = False, IsTable = False, IsRequired = False, IsNullable = False, Size = , Properties =  },
      Message: CodeBlock { CodeType = INPUT_ARGUMENT, DatabaseType = Token { Type = TYPE_BOOLEAN, Offset = 22, Value = , Original = @Param_Debug bit }, Name = Debug, DefaultValue = 1, IsObject = False, IsTable = False, IsRequired = False, IsNullable = False, Size = , Properties =  },
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: CodeBlock { CodeType = INPUT_ARGUMENT, DatabaseType = Token { Type = TYPE_STRING, Offset = 51, Value = PersonID, Original = @Param_PersonID varchar(10) }, Name = PersonID, DefaultValue = , IsObject = False, IsTable = False, IsRequired = True, IsNullable = True, Size = 10, Properties =  },
      Message: CodeBlock { CodeType = INPUT_ARGUMENT, DatabaseType = Token { Type = TYPE_STRING, Offset = 51, Value = PersonID, Original = @Param_PersonID varchar(10) }, Name = PersonID, DefaultValue = , IsObject = False, IsTable = False, IsRequired = True, IsNullable = True, Size = 10, Properties =  },
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: CodeBlock { CodeType = INPUT_TABLE, DatabaseType = Token { Type = TYPE_TABLE, Offset = 103, Value = Terms, Original = @Params_Terms table }, Name = Terms, DefaultValue = , IsObject = False, IsTable = True, IsRequired = False, IsNullable = False, Size = , Properties = System.Collections.Generic.List`1[SQuiL.SourceGenerator.Parser.CodeItem] },
      Message: CodeBlock { CodeType = INPUT_TABLE, DatabaseType = Token { Type = TYPE_TABLE, Offset = 103, Value = Terms, Original = @Params_Terms table }, Name = Terms, DefaultValue = , IsObject = False, IsTable = True, IsRequired = False, IsNullable = False, Size = , Properties = System.Collections.Generic.List`1[SQuiL.SourceGenerator.Parser.CodeItem] },
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: CodeBlock { CodeType = OUTPUT_TABLE, DatabaseType = Token { Type = TYPE_TABLE, Offset = 239, Value = Participation, Original = @Returns_Participation table }, Name = Participation, DefaultValue = , IsObject = False, IsTable = True, IsRequired = False, IsNullable = False, Size = , Properties = System.Collections.Generic.List`1[SQuiL.SourceGenerator.Parser.CodeItem] },
      Message: CodeBlock { CodeType = OUTPUT_TABLE, DatabaseType = Token { Type = TYPE_TABLE, Offset = 239, Value = Participation, Original = @Returns_Participation table }, Name = Participation, DefaultValue = , IsObject = False, IsTable = True, IsRequired = False, IsNullable = False, Size = , Properties = System.Collections.Generic.List`1[SQuiL.SourceGenerator.Parser.CodeItem] },
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: CodeBlock { CodeType = OUTPUT_TABLE, DatabaseType = Token { Type = TYPE_TABLE, Offset = 409, Value = Overrides, Original = @Returns_Overrides table }, Name = Overrides, DefaultValue = , IsObject = False, IsTable = True, IsRequired = False, IsNullable = False, Size = , Properties = System.Collections.Generic.List`1[SQuiL.SourceGenerator.Parser.CodeItem] },
      Message: CodeBlock { CodeType = OUTPUT_TABLE, DatabaseType = Token { Type = TYPE_TABLE, Offset = 409, Value = Overrides, Original = @Returns_Overrides table }, Name = Overrides, DefaultValue = , IsObject = False, IsTable = True, IsRequired = False, IsNullable = False, Size = , Properties = System.Collections.Generic.List`1[SQuiL.SourceGenerator.Parser.CodeItem] },
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: CodeBlock { CodeType = USING, DatabaseType = Token { Type = IDENTIFIER, Offset = 570, Value = DataRepository, Original = DataRepository }, Name = DataRepository, DefaultValue = , IsObject = False, IsTable = False, IsRequired = True, IsNullable = True, Size = , Properties =  },
      Message: CodeBlock { CodeType = USING, DatabaseType = Token { Type = IDENTIFIER, Offset = 570, Value = DataRepository, Original = DataRepository }, Name = DataRepository, DefaultValue = , IsObject = False, IsTable = False, IsRequired = True, IsNullable = True, Size = , Properties =  },
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: CodeBlock { CodeType = BODY, DatabaseType = Token { Type = BODY, Offset = 585, Value = --Test;  Insert Into @Returns_Participation(SectionID, PersonID, ProfessorID, TermCode, CompletedDate) Select list.* From ( Select		--pv.ElementId As ElementID, 			Max(Iif(pv.PropertyName = 'ParticipationSectionId', PropertyValue, Null)) as SectionID, 			Max(Iif(pv.PropertyName = 'ParticipationStudentId', PropertyValue, Null)) as PersonID, 			Max(Iif(pv.PropertyName = 'ParticipationTeacherId', PropertyValue, Null)) as ProfessorID, 			Max(Iif(pv.PropertyName = 'ParticipationTerm', PropertyValue, Null)) as TermCode, 			Max(Iif(pv.PropertyName = 'ParticipationCompletedOn', Cast(PropertyValue As datetime), Null)) as CompletedDate From		CourseEvaluation_PropertyValues pv 			Inner Join ( 				Select		ElementId 				From		CourseEvaluation_PropertyValues 				Where		PropertyName = 'Tag' 							And PropertyValue = 'Participation' 			) tags 				On tags.ElementId = pv.ElementId Group By	pv.ElementId ) list Inner Join @Params_Terms t On list.TermCode = t.TermCode Where		PersonID = @PersonID;  Insert Into @Returns_Overrides(SectionID, TermCode, CourseCode, BeginDate, EndDate) Select list.* From ( Select		Max(Iif(pv.PropertyName = 'SectionDateSectionId', PropertyValue, Null)) as SectionID, 			Max(Iif(pv.PropertyName = 'SectionDateTerm', PropertyValue, Null)) as TermCode, 			Max(Iif(pv.PropertyName = 'SectionDateDescription', PropertyValue, Null)) as CourseCode, 			Max(Iif(pv.PropertyName = 'SectionDateEvaluationBeginDate', Cast(PropertyValue As date), Null)) as BeginDate, 			Max(Iif(pv.PropertyName = 'SectionDateEvaluationEndDate', Cast(PropertyValue As date), Null)) as EndDate From		CourseEvaluation_PropertyValues pv 			Inner Join ( 				Select		ElementId 				From		CourseEvaluation_PropertyValues 				Where		PropertyName = 'Tag' 							And PropertyValue = 'SectionDate' 			) tags 				On tags.ElementId = pv.ElementId Group By	pv.ElementId ) list Inner Join @Params_Terms t On list.TermCode = t.TermCode;  Select * From @Returns_Participation; Select * From @Returns_Overrides;  Select * From @Params_Terms;  /*  ParticipationCompletedOn ParticipationSectionId ParticipationStudentId ParticipationTeacherId ParticipationTerm  */ , Original = --Test;  Insert Into @Returns_Participation Select list.* From ( Select		--pv.ElementId As ElementID, 			Max(Iif(pv.PropertyName = 'ParticipationSectionId', PropertyValue, Null)) as SectionID, 			Max(Iif(pv.PropertyName = 'ParticipationStudentId', PropertyValue, Null)) as PersonID, 			Max(Iif(pv.PropertyName = 'ParticipationTeacherId', PropertyValue, Null)) as ProfessorID, 			Max(Iif(pv.PropertyName = 'ParticipationTerm', PropertyValue, Null)) as TermCode, 			Max(Iif(pv.PropertyName = 'ParticipationCompletedOn', Cast(PropertyValue As datetime), Null)) as CompletedDate From		CourseEvaluation_PropertyValues pv 			Inner Join ( 				Select		ElementId 				From		CourseEvaluation_PropertyValues 				Where		PropertyName = 'Tag' 							And PropertyValue = 'Participation' 			) tags 				On tags.ElementId = pv.ElementId Group By	pv.ElementId ) list Inner Join @Params_Terms t On list.TermCode = t.TermCode Where		PersonID = @PersonID;  Insert Into @Returns_Overrides Select list.* From ( Select		Max(Iif(pv.PropertyName = 'SectionDateSectionId', PropertyValue, Null)) as SectionID, 			Max(Iif(pv.PropertyName = 'SectionDateTerm', PropertyValue, Null)) as TermCode, 			Max(Iif(pv.PropertyName = 'SectionDateDescription', PropertyValue, Null)) as CourseCode, 			Max(Iif(pv.PropertyName = 'SectionDateEvaluationBeginDate', Cast(PropertyValue As date), Null)) as BeginDate, 			Max(Iif(pv.PropertyName = 'SectionDateEvaluationEndDate', Cast(PropertyValue As date), Null)) as EndDate From		CourseEvaluation_PropertyValues pv 			Inner Join ( 				Select		ElementId 				From		CourseEvaluation_PropertyValues 				Where		PropertyName = 'Tag' 							And PropertyValue = 'SectionDate' 			) tags 				On tags.ElementId = pv.ElementId Group By	pv.ElementId ) list Inner Join @Params_Terms t On list.TermCode = t.TermCode;  Select * From @Returns_Participation; Select * From @Returns_Overrides;  Select * From @Params_Terms;  /*  ParticipationCompletedOn ParticipationSectionId ParticipationStudentId ParticipationTeacherId ParticipationTerm  */ }, Name = --Test;  Insert Into @Returns_Participation(SectionID, PersonID, ProfessorID, TermCode, CompletedDate) Select list.* From ( Select		--pv.ElementId As ElementID, 			Max(Iif(pv.PropertyName = 'ParticipationSectionId', PropertyValue, Null)) as SectionID, 			Max(Iif(pv.PropertyName = 'ParticipationStudentId', PropertyValue, Null)) as PersonID, 			Max(Iif(pv.PropertyName = 'ParticipationTeacherId', PropertyValue, Null)) as ProfessorID, 			Max(Iif(pv.PropertyName = 'ParticipationTerm', PropertyValue, Null)) as TermCode, 			Max(Iif(pv.PropertyName = 'ParticipationCompletedOn', Cast(PropertyValue As datetime), Null)) as CompletedDate From		CourseEvaluation_PropertyValues pv 			Inner Join ( 				Select		ElementId 				From		CourseEvaluation_PropertyValues 				Where		PropertyName = 'Tag' 							And PropertyValue = 'Participation' 			) tags 				On tags.ElementId = pv.ElementId Group By	pv.ElementId ) list Inner Join @Params_Terms t On list.TermCode = t.TermCode Where		PersonID = @PersonID;  Insert Into @Returns_Overrides(SectionID, TermCode, CourseCode, BeginDate, EndDate) Select list.* From ( Select		Max(Iif(pv.PropertyName = 'SectionDateSectionId', PropertyValue, Null)) as SectionID, 			Max(Iif(pv.PropertyName = 'SectionDateTerm', PropertyValue, Null)) as TermCode, 			Max(Iif(pv.PropertyName = 'SectionDateDescription', PropertyValue, Null)) as CourseCode, 			Max(Iif(pv.PropertyName = 'SectionDateEvaluationBeginDate', Cast(PropertyValue As date), Null)) as BeginDate, 			Max(Iif(pv.PropertyName = 'SectionDateEvaluationEndDate', Cast(PropertyValue As date), Null)) as EndDate From		CourseEvaluation_PropertyValues pv 			Inner Join ( 				Select		ElementId 				From		CourseEvaluation_PropertyValues 				Where		PropertyName = 'Tag' 							And PropertyValue = 'SectionDate' 			) tags 				On tags.ElementId = pv.ElementId Group By	pv.ElementId ) list Inner Join @Params_Terms t On list.TermCode = t.TermCode;  Select * From @Returns_Participation; Select * From @Returns_Overrides;  Select * From @Params_Terms;  /*  ParticipationCompletedOn ParticipationSectionId ParticipationStudentId ParticipationTeacherId ParticipationTerm  */ , DefaultValue = , IsObject = False, IsTable = False, IsRequired = True, IsNullable = True, Size = , Properties =  },
      Message: CodeBlock { CodeType = BODY, DatabaseType = Token { Type = BODY, Offset = 585, Value = --Test;  Insert Into @Returns_Participation(SectionID, PersonID, ProfessorID, TermCode, CompletedDate) Select list.* From ( Select		--pv.ElementId As ElementID, 			Max(Iif(pv.PropertyName = 'ParticipationSectionId', PropertyValue, Null)) as SectionID, 			Max(Iif(pv.PropertyName = 'ParticipationStudentId', PropertyValue, Null)) as PersonID, 			Max(Iif(pv.PropertyName = 'ParticipationTeacherId', PropertyValue, Null)) as ProfessorID, 			Max(Iif(pv.PropertyName = 'ParticipationTerm', PropertyValue, Null)) as TermCode, 			Max(Iif(pv.PropertyName = 'ParticipationCompletedOn', Cast(PropertyValue As datetime), Null)) as CompletedDate From		CourseEvaluation_PropertyValues pv 			Inner Join ( 				Select		ElementId 				From		CourseEvaluation_PropertyValues 				Where		PropertyName = 'Tag' 							And PropertyValue = 'Participation' 			) tags 				On tags.ElementId = pv.ElementId Group By	pv.ElementId ) list Inner Join @Params_Terms t On list.TermCode = t.TermCode Where		PersonID = @PersonID;  Insert Into @Returns_Overrides(SectionID, TermCode, CourseCode, BeginDate, EndDate) Select list.* From ( Select		Max(Iif(pv.PropertyName = 'SectionDateSectionId', PropertyValue, Null)) as SectionID, 			Max(Iif(pv.PropertyName = 'SectionDateTerm', PropertyValue, Null)) as TermCode, 			Max(Iif(pv.PropertyName = 'SectionDateDescription', PropertyValue, Null)) as CourseCode, 			Max(Iif(pv.PropertyName = 'SectionDateEvaluationBeginDate', Cast(PropertyValue As date), Null)) as BeginDate, 			Max(Iif(pv.PropertyName = 'SectionDateEvaluationEndDate', Cast(PropertyValue As date), Null)) as EndDate From		CourseEvaluation_PropertyValues pv 			Inner Join ( 				Select		ElementId 				From		CourseEvaluation_PropertyValues 				Where		PropertyName = 'Tag' 							And PropertyValue = 'SectionDate' 			) tags 				On tags.ElementId = pv.ElementId Group By	pv.ElementId ) list Inner Join @Params_Terms t On list.TermCode = t.TermCode;  Select * From @Returns_Participation; Select * From @Returns_Overrides;  Select * From @Params_Terms;  /*  ParticipationCompletedOn ParticipationSectionId ParticipationStudentId ParticipationTeacherId ParticipationTerm  */ , Original = --Test;  Insert Into @Returns_Participation Select list.* From ( Select		--pv.ElementId As ElementID, 			Max(Iif(pv.PropertyName = 'ParticipationSectionId', PropertyValue, Null)) as SectionID, 			Max(Iif(pv.PropertyName = 'ParticipationStudentId', PropertyValue, Null)) as PersonID, 			Max(Iif(pv.PropertyName = 'ParticipationTeacherId', PropertyValue, Null)) as ProfessorID, 			Max(Iif(pv.PropertyName = 'ParticipationTerm', PropertyValue, Null)) as TermCode, 			Max(Iif(pv.PropertyName = 'ParticipationCompletedOn', Cast(PropertyValue As datetime), Null)) as CompletedDate From		CourseEvaluation_PropertyValues pv 			Inner Join ( 				Select		ElementId 				From		CourseEvaluation_PropertyValues 				Where		PropertyName = 'Tag' 							And PropertyValue = 'Participation' 			) tags 				On tags.ElementId = pv.ElementId Group By	pv.ElementId ) list Inner Join @Params_Terms t On list.TermCode = t.TermCode Where		PersonID = @PersonID;  Insert Into @Returns_Overrides Select list.* From ( Select		Max(Iif(pv.PropertyName = 'SectionDateSectionId', PropertyValue, Null)) as SectionID, 			Max(Iif(pv.PropertyName = 'SectionDateTerm', PropertyValue, Null)) as TermCode, 			Max(Iif(pv.PropertyName = 'SectionDateDescription', PropertyValue, Null)) as CourseCode, 			Max(Iif(pv.PropertyName = 'SectionDateEvaluationBeginDate', Cast(PropertyValue As date), Null)) as BeginDate, 			Max(Iif(pv.PropertyName = 'SectionDateEvaluationEndDate', Cast(PropertyValue As date), Null)) as EndDate From		CourseEvaluation_PropertyValues pv 			Inner Join ( 				Select		ElementId 				From		CourseEvaluation_PropertyValues 				Where		PropertyName = 'Tag' 							And PropertyValue = 'SectionDate' 			) tags 				On tags.ElementId = pv.ElementId Group By	pv.ElementId ) list Inner Join @Params_Terms t On list.TermCode = t.TermCode;  Select * From @Returns_Participation; Select * From @Returns_Overrides;  Select * From @Params_Terms;  /*  ParticipationCompletedOn ParticipationSectionId ParticipationStudentId ParticipationTeacherId ParticipationTerm  */ }, Name = --Test;  Insert Into @Returns_Participation(SectionID, PersonID, ProfessorID, TermCode, CompletedDate) Select list.* From ( Select		--pv.ElementId As ElementID, 			Max(Iif(pv.PropertyName = 'ParticipationSectionId', PropertyValue, Null)) as SectionID, 			Max(Iif(pv.PropertyName = 'ParticipationStudentId', PropertyValue, Null)) as PersonID, 			Max(Iif(pv.PropertyName = 'ParticipationTeacherId', PropertyValue, Null)) as ProfessorID, 			Max(Iif(pv.PropertyName = 'ParticipationTerm', PropertyValue, Null)) as TermCode, 			Max(Iif(pv.PropertyName = 'ParticipationCompletedOn', Cast(PropertyValue As datetime), Null)) as CompletedDate From		CourseEvaluation_PropertyValues pv 			Inner Join ( 				Select		ElementId 				From		CourseEvaluation_PropertyValues 				Where		PropertyName = 'Tag' 							And PropertyValue = 'Participation' 			) tags 				On tags.ElementId = pv.ElementId Group By	pv.ElementId ) list Inner Join @Params_Terms t On list.TermCode = t.TermCode Where		PersonID = @PersonID;  Insert Into @Returns_Overrides(SectionID, TermCode, CourseCode, BeginDate, EndDate) Select list.* From ( Select		Max(Iif(pv.PropertyName = 'SectionDateSectionId', PropertyValue, Null)) as SectionID, 			Max(Iif(pv.PropertyName = 'SectionDateTerm', PropertyValue, Null)) as TermCode, 			Max(Iif(pv.PropertyName = 'SectionDateDescription', PropertyValue, Null)) as CourseCode, 			Max(Iif(pv.PropertyName = 'SectionDateEvaluationBeginDate', Cast(PropertyValue As date), Null)) as BeginDate, 			Max(Iif(pv.PropertyName = 'SectionDateEvaluationEndDate', Cast(PropertyValue As date), Null)) as EndDate From		CourseEvaluation_PropertyValues pv 			Inner Join ( 				Select		ElementId 				From		CourseEvaluation_PropertyValues 				Where		PropertyName = 'Tag' 							And PropertyValue = 'SectionDate' 			) tags 				On tags.ElementId = pv.ElementId Group By	pv.ElementId ) list Inner Join @Params_Terms t On list.TermCode = t.TermCode;  Select * From @Returns_Participation; Select * From @Returns_Overrides;  Select * From @Params_Terms;  /*  ParticipationCompletedOn ParticipationSectionId ParticipationStudentId ParticipationTeacherId ParticipationTerm  */ , DefaultValue = , IsObject = False, IsTable = False, IsRequired = True, IsNullable = True, Size = , Properties =  },
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: KEYWORD_DECLARE => ,
      Message: KEYWORD_DECLARE => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: VARIABLE => Param_Debug,
      Message: VARIABLE => Param_Debug,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_BOOLEAN => ,
      Message: TYPE_BOOLEAN => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_EQUAL => ,
      Message: SYMBOL_EQUAL => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: LITERAL_NUMBER => 1,
      Message: LITERAL_NUMBER => 1,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: VARIABLE => Param_PersonID,
      Message: VARIABLE => Param_PersonID,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_STRING => 10,
      Message: TYPE_STRING => 10,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: KEYWORD_SET => ,
      Message: KEYWORD_SET => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: VARIABLE => Param_PersonID,
      Message: VARIABLE => Param_PersonID,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_EQUAL => ,
      Message: SYMBOL_EQUAL => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: LITERAL_STRING => 0300996,
      Message: LITERAL_STRING => 0300996,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: KEYWORD_DECLARE => ,
      Message: KEYWORD_DECLARE => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: VARIABLE => Params_Terms,
      Message: VARIABLE => Params_Terms,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_TABLE => ,
      Message: TYPE_TABLE => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_LPREN => ,
      Message: SYMBOL_LPREN => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => TermCode,
      Message: IDENTIFIER => TermCode,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_STRING => 10,
      Message: TYPE_STRING => 10,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_RPREN => ,
      Message: SYMBOL_RPREN => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: KEYWORD_INSERT => ,
      Message: KEYWORD_INSERT => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: KEYWORD_INTO => ,
      Message: KEYWORD_INTO => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: VARIABLE => Params_Terms,
      Message: VARIABLE => Params_Terms,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => Select,
      Message: IDENTIFIER => Select,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: LITERAL_STRING => F08,
      Message: LITERAL_STRING => F08,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: KEYWORD_INSERT => ,
      Message: KEYWORD_INSERT => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: KEYWORD_INTO => ,
      Message: KEYWORD_INTO => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: VARIABLE => Params_Terms,
      Message: VARIABLE => Params_Terms,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => Select,
      Message: IDENTIFIER => Select,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: LITERAL_STRING => F06,
      Message: LITERAL_STRING => F06,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: KEYWORD_DECLARE => ,
      Message: KEYWORD_DECLARE => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: VARIABLE => Returns_Participation,
      Message: VARIABLE => Returns_Participation,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_TABLE => ,
      Message: TYPE_TABLE => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_LPREN => ,
      Message: SYMBOL_LPREN => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => SectionID,
      Message: IDENTIFIER => SectionID,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_STRING => 20,
      Message: TYPE_STRING => 20,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => PersonID,
      Message: IDENTIFIER => PersonID,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_STRING => 10,
      Message: TYPE_STRING => 10,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => ProfessorID,
      Message: IDENTIFIER => ProfessorID,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_STRING => 10,
      Message: TYPE_STRING => 10,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => TermCode,
      Message: IDENTIFIER => TermCode,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_STRING => 10,
      Message: TYPE_STRING => 10,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => CompletedDate,
      Message: IDENTIFIER => CompletedDate,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_DATETIME => ,
      Message: TYPE_DATETIME => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_RPREN => ,
      Message: SYMBOL_RPREN => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: KEYWORD_DECLARE => ,
      Message: KEYWORD_DECLARE => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: VARIABLE => Returns_Overrides,
      Message: VARIABLE => Returns_Overrides,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_TABLE => ,
      Message: TYPE_TABLE => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_LPREN => ,
      Message: SYMBOL_LPREN => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => SectionID,
      Message: IDENTIFIER => SectionID,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_STRING => 20,
      Message: TYPE_STRING => 20,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => TermCode,
      Message: IDENTIFIER => TermCode,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_STRING => 10,
      Message: TYPE_STRING => 10,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => CourseCode,
      Message: IDENTIFIER => CourseCode,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_STRING => 20,
      Message: TYPE_STRING => 20,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => BeginDate,
      Message: IDENTIFIER => BeginDate,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_DATETIME => ,
      Message: TYPE_DATETIME => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => EndDate,
      Message: IDENTIFIER => EndDate,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_DATETIME => ,
      Message: TYPE_DATETIME => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_RPREN => ,
      Message: SYMBOL_RPREN => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: KEYWORD_USE => ,
      Message: KEYWORD_USE => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => DataRepository,
      Message: IDENTIFIER => DataRepository,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: INSERT_INTO_TABLE => Returns_Participation,
      Message: INSERT_INTO_TABLE => Returns_Participation,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: INSERT_INTO_TABLE => Returns_Overrides,
      Message: INSERT_INTO_TABLE => Returns_Overrides,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: BODY => --Test;  Insert Into @Returns_Participation Select list.* From ( Select		--pv.ElementId As ElementID, 			Max(Iif(pv.PropertyName = 'ParticipationSectionId', PropertyValue, Null)) as SectionID, 			Max(Iif(pv.PropertyName = 'ParticipationStudentId', PropertyValue, Null)) as PersonID, 			Max(Iif(pv.PropertyName = 'ParticipationTeacherId', PropertyValue, Null)) as ProfessorID, 			Max(Iif(pv.PropertyName = 'ParticipationTerm', PropertyValue, Null)) as TermCode, 			Max(Iif(pv.PropertyName = 'ParticipationCompletedOn', Cast(PropertyValue As datetime), Null)) as CompletedDate From		CourseEvaluation_PropertyValues pv 			Inner Join ( 				Select		ElementId 				From		CourseEvaluation_PropertyValues 				Where		PropertyName = 'Tag' 							And PropertyValue = 'Participation' 			) tags 				On tags.ElementId = pv.ElementId Group By	pv.ElementId ) list Inner Join @Params_Terms t On list.TermCode = t.TermCode Where		PersonID = @PersonID;  Insert Into @Returns_Overrides Select list.* From ( Select		Max(Iif(pv.PropertyName = 'SectionDateSectionId', PropertyValue, Null)) as SectionID, 			Max(Iif(pv.PropertyName = 'SectionDateTerm', PropertyValue, Null)) as TermCode, 			Max(Iif(pv.PropertyName = 'SectionDateDescription', PropertyValue, Null)) as CourseCode, 			Max(Iif(pv.PropertyName = 'SectionDateEvaluationBeginDate', Cast(PropertyValue As date), Null)) as BeginDate, 			Max(Iif(pv.PropertyName = 'SectionDateEvaluationEndDate', Cast(PropertyValue As date), Null)) as EndDate From		CourseEvaluation_PropertyValues pv 			Inner Join ( 				Select		ElementId 				From		CourseEvaluation_PropertyValues 				Where		PropertyName = 'Tag' 							And PropertyValue = 'SectionDate' 			) tags 				On tags.ElementId = pv.ElementId Group By	pv.ElementId ) list Inner Join @Params_Terms t On list.TermCode = t.TermCode;  Select * From @Returns_Participation; Select * From @Returns_Overrides;  Select * From @Params_Terms;  /*  ParticipationCompletedOn ParticipationSectionId ParticipationStudentId ParticipationTeacherId ParticipationTerm  */,
      Message: BODY => --Test;  Insert Into @Returns_Participation Select list.* From ( Select		--pv.ElementId As ElementID, 			Max(Iif(pv.PropertyName = 'ParticipationSectionId', PropertyValue, Null)) as SectionID, 			Max(Iif(pv.PropertyName = 'ParticipationStudentId', PropertyValue, Null)) as PersonID, 			Max(Iif(pv.PropertyName = 'ParticipationTeacherId', PropertyValue, Null)) as ProfessorID, 			Max(Iif(pv.PropertyName = 'ParticipationTerm', PropertyValue, Null)) as TermCode, 			Max(Iif(pv.PropertyName = 'ParticipationCompletedOn', Cast(PropertyValue As datetime), Null)) as CompletedDate From		CourseEvaluation_PropertyValues pv 			Inner Join ( 				Select		ElementId 				From		CourseEvaluation_PropertyValues 				Where		PropertyName = 'Tag' 							And PropertyValue = 'Participation' 			) tags 				On tags.ElementId = pv.ElementId Group By	pv.ElementId ) list Inner Join @Params_Terms t On list.TermCode = t.TermCode Where		PersonID = @PersonID;  Insert Into @Returns_Overrides Select list.* From ( Select		Max(Iif(pv.PropertyName = 'SectionDateSectionId', PropertyValue, Null)) as SectionID, 			Max(Iif(pv.PropertyName = 'SectionDateTerm', PropertyValue, Null)) as TermCode, 			Max(Iif(pv.PropertyName = 'SectionDateDescription', PropertyValue, Null)) as CourseCode, 			Max(Iif(pv.PropertyName = 'SectionDateEvaluationBeginDate', Cast(PropertyValue As date), Null)) as BeginDate, 			Max(Iif(pv.PropertyName = 'SectionDateEvaluationEndDate', Cast(PropertyValue As date), Null)) as EndDate From		CourseEvaluation_PropertyValues pv 			Inner Join ( 				Select		ElementId 				From		CourseEvaluation_PropertyValues 				Where		PropertyName = 'Tag' 							And PropertyValue = 'SectionDate' 			) tags 				On tags.ElementId = pv.ElementId Group By	pv.ElementId ) list Inner Join @Params_Terms t On list.TermCode = t.TermCode;  Select * From @Returns_Participation; Select * From @Returns_Overrides;  Select * From @Params_Terms;  /*  ParticipationCompletedOn ParticipationSectionId ParticipationStudentId ParticipationTeacherId ParticipationTerm  */,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: CodeBlock { CodeType = INPUT_ARGUMENT, DatabaseType = Token { Type = TYPE_BOOLEAN, Offset = 21, Value = , Original = @Param_Debug bit }, Name = Debug, DefaultValue = 1, IsObject = False, IsTable = False, IsRequired = False, IsNullable = False, Size = , Properties =  },
      Message: CodeBlock { CodeType = INPUT_ARGUMENT, DatabaseType = Token { Type = TYPE_BOOLEAN, Offset = 21, Value = , Original = @Param_Debug bit }, Name = Debug, DefaultValue = 1, IsObject = False, IsTable = False, IsRequired = False, IsNullable = False, Size = , Properties =  },
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: CodeBlock { CodeType = INPUT_ARGUMENT, DatabaseType = Token { Type = TYPE_STRING, Offset = 50, Value = SectionID, Original = @Param_SectionID varchar(20) }, Name = SectionID, DefaultValue = , IsObject = False, IsTable = False, IsRequired = True, IsNullable = True, Size = 20, Properties =  },
      Message: CodeBlock { CodeType = INPUT_ARGUMENT, DatabaseType = Token { Type = TYPE_STRING, Offset = 50, Value = SectionID, Original = @Param_SectionID varchar(20) }, Name = SectionID, DefaultValue = , IsObject = False, IsTable = False, IsRequired = True, IsNullable = True, Size = 20, Properties =  },
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: CodeBlock { CodeType = OUTPUT_TABLE, DatabaseType = Token { Type = TYPE_TABLE, Offset = 255, Value = Sections, Original = @Returns_Sections table }, Name = Sections, DefaultValue = , IsObject = False, IsTable = True, IsRequired = False, IsNullable = False, Size = , Properties = System.Collections.Generic.List`1[SQuiL.SourceGenerator.Parser.CodeItem] },
      Message: CodeBlock { CodeType = OUTPUT_TABLE, DatabaseType = Token { Type = TYPE_TABLE, Offset = 255, Value = Sections, Original = @Returns_Sections table }, Name = Sections, DefaultValue = , IsObject = False, IsTable = True, IsRequired = False, IsNullable = False, Size = , Properties = System.Collections.Generic.List`1[SQuiL.SourceGenerator.Parser.CodeItem] },
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: CodeBlock { CodeType = USING, DatabaseType = Token { Type = IDENTIFIER, Offset = 575, Value = BIWarehouse, Original = BIWarehouse }, Name = BIWarehouse, DefaultValue = , IsObject = False, IsTable = False, IsRequired = True, IsNullable = True, Size = , Properties =  },
      Message: CodeBlock { CodeType = USING, DatabaseType = Token { Type = IDENTIFIER, Offset = 575, Value = BIWarehouse, Original = BIWarehouse }, Name = BIWarehouse, DefaultValue = , IsObject = False, IsTable = False, IsRequired = True, IsNullable = True, Size = , Properties =  },
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: CodeBlock { CodeType = BODY, DatabaseType = Token { Type = BODY, Offset = 591, Value = Insert Into @Returns_Sections(SectionID, Department, CourseCode, CourseTitle, IsOnline, IsGraduateCourse, IsAdultDegreeCourse, IsNursingCourse, IsConnectionsCourse, IsPrivateMusicLessons, IsServiceLearning) Select		SectionID, DeptName, CourseName, CourseTitle, Iif(Upper(MeetingRm) = 'ONLINE', 1, 0), Iif(CourseLevel = 'GR', 1, 0), IsADC, 			Iif(CourseName Like 'NURG-%' Or CourseName Like 'NRNT-125-%', 1, 0), 			Iif(CourseName Like 'NOND-101-%' Or CourseName Like 'ENGR-121-%', 1, 0), 			Iif(CourseName Like 'MUPF-334-%', 1, 0), Case 				When GenEd In ('SERV1','SERV2','SERV3') Then 1 				When GenEd2 In ('SERV1','SERV2','SERV3') Then 1 				When GenEd3 In ('SERV1','SERV2','SERV3') Then 1 				When GenEd4 In ('SERV1','SERV2','SERV3') Then 1 				When GenEd5 In ('SERV1','SERV2','SERV3') Then 1 				Else 0 			End From		adm.Sections s Where		s.SectionID = @Param_SectionID;  Select * From @Returns_Sections; , Original = Insert Into @Returns_Sections Select		SectionID, DeptName, CourseName, CourseTitle, Iif(Upper(MeetingRm) = 'ONLINE', 1, 0), Iif(CourseLevel = 'GR', 1, 0), IsADC, 			Iif(CourseName Like 'NURG-%' Or CourseName Like 'NRNT-125-%', 1, 0), 			Iif(CourseName Like 'NOND-101-%' Or CourseName Like 'ENGR-121-%', 1, 0), 			Iif(CourseName Like 'MUPF-334-%', 1, 0), Case 				When GenEd In ('SERV1','SERV2','SERV3') Then 1 				When GenEd2 In ('SERV1','SERV2','SERV3') Then 1 				When GenEd3 In ('SERV1','SERV2','SERV3') Then 1 				When GenEd4 In ('SERV1','SERV2','SERV3') Then 1 				When GenEd5 In ('SERV1','SERV2','SERV3') Then 1 				Else 0 			End From		adm.Sections s Where		s.SectionID = @Param_SectionID;  Select * From @Returns_Sections; }, Name = Insert Into @Returns_Sections(SectionID, Department, CourseCode, CourseTitle, IsOnline, IsGraduateCourse, IsAdultDegreeCourse, IsNursingCourse, IsConnectionsCourse, IsPrivateMusicLessons, IsServiceLearning) Select		SectionID, DeptName, CourseName, CourseTitle, Iif(Upper(MeetingRm) = 'ONLINE', 1, 0), Iif(CourseLevel = 'GR', 1, 0), IsADC, 			Iif(CourseName Like 'NURG-%' Or CourseName Like 'NRNT-125-%', 1, 0), 			Iif(CourseName Like 'NOND-101-%' Or CourseName Like 'ENGR-121-%', 1, 0), 			Iif(CourseName Like 'MUPF-334-%', 1, 0), Case 				When GenEd In ('SERV1','SERV2','SERV3') Then 1 				When GenEd2 In ('SERV1','SERV2','SERV3') Then 1 				When GenEd3 In ('SERV1','SERV2','SERV3') Then 1 				When GenEd4 In ('SERV1','SERV2','SERV3') Then 1 				When GenEd5 In ('SERV1','SERV2','SERV3') Then 1 				Else 0 			End From		adm.Sections s Where		s.SectionID = @Param_SectionID;  Select * From @Returns_Sections; , DefaultValue = , IsObject = False, IsTable = False, IsRequired = True, IsNullable = True, Size = , Properties =  },
      Message: CodeBlock { CodeType = BODY, DatabaseType = Token { Type = BODY, Offset = 591, Value = Insert Into @Returns_Sections(SectionID, Department, CourseCode, CourseTitle, IsOnline, IsGraduateCourse, IsAdultDegreeCourse, IsNursingCourse, IsConnectionsCourse, IsPrivateMusicLessons, IsServiceLearning) Select		SectionID, DeptName, CourseName, CourseTitle, Iif(Upper(MeetingRm) = 'ONLINE', 1, 0), Iif(CourseLevel = 'GR', 1, 0), IsADC, 			Iif(CourseName Like 'NURG-%' Or CourseName Like 'NRNT-125-%', 1, 0), 			Iif(CourseName Like 'NOND-101-%' Or CourseName Like 'ENGR-121-%', 1, 0), 			Iif(CourseName Like 'MUPF-334-%', 1, 0), Case 				When GenEd In ('SERV1','SERV2','SERV3') Then 1 				When GenEd2 In ('SERV1','SERV2','SERV3') Then 1 				When GenEd3 In ('SERV1','SERV2','SERV3') Then 1 				When GenEd4 In ('SERV1','SERV2','SERV3') Then 1 				When GenEd5 In ('SERV1','SERV2','SERV3') Then 1 				Else 0 			End From		adm.Sections s Where		s.SectionID = @Param_SectionID;  Select * From @Returns_Sections; , Original = Insert Into @Returns_Sections Select		SectionID, DeptName, CourseName, CourseTitle, Iif(Upper(MeetingRm) = 'ONLINE', 1, 0), Iif(CourseLevel = 'GR', 1, 0), IsADC, 			Iif(CourseName Like 'NURG-%' Or CourseName Like 'NRNT-125-%', 1, 0), 			Iif(CourseName Like 'NOND-101-%' Or CourseName Like 'ENGR-121-%', 1, 0), 			Iif(CourseName Like 'MUPF-334-%', 1, 0), Case 				When GenEd In ('SERV1','SERV2','SERV3') Then 1 				When GenEd2 In ('SERV1','SERV2','SERV3') Then 1 				When GenEd3 In ('SERV1','SERV2','SERV3') Then 1 				When GenEd4 In ('SERV1','SERV2','SERV3') Then 1 				When GenEd5 In ('SERV1','SERV2','SERV3') Then 1 				Else 0 			End From		adm.Sections s Where		s.SectionID = @Param_SectionID;  Select * From @Returns_Sections; }, Name = Insert Into @Returns_Sections(SectionID, Department, CourseCode, CourseTitle, IsOnline, IsGraduateCourse, IsAdultDegreeCourse, IsNursingCourse, IsConnectionsCourse, IsPrivateMusicLessons, IsServiceLearning) Select		SectionID, DeptName, CourseName, CourseTitle, Iif(Upper(MeetingRm) = 'ONLINE', 1, 0), Iif(CourseLevel = 'GR', 1, 0), IsADC, 			Iif(CourseName Like 'NURG-%' Or CourseName Like 'NRNT-125-%', 1, 0), 			Iif(CourseName Like 'NOND-101-%' Or CourseName Like 'ENGR-121-%', 1, 0), 			Iif(CourseName Like 'MUPF-334-%', 1, 0), Case 				When GenEd In ('SERV1','SERV2','SERV3') Then 1 				When GenEd2 In ('SERV1','SERV2','SERV3') Then 1 				When GenEd3 In ('SERV1','SERV2','SERV3') Then 1 				When GenEd4 In ('SERV1','SERV2','SERV3') Then 1 				When GenEd5 In ('SERV1','SERV2','SERV3') Then 1 				Else 0 			End From		adm.Sections s Where		s.SectionID = @Param_SectionID;  Select * From @Returns_Sections; , DefaultValue = , IsObject = False, IsTable = False, IsRequired = True, IsNullable = True, Size = , Properties =  },
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: KEYWORD_DECLARE => ,
      Message: KEYWORD_DECLARE => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: VARIABLE => Param_Debug,
      Message: VARIABLE => Param_Debug,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_BOOLEAN => ,
      Message: TYPE_BOOLEAN => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_EQUAL => ,
      Message: SYMBOL_EQUAL => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: LITERAL_NUMBER => 1,
      Message: LITERAL_NUMBER => 1,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: VARIABLE => Param_SectionID,
      Message: VARIABLE => Param_SectionID,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_STRING => 20,
      Message: TYPE_STRING => 20,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: KEYWORD_SET => ,
      Message: KEYWORD_SET => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: VARIABLE => SectionID,
      Message: VARIABLE => SectionID,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_EQUAL => ,
      Message: SYMBOL_EQUAL => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: LITERAL_STRING => 3543,
      Message: LITERAL_STRING => 3543,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat:
COMMENT_SINGLELINE => -- Chemistry Course with Section Questions W02
,
      Message:
COMMENT_SINGLELINE => -- Chemistry Course with Section Questions W02
,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: KEYWORD_SET => ,
      Message: KEYWORD_SET => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: VARIABLE => SectionID,
      Message: VARIABLE => SectionID,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_EQUAL => ,
      Message: SYMBOL_EQUAL => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: LITERAL_STRING => 12748,
      Message: LITERAL_STRING => 12748,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat:
COMMENT_SINGLELINE => -- Engineering 121 Connections F05
,
      Message:
COMMENT_SINGLELINE => -- Engineering 121 Connections F05
,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: KEYWORD_SET => ,
      Message: KEYWORD_SET => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: VARIABLE => SectionID,
      Message: VARIABLE => SectionID,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_EQUAL => ,
      Message: SYMBOL_EQUAL => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: LITERAL_STRING => 10675,
      Message: LITERAL_STRING => 10675,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat:
COMMENT_SINGLELINE => -- Music Lessons 334 F05
,
      Message:
COMMENT_SINGLELINE => -- Music Lessons 334 F05
,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: KEYWORD_DECLARE => ,
      Message: KEYWORD_DECLARE => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: VARIABLE => Returns_Sections,
      Message: VARIABLE => Returns_Sections,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_TABLE => ,
      Message: TYPE_TABLE => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_LPREN => ,
      Message: SYMBOL_LPREN => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => SectionID,
      Message: IDENTIFIER => SectionID,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_STRING => 20,
      Message: TYPE_STRING => 20,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => Department,
      Message: IDENTIFIER => Department,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_STRING => 100,
      Message: TYPE_STRING => 100,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => CourseCode,
      Message: IDENTIFIER => CourseCode,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_STRING => 20,
      Message: TYPE_STRING => 20,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => CourseTitle,
      Message: IDENTIFIER => CourseTitle,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_STRING => 150,
      Message: TYPE_STRING => 150,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => IsOnline,
      Message: IDENTIFIER => IsOnline,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_BOOLEAN => ,
      Message: TYPE_BOOLEAN => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => IsGraduateCourse,
      Message: IDENTIFIER => IsGraduateCourse,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_BOOLEAN => ,
      Message: TYPE_BOOLEAN => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => IsAdultDegreeCourse,
      Message: IDENTIFIER => IsAdultDegreeCourse,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_BOOLEAN => ,
      Message: TYPE_BOOLEAN => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => IsNursingCourse,
      Message: IDENTIFIER => IsNursingCourse,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_BOOLEAN => ,
      Message: TYPE_BOOLEAN => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => IsConnectionsCourse,
      Message: IDENTIFIER => IsConnectionsCourse,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_BOOLEAN => ,
      Message: TYPE_BOOLEAN => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => IsPrivateMusicLessons,
      Message: IDENTIFIER => IsPrivateMusicLessons,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_BOOLEAN => ,
      Message: TYPE_BOOLEAN => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => IsServiceLearning,
      Message: IDENTIFIER => IsServiceLearning,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_BOOLEAN => ,
      Message: TYPE_BOOLEAN => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_RPREN => ,
      Message: SYMBOL_RPREN => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: KEYWORD_USE => ,
      Message: KEYWORD_USE => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => BIWarehouse,
      Message: IDENTIFIER => BIWarehouse,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: INSERT_INTO_TABLE => Returns_Sections,
      Message: INSERT_INTO_TABLE => Returns_Sections,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: BODY => Insert Into @Returns_Sections Select		SectionID, DeptName, CourseName, CourseTitle, Iif(Upper(MeetingRm) = 'ONLINE', 1, 0), Iif(CourseLevel = 'GR', 1, 0), IsADC, 			Iif(CourseName Like 'NURG-%' Or CourseName Like 'NRNT-125-%', 1, 0), 			Iif(CourseName Like 'NOND-101-%' Or CourseName Like 'ENGR-121-%', 1, 0), 			Iif(CourseName Like 'MUPF-334-%', 1, 0), Case 				When GenEd In ('SERV1','SERV2','SERV3') Then 1 				When GenEd2 In ('SERV1','SERV2','SERV3') Then 1 				When GenEd3 In ('SERV1','SERV2','SERV3') Then 1 				When GenEd4 In ('SERV1','SERV2','SERV3') Then 1 				When GenEd5 In ('SERV1','SERV2','SERV3') Then 1 				Else 0 			End From		adm.Sections s Where		s.SectionID = @Param_SectionID;  Select * From @Returns_Sections;,
      Message: BODY => Insert Into @Returns_Sections Select		SectionID, DeptName, CourseName, CourseTitle, Iif(Upper(MeetingRm) = 'ONLINE', 1, 0), Iif(CourseLevel = 'GR', 1, 0), IsADC, 			Iif(CourseName Like 'NURG-%' Or CourseName Like 'NRNT-125-%', 1, 0), 			Iif(CourseName Like 'NOND-101-%' Or CourseName Like 'ENGR-121-%', 1, 0), 			Iif(CourseName Like 'MUPF-334-%', 1, 0), Case 				When GenEd In ('SERV1','SERV2','SERV3') Then 1 				When GenEd2 In ('SERV1','SERV2','SERV3') Then 1 				When GenEd3 In ('SERV1','SERV2','SERV3') Then 1 				When GenEd4 In ('SERV1','SERV2','SERV3') Then 1 				When GenEd5 In ('SERV1','SERV2','SERV3') Then 1 				Else 0 			End From		adm.Sections s Where		s.SectionID = @Param_SectionID;  Select * From @Returns_Sections;,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: CodeBlock { CodeType = INPUT_ARGUMENT, DatabaseType = Token { Type = TYPE_BOOLEAN, Offset = 21, Value = , Original = @Param_Debug bit }, Name = Debug, DefaultValue = 1, IsObject = False, IsTable = False, IsRequired = False, IsNullable = False, Size = , Properties =  },
      Message: CodeBlock { CodeType = INPUT_ARGUMENT, DatabaseType = Token { Type = TYPE_BOOLEAN, Offset = 21, Value = , Original = @Param_Debug bit }, Name = Debug, DefaultValue = 1, IsObject = False, IsTable = False, IsRequired = False, IsNullable = False, Size = , Properties =  },
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: CodeBlock { CodeType = INPUT_OBJECT, DatabaseType = Token { Type = TYPE_OBJECT, Offset = 33, Value = Section, Original = @Param_Section table }, Name = Section, DefaultValue = , IsObject = True, IsTable = False, IsRequired = False, IsNullable = True, Size = , Properties = System.Collections.Generic.List`1[SQuiL.SourceGenerator.Parser.CodeItem] },
      Message: CodeBlock { CodeType = INPUT_OBJECT, DatabaseType = Token { Type = TYPE_OBJECT, Offset = 33, Value = Section, Original = @Param_Section table }, Name = Section, DefaultValue = , IsObject = True, IsTable = False, IsRequired = False, IsNullable = True, Size = , Properties = System.Collections.Generic.List`1[SQuiL.SourceGenerator.Parser.CodeItem] },
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: CodeBlock { CodeType = OUTPUT_TABLE, DatabaseType = Token { Type = TYPE_TABLE, Offset = 346, Value = Questions, Original = @Returns_Questions table }, Name = Questions, DefaultValue = , IsObject = False, IsTable = True, IsRequired = False, IsNullable = False, Size = , Properties = System.Collections.Generic.List`1[SQuiL.SourceGenerator.Parser.CodeItem] },
      Message: CodeBlock { CodeType = OUTPUT_TABLE, DatabaseType = Token { Type = TYPE_TABLE, Offset = 346, Value = Questions, Original = @Returns_Questions table }, Name = Questions, DefaultValue = , IsObject = False, IsTable = True, IsRequired = False, IsNullable = False, Size = , Properties = System.Collections.Generic.List`1[SQuiL.SourceGenerator.Parser.CodeItem] },
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: CodeBlock { CodeType = USING, DatabaseType = Token { Type = IDENTIFIER, Offset = 488, Value = DataRepository, Original = DataRepository }, Name = DataRepository, DefaultValue = , IsObject = False, IsTable = False, IsRequired = True, IsNullable = True, Size = , Properties =  },
      Message: CodeBlock { CodeType = USING, DatabaseType = Token { Type = IDENTIFIER, Offset = 488, Value = DataRepository, Original = DataRepository }, Name = DataRepository, DefaultValue = , IsObject = False, IsTable = False, IsRequired = True, IsNullable = True, Size = , Properties =  },
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: CodeBlock { CodeType = BODY, DatabaseType = Token { Type = BODY, Offset = 507, Value = Insert Into @Returns_Questions(SectionID, Category, Type, Question) Select		s.SectionID, 			Case ShowWhen 				When 'global' Then 'Global Questions' 				When 'online' Then 'Online Questions' 				When 'graduate' Then 'Graduate Questions' 				When 'department' Then s.Department + ' Questions' 				When 'section' Then s.CourseTitle + ' Questions (' + s.CourseCode + ')' 				When 'service_learning' Then 'Service Learning Questions' 				When 'nursing' Then 'Nursing Questions' 				When 'connections' Then 'Southern Connections Questions' 				When 'private_music_instruction' Then 'Private Music Leason Questions' 				Else Null 			End, 			Upper(QuestionType) As QuestionType, 			QuestionText From ( Select		--pv.ElementId As ElementID, 			Cast(Max(Iif(pv.PropertyName = 'QuestionEnabled', Iif(PropertyValue = 'True', 1, 0), 0)) As bit) As IsEnabled, 			Cast(Max(Iif(pv.PropertyName = 'QuestionOrder', PropertyValue, Null)) As int) As SortOrder, 			--Max(Iif(pv.PropertyName = 'QuestionSectionId', PropertyValue, Null)) As SectionID, 			Max(Iif(pv.PropertyName = 'QuestionShowCondition', PropertyValue, Null)) As Condition, 			Max(Iif(pv.PropertyName = 'QuestionShowWhen', Iif(PropertyValue = 'division', 'department', PropertyValue), Null)) As ShowWhen, 			Max(Iif(pv.PropertyName = 'QuestionText', PropertyValue, Null)) As QuestionText, 			Max(Iif(pv.PropertyName = 'QuestionType', Case PropertyValue 				When 'likert' Then PropertyValue 				When 'shortanswer' Then PropertyValue 				Else Null 			End, Null)) As QuestionType 			--Max(Iif(pv.PropertyName = 'TermCode', SubString(PropertyValue, 1, 3), Null)) As TermCode From		CourseEvaluation_PropertyValues pv 			Inner Join ( 				Select		ElementId 				From		CourseEvaluation_PropertyValues 				Where		PropertyName = 'Tag' 							And PropertyValue = 'EvaluationQuestion' 			) tags 				On tags.ElementId = pv.ElementId Group By	pv.ElementId ) list Cross Join @Sections s Where		IsEnabled = 1 And Case ShowWhen 				When 'global' Then 1 				When 'online' Then IsOnline 				When 'graduate' Then IsGraduateCourse 				When 'department' Then Iif(Department = Condition, 1, 0) 				When 'section' Then Iif(list.Condition = s.SectionID, 1, 0) 				When 'service_learning' Then IsServiceLearning 				When 'nursing' Then IsNursingCourse 				When 'connections' Then IsConnectionsCourse 				When 'private_music_instruction' Then IsPrivateMusicLessons 				Else 0 			End = 1 Order By	list.QuestionType, Case ShowWhen 				When 'global' Then 1 				When 'online' Then 2 				When 'graduate' Then 3 				When 'department' Then 4 				When 'section' Then 5 				When 'service_learning' Then 6 				When 'nursing' Then 7 				When 'connections' Then 8 				When 'private_music_instruction' Then 9 				Else 99 			End, SortOrder  Select * From @Returns_Questions;  /*   global; online=MATCH(section.MeetingRm,ONLINE); graduate=MATCH(section.IsGraduateCourse,True); department=section.DeptName; section=sectionId; service_learning=MATCH(section.GenEd,SERV1,SERV2,SERV3); nursing=MATCH_BEGIN(section.CourseName,NRSG,NRNT-125); connections=MATCH_BEGIN(section.CourseName,NOND-101,ENGR-121); private_music_instruction=MATCH_BEGIN(section.CourseName,MUPF-334)    QuestionEnabled QuestionOrder QuestionSectionId QuestionShowCondition QuestionShowWhen QuestionText QuestionType Tag TermCode  */ , Original = Insert Into @Returns_Questions Select		s.SectionID, 			Case ShowWhen 				When 'global' Then 'Global Questions' 				When 'online' Then 'Online Questions' 				When 'graduate' Then 'Graduate Questions' 				When 'department' Then s.Department + ' Questions' 				When 'section' Then s.CourseTitle + ' Questions (' + s.CourseCode + ')' 				When 'service_learning' Then 'Service Learning Questions' 				When 'nursing' Then 'Nursing Questions' 				When 'connections' Then 'Southern Connections Questions' 				When 'private_music_instruction' Then 'Private Music Leason Questions' 				Else Null 			End, 			Upper(QuestionType) As QuestionType, 			QuestionText From ( Select		--pv.ElementId As ElementID, 			Cast(Max(Iif(pv.PropertyName = 'QuestionEnabled', Iif(PropertyValue = 'True', 1, 0), 0)) As bit) As IsEnabled, 			Cast(Max(Iif(pv.PropertyName = 'QuestionOrder', PropertyValue, Null)) As int) As SortOrder, 			--Max(Iif(pv.PropertyName = 'QuestionSectionId', PropertyValue, Null)) As SectionID, 			Max(Iif(pv.PropertyName = 'QuestionShowCondition', PropertyValue, Null)) As Condition, 			Max(Iif(pv.PropertyName = 'QuestionShowWhen', Iif(PropertyValue = 'division', 'department', PropertyValue), Null)) As ShowWhen, 			Max(Iif(pv.PropertyName = 'QuestionText', PropertyValue, Null)) As QuestionText, 			Max(Iif(pv.PropertyName = 'QuestionType', Case PropertyValue 				When 'likert' Then PropertyValue 				When 'shortanswer' Then PropertyValue 				Else Null 			End, Null)) As QuestionType 			--Max(Iif(pv.PropertyName = 'TermCode', SubString(PropertyValue, 1, 3), Null)) As TermCode From		CourseEvaluation_PropertyValues pv 			Inner Join ( 				Select		ElementId 				From		CourseEvaluation_PropertyValues 				Where		PropertyName = 'Tag' 							And PropertyValue = 'EvaluationQuestion' 			) tags 				On tags.ElementId = pv.ElementId Group By	pv.ElementId ) list Cross Join @Sections s Where		IsEnabled = 1 And Case ShowWhen 				When 'global' Then 1 				When 'online' Then IsOnline 				When 'graduate' Then IsGraduateCourse 				When 'department' Then Iif(Department = Condition, 1, 0) 				When 'section' Then Iif(list.Condition = s.SectionID, 1, 0) 				When 'service_learning' Then IsServiceLearning 				When 'nursing' Then IsNursingCourse 				When 'connections' Then IsConnectionsCourse 				When 'private_music_instruction' Then IsPrivateMusicLessons 				Else 0 			End = 1 Order By	list.QuestionType, Case ShowWhen 				When 'global' Then 1 				When 'online' Then 2 				When 'graduate' Then 3 				When 'department' Then 4 				When 'section' Then 5 				When 'service_learning' Then 6 				When 'nursing' Then 7 				When 'connections' Then 8 				When 'private_music_instruction' Then 9 				Else 99 			End, SortOrder  Select * From @Returns_Questions;  /*   global; online=MATCH(section.MeetingRm,ONLINE); graduate=MATCH(section.IsGraduateCourse,True); department=section.DeptName; section=sectionId; service_learning=MATCH(section.GenEd,SERV1,SERV2,SERV3); nursing=MATCH_BEGIN(section.CourseName,NRSG,NRNT-125); connections=MATCH_BEGIN(section.CourseName,NOND-101,ENGR-121); private_music_instruction=MATCH_BEGIN(section.CourseName,MUPF-334)    QuestionEnabled QuestionOrder QuestionSectionId QuestionShowCondition QuestionShowWhen QuestionText QuestionType Tag TermCode  */ }, Name = Insert Into @Returns_Questions(SectionID, Category, Type, Question) Select		s.SectionID, 			Case ShowWhen 				When 'global' Then 'Global Questions' 				When 'online' Then 'Online Questions' 				When 'graduate' Then 'Graduate Questions' 				When 'department' Then s.Department + ' Questions' 				When 'section' Then s.CourseTitle + ' Questions (' + s.CourseCode + ')' 				When 'service_learning' Then 'Service Learning Questions' 				When 'nursing' Then 'Nursing Questions' 				When 'connections' Then 'Southern Connections Questions' 				When 'private_music_instruction' Then 'Private Music Leason Questions' 				Else Null 			End, 			Upper(QuestionType) As QuestionType, 			QuestionText From ( Select		--pv.ElementId As ElementID, 			Cast(Max(Iif(pv.PropertyName = 'QuestionEnabled', Iif(PropertyValue = 'True', 1, 0), 0)) As bit) As IsEnabled, 			Cast(Max(Iif(pv.PropertyName = 'QuestionOrder', PropertyValue, Null)) As int) As SortOrder, 			--Max(Iif(pv.PropertyName = 'QuestionSectionId', PropertyValue, Null)) As SectionID, 			Max(Iif(pv.PropertyName = 'QuestionShowCondition', PropertyValue, Null)) As Condition, 			Max(Iif(pv.PropertyName = 'QuestionShowWhen', Iif(PropertyValue = 'division', 'department', PropertyValue), Null)) As ShowWhen, 			Max(Iif(pv.PropertyName = 'QuestionText', PropertyValue, Null)) As QuestionText, 			Max(Iif(pv.PropertyName = 'QuestionType', Case PropertyValue 				When 'likert' Then PropertyValue 				When 'shortanswer' Then PropertyValue 				Else Null 			End, Null)) As QuestionType 			--Max(Iif(pv.PropertyName = 'TermCode', SubString(PropertyValue, 1, 3), Null)) As TermCode From		CourseEvaluation_PropertyValues pv 			Inner Join ( 				Select		ElementId 				From		CourseEvaluation_PropertyValues 				Where		PropertyName = 'Tag' 							And PropertyValue = 'EvaluationQuestion' 			) tags 				On tags.ElementId = pv.ElementId Group By	pv.ElementId ) list Cross Join @Sections s Where		IsEnabled = 1 And Case ShowWhen 				When 'global' Then 1 				When 'online' Then IsOnline 				When 'graduate' Then IsGraduateCourse 				When 'department' Then Iif(Department = Condition, 1, 0) 				When 'section' Then Iif(list.Condition = s.SectionID, 1, 0) 				When 'service_learning' Then IsServiceLearning 				When 'nursing' Then IsNursingCourse 				When 'connections' Then IsConnectionsCourse 				When 'private_music_instruction' Then IsPrivateMusicLessons 				Else 0 			End = 1 Order By	list.QuestionType, Case ShowWhen 				When 'global' Then 1 				When 'online' Then 2 				When 'graduate' Then 3 				When 'department' Then 4 				When 'section' Then 5 				When 'service_learning' Then 6 				When 'nursing' Then 7 				When 'connections' Then 8 				When 'private_music_instruction' Then 9 				Else 99 			End, SortOrder  Select * From @Returns_Questions;  /*   global; online=MATCH(section.MeetingRm,ONLINE); graduate=MATCH(section.IsGraduateCourse,True); department=section.DeptName; section=sectionId; service_learning=MATCH(section.GenEd,SERV1,SERV2,SERV3); nursing=MATCH_BEGIN(section.CourseName,NRSG,NRNT-125); connections=MATCH_BEGIN(section.CourseName,NOND-101,ENGR-121); private_music_instruction=MATCH_BEGIN(section.CourseName,MUPF-334)    QuestionEnabled QuestionOrder QuestionSectionId QuestionShowCondition QuestionShowWhen QuestionText QuestionType Tag TermCode  */ , DefaultValue = , IsObject = False, IsTable = False, IsRequired = True, IsNullable = True, Size = , Properties =  },
      Message: CodeBlock { CodeType = BODY, DatabaseType = Token { Type = BODY, Offset = 507, Value = Insert Into @Returns_Questions(SectionID, Category, Type, Question) Select		s.SectionID, 			Case ShowWhen 				When 'global' Then 'Global Questions' 				When 'online' Then 'Online Questions' 				When 'graduate' Then 'Graduate Questions' 				When 'department' Then s.Department + ' Questions' 				When 'section' Then s.CourseTitle + ' Questions (' + s.CourseCode + ')' 				When 'service_learning' Then 'Service Learning Questions' 				When 'nursing' Then 'Nursing Questions' 				When 'connections' Then 'Southern Connections Questions' 				When 'private_music_instruction' Then 'Private Music Leason Questions' 				Else Null 			End, 			Upper(QuestionType) As QuestionType, 			QuestionText From ( Select		--pv.ElementId As ElementID, 			Cast(Max(Iif(pv.PropertyName = 'QuestionEnabled', Iif(PropertyValue = 'True', 1, 0), 0)) As bit) As IsEnabled, 			Cast(Max(Iif(pv.PropertyName = 'QuestionOrder', PropertyValue, Null)) As int) As SortOrder, 			--Max(Iif(pv.PropertyName = 'QuestionSectionId', PropertyValue, Null)) As SectionID, 			Max(Iif(pv.PropertyName = 'QuestionShowCondition', PropertyValue, Null)) As Condition, 			Max(Iif(pv.PropertyName = 'QuestionShowWhen', Iif(PropertyValue = 'division', 'department', PropertyValue), Null)) As ShowWhen, 			Max(Iif(pv.PropertyName = 'QuestionText', PropertyValue, Null)) As QuestionText, 			Max(Iif(pv.PropertyName = 'QuestionType', Case PropertyValue 				When 'likert' Then PropertyValue 				When 'shortanswer' Then PropertyValue 				Else Null 			End, Null)) As QuestionType 			--Max(Iif(pv.PropertyName = 'TermCode', SubString(PropertyValue, 1, 3), Null)) As TermCode From		CourseEvaluation_PropertyValues pv 			Inner Join ( 				Select		ElementId 				From		CourseEvaluation_PropertyValues 				Where		PropertyName = 'Tag' 							And PropertyValue = 'EvaluationQuestion' 			) tags 				On tags.ElementId = pv.ElementId Group By	pv.ElementId ) list Cross Join @Sections s Where		IsEnabled = 1 And Case ShowWhen 				When 'global' Then 1 				When 'online' Then IsOnline 				When 'graduate' Then IsGraduateCourse 				When 'department' Then Iif(Department = Condition, 1, 0) 				When 'section' Then Iif(list.Condition = s.SectionID, 1, 0) 				When 'service_learning' Then IsServiceLearning 				When 'nursing' Then IsNursingCourse 				When 'connections' Then IsConnectionsCourse 				When 'private_music_instruction' Then IsPrivateMusicLessons 				Else 0 			End = 1 Order By	list.QuestionType, Case ShowWhen 				When 'global' Then 1 				When 'online' Then 2 				When 'graduate' Then 3 				When 'department' Then 4 				When 'section' Then 5 				When 'service_learning' Then 6 				When 'nursing' Then 7 				When 'connections' Then 8 				When 'private_music_instruction' Then 9 				Else 99 			End, SortOrder  Select * From @Returns_Questions;  /*   global; online=MATCH(section.MeetingRm,ONLINE); graduate=MATCH(section.IsGraduateCourse,True); department=section.DeptName; section=sectionId; service_learning=MATCH(section.GenEd,SERV1,SERV2,SERV3); nursing=MATCH_BEGIN(section.CourseName,NRSG,NRNT-125); connections=MATCH_BEGIN(section.CourseName,NOND-101,ENGR-121); private_music_instruction=MATCH_BEGIN(section.CourseName,MUPF-334)    QuestionEnabled QuestionOrder QuestionSectionId QuestionShowCondition QuestionShowWhen QuestionText QuestionType Tag TermCode  */ , Original = Insert Into @Returns_Questions Select		s.SectionID, 			Case ShowWhen 				When 'global' Then 'Global Questions' 				When 'online' Then 'Online Questions' 				When 'graduate' Then 'Graduate Questions' 				When 'department' Then s.Department + ' Questions' 				When 'section' Then s.CourseTitle + ' Questions (' + s.CourseCode + ')' 				When 'service_learning' Then 'Service Learning Questions' 				When 'nursing' Then 'Nursing Questions' 				When 'connections' Then 'Southern Connections Questions' 				When 'private_music_instruction' Then 'Private Music Leason Questions' 				Else Null 			End, 			Upper(QuestionType) As QuestionType, 			QuestionText From ( Select		--pv.ElementId As ElementID, 			Cast(Max(Iif(pv.PropertyName = 'QuestionEnabled', Iif(PropertyValue = 'True', 1, 0), 0)) As bit) As IsEnabled, 			Cast(Max(Iif(pv.PropertyName = 'QuestionOrder', PropertyValue, Null)) As int) As SortOrder, 			--Max(Iif(pv.PropertyName = 'QuestionSectionId', PropertyValue, Null)) As SectionID, 			Max(Iif(pv.PropertyName = 'QuestionShowCondition', PropertyValue, Null)) As Condition, 			Max(Iif(pv.PropertyName = 'QuestionShowWhen', Iif(PropertyValue = 'division', 'department', PropertyValue), Null)) As ShowWhen, 			Max(Iif(pv.PropertyName = 'QuestionText', PropertyValue, Null)) As QuestionText, 			Max(Iif(pv.PropertyName = 'QuestionType', Case PropertyValue 				When 'likert' Then PropertyValue 				When 'shortanswer' Then PropertyValue 				Else Null 			End, Null)) As QuestionType 			--Max(Iif(pv.PropertyName = 'TermCode', SubString(PropertyValue, 1, 3), Null)) As TermCode From		CourseEvaluation_PropertyValues pv 			Inner Join ( 				Select		ElementId 				From		CourseEvaluation_PropertyValues 				Where		PropertyName = 'Tag' 							And PropertyValue = 'EvaluationQuestion' 			) tags 				On tags.ElementId = pv.ElementId Group By	pv.ElementId ) list Cross Join @Sections s Where		IsEnabled = 1 And Case ShowWhen 				When 'global' Then 1 				When 'online' Then IsOnline 				When 'graduate' Then IsGraduateCourse 				When 'department' Then Iif(Department = Condition, 1, 0) 				When 'section' Then Iif(list.Condition = s.SectionID, 1, 0) 				When 'service_learning' Then IsServiceLearning 				When 'nursing' Then IsNursingCourse 				When 'connections' Then IsConnectionsCourse 				When 'private_music_instruction' Then IsPrivateMusicLessons 				Else 0 			End = 1 Order By	list.QuestionType, Case ShowWhen 				When 'global' Then 1 				When 'online' Then 2 				When 'graduate' Then 3 				When 'department' Then 4 				When 'section' Then 5 				When 'service_learning' Then 6 				When 'nursing' Then 7 				When 'connections' Then 8 				When 'private_music_instruction' Then 9 				Else 99 			End, SortOrder  Select * From @Returns_Questions;  /*   global; online=MATCH(section.MeetingRm,ONLINE); graduate=MATCH(section.IsGraduateCourse,True); department=section.DeptName; section=sectionId; service_learning=MATCH(section.GenEd,SERV1,SERV2,SERV3); nursing=MATCH_BEGIN(section.CourseName,NRSG,NRNT-125); connections=MATCH_BEGIN(section.CourseName,NOND-101,ENGR-121); private_music_instruction=MATCH_BEGIN(section.CourseName,MUPF-334)    QuestionEnabled QuestionOrder QuestionSectionId QuestionShowCondition QuestionShowWhen QuestionText QuestionType Tag TermCode  */ }, Name = Insert Into @Returns_Questions(SectionID, Category, Type, Question) Select		s.SectionID, 			Case ShowWhen 				When 'global' Then 'Global Questions' 				When 'online' Then 'Online Questions' 				When 'graduate' Then 'Graduate Questions' 				When 'department' Then s.Department + ' Questions' 				When 'section' Then s.CourseTitle + ' Questions (' + s.CourseCode + ')' 				When 'service_learning' Then 'Service Learning Questions' 				When 'nursing' Then 'Nursing Questions' 				When 'connections' Then 'Southern Connections Questions' 				When 'private_music_instruction' Then 'Private Music Leason Questions' 				Else Null 			End, 			Upper(QuestionType) As QuestionType, 			QuestionText From ( Select		--pv.ElementId As ElementID, 			Cast(Max(Iif(pv.PropertyName = 'QuestionEnabled', Iif(PropertyValue = 'True', 1, 0), 0)) As bit) As IsEnabled, 			Cast(Max(Iif(pv.PropertyName = 'QuestionOrder', PropertyValue, Null)) As int) As SortOrder, 			--Max(Iif(pv.PropertyName = 'QuestionSectionId', PropertyValue, Null)) As SectionID, 			Max(Iif(pv.PropertyName = 'QuestionShowCondition', PropertyValue, Null)) As Condition, 			Max(Iif(pv.PropertyName = 'QuestionShowWhen', Iif(PropertyValue = 'division', 'department', PropertyValue), Null)) As ShowWhen, 			Max(Iif(pv.PropertyName = 'QuestionText', PropertyValue, Null)) As QuestionText, 			Max(Iif(pv.PropertyName = 'QuestionType', Case PropertyValue 				When 'likert' Then PropertyValue 				When 'shortanswer' Then PropertyValue 				Else Null 			End, Null)) As QuestionType 			--Max(Iif(pv.PropertyName = 'TermCode', SubString(PropertyValue, 1, 3), Null)) As TermCode From		CourseEvaluation_PropertyValues pv 			Inner Join ( 				Select		ElementId 				From		CourseEvaluation_PropertyValues 				Where		PropertyName = 'Tag' 							And PropertyValue = 'EvaluationQuestion' 			) tags 				On tags.ElementId = pv.ElementId Group By	pv.ElementId ) list Cross Join @Sections s Where		IsEnabled = 1 And Case ShowWhen 				When 'global' Then 1 				When 'online' Then IsOnline 				When 'graduate' Then IsGraduateCourse 				When 'department' Then Iif(Department = Condition, 1, 0) 				When 'section' Then Iif(list.Condition = s.SectionID, 1, 0) 				When 'service_learning' Then IsServiceLearning 				When 'nursing' Then IsNursingCourse 				When 'connections' Then IsConnectionsCourse 				When 'private_music_instruction' Then IsPrivateMusicLessons 				Else 0 			End = 1 Order By	list.QuestionType, Case ShowWhen 				When 'global' Then 1 				When 'online' Then 2 				When 'graduate' Then 3 				When 'department' Then 4 				When 'section' Then 5 				When 'service_learning' Then 6 				When 'nursing' Then 7 				When 'connections' Then 8 				When 'private_music_instruction' Then 9 				Else 99 			End, SortOrder  Select * From @Returns_Questions;  /*   global; online=MATCH(section.MeetingRm,ONLINE); graduate=MATCH(section.IsGraduateCourse,True); department=section.DeptName; section=sectionId; service_learning=MATCH(section.GenEd,SERV1,SERV2,SERV3); nursing=MATCH_BEGIN(section.CourseName,NRSG,NRNT-125); connections=MATCH_BEGIN(section.CourseName,NOND-101,ENGR-121); private_music_instruction=MATCH_BEGIN(section.CourseName,MUPF-334)    QuestionEnabled QuestionOrder QuestionSectionId QuestionShowCondition QuestionShowWhen QuestionText QuestionType Tag TermCode  */ , DefaultValue = , IsObject = False, IsTable = False, IsRequired = True, IsNullable = True, Size = , Properties =  },
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: KEYWORD_DECLARE => ,
      Message: KEYWORD_DECLARE => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: VARIABLE => Param_Debug,
      Message: VARIABLE => Param_Debug,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_BOOLEAN => ,
      Message: TYPE_BOOLEAN => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_EQUAL => ,
      Message: SYMBOL_EQUAL => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: LITERAL_NUMBER => 1,
      Message: LITERAL_NUMBER => 1,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: KEYWORD_DECLARE => ,
      Message: KEYWORD_DECLARE => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: VARIABLE => Param_Section,
      Message: VARIABLE => Param_Section,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_TABLE => ,
      Message: TYPE_TABLE => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_LPREN => ,
      Message: SYMBOL_LPREN => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => SectionID,
      Message: IDENTIFIER => SectionID,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_STRING => 20,
      Message: TYPE_STRING => 20,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => Department,
      Message: IDENTIFIER => Department,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_STRING => 100,
      Message: TYPE_STRING => 100,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => CourseCode,
      Message: IDENTIFIER => CourseCode,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_STRING => 20,
      Message: TYPE_STRING => 20,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => CourseTitle,
      Message: IDENTIFIER => CourseTitle,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_STRING => 150,
      Message: TYPE_STRING => 150,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => IsOnline,
      Message: IDENTIFIER => IsOnline,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_BOOLEAN => ,
      Message: TYPE_BOOLEAN => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => IsGraduateCourse,
      Message: IDENTIFIER => IsGraduateCourse,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_BOOLEAN => ,
      Message: TYPE_BOOLEAN => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => IsAdultDegreeCourse,
      Message: IDENTIFIER => IsAdultDegreeCourse,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_BOOLEAN => ,
      Message: TYPE_BOOLEAN => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => IsNursingCourse,
      Message: IDENTIFIER => IsNursingCourse,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_BOOLEAN => ,
      Message: TYPE_BOOLEAN => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => IsConnectionsCourse,
      Message: IDENTIFIER => IsConnectionsCourse,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_BOOLEAN => ,
      Message: TYPE_BOOLEAN => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => IsPrivateMusicLessons,
      Message: IDENTIFIER => IsPrivateMusicLessons,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_BOOLEAN => ,
      Message: TYPE_BOOLEAN => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => IsServiceLearning,
      Message: IDENTIFIER => IsServiceLearning,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_BOOLEAN => ,
      Message: TYPE_BOOLEAN => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_RPREN => ,
      Message: SYMBOL_RPREN => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: KEYWORD_DECLARE => ,
      Message: KEYWORD_DECLARE => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: VARIABLE => Returns_Questions,
      Message: VARIABLE => Returns_Questions,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_TABLE => ,
      Message: TYPE_TABLE => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_LPREN => ,
      Message: SYMBOL_LPREN => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => SectionID,
      Message: IDENTIFIER => SectionID,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_STRING => 20,
      Message: TYPE_STRING => 20,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => Category,
      Message: IDENTIFIER => Category,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_STRING => 200,
      Message: TYPE_STRING => 200,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => Type,
      Message: IDENTIFIER => Type,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_STRING => 20,
      Message: TYPE_STRING => 20,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_COMMA => ,
      Message: SYMBOL_COMMA => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => Question,
      Message: IDENTIFIER => Question,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: TYPE_STRING => 1000,
      Message: TYPE_STRING => 1000,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: SYMBOL_RPREN => ,
      Message: SYMBOL_RPREN => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: KEYWORD_USE => ,
      Message: KEYWORD_USE => ,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: IDENTIFIER => DataRepository,
      Message: IDENTIFIER => DataRepository,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: INSERT_INTO_TABLE => Returns_Questions,
      Message: INSERT_INTO_TABLE => Returns_Questions,
      Category: Logger
    },
    {
      Id: SP0000,
      Title: Development Data,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (0,0)-(0,0),
      MessageFormat: BODY => Insert Into @Returns_Questions Select		s.SectionID, 			Case ShowWhen 				When 'global' Then 'Global Questions' 				When 'online' Then 'Online Questions' 				When 'graduate' Then 'Graduate Questions' 				When 'department' Then s.Department + ' Questions' 				When 'section' Then s.CourseTitle + ' Questions (' + s.CourseCode + ')' 				When 'service_learning' Then 'Service Learning Questions' 				When 'nursing' Then 'Nursing Questions' 				When 'connections' Then 'Southern Connections Questions' 				When 'private_music_instruction' Then 'Private Music Leason Questions' 				Else Null 			End, 			Upper(QuestionType) As QuestionType, 			QuestionText From ( Select		--pv.ElementId As ElementID, 			Cast(Max(Iif(pv.PropertyName = 'QuestionEnabled', Iif(PropertyValue = 'True', 1, 0), 0)) As bit) As IsEnabled, 			Cast(Max(Iif(pv.PropertyName = 'QuestionOrder', PropertyValue, Null)) As int) As SortOrder, 			--Max(Iif(pv.PropertyName = 'QuestionSectionId', PropertyValue, Null)) As SectionID, 			Max(Iif(pv.PropertyName = 'QuestionShowCondition', PropertyValue, Null)) As Condition, 			Max(Iif(pv.PropertyName = 'QuestionShowWhen', Iif(PropertyValue = 'division', 'department', PropertyValue), Null)) As ShowWhen, 			Max(Iif(pv.PropertyName = 'QuestionText', PropertyValue, Null)) As QuestionText, 			Max(Iif(pv.PropertyName = 'QuestionType', Case PropertyValue 				When 'likert' Then PropertyValue 				When 'shortanswer' Then PropertyValue 				Else Null 			End, Null)) As QuestionType 			--Max(Iif(pv.PropertyName = 'TermCode', SubString(PropertyValue, 1, 3), Null)) As TermCode From		CourseEvaluation_PropertyValues pv 			Inner Join ( 				Select		ElementId 				From		CourseEvaluation_PropertyValues 				Where		PropertyName = 'Tag' 							And PropertyValue = 'EvaluationQuestion' 			) tags 				On tags.ElementId = pv.ElementId Group By	pv.ElementId ) list Cross Join @Sections s Where		IsEnabled = 1 And Case ShowWhen 				When 'global' Then 1 				When 'online' Then IsOnline 				When 'graduate' Then IsGraduateCourse 				When 'department' Then Iif(Department = Condition, 1, 0) 				When 'section' Then Iif(list.Condition = s.SectionID, 1, 0) 				When 'service_learning' Then IsServiceLearning 				When 'nursing' Then IsNursingCourse 				When 'connections' Then IsConnectionsCourse 				When 'private_music_instruction' Then IsPrivateMusicLessons 				Else 0 			End = 1 Order By	list.QuestionType, Case ShowWhen 				When 'global' Then 1 				When 'online' Then 2 				When 'graduate' Then 3 				When 'department' Then 4 				When 'section' Then 5 				When 'service_learning' Then 6 				When 'nursing' Then 7 				When 'connections' Then 8 				When 'private_music_instruction' Then 9 				Else 99 			End, SortOrder  Select * From @Returns_Questions;  /*   global; online=MATCH(section.MeetingRm,ONLINE); graduate=MATCH(section.IsGraduateCourse,True); department=section.DeptName; section=sectionId; service_learning=MATCH(section.GenEd,SERV1,SERV2,SERV3); nursing=MATCH_BEGIN(section.CourseName,NRSG,NRNT-125); connections=MATCH_BEGIN(section.CourseName,NOND-101,ENGR-121); private_music_instruction=MATCH_BEGIN(section.CourseName,MUPF-334)    QuestionEnabled QuestionOrder QuestionSectionId QuestionShowCondition QuestionShowWhen QuestionText QuestionType Tag TermCode  */,
      Message: BODY => Insert Into @Returns_Questions Select		s.SectionID, 			Case ShowWhen 				When 'global' Then 'Global Questions' 				When 'online' Then 'Online Questions' 				When 'graduate' Then 'Graduate Questions' 				When 'department' Then s.Department + ' Questions' 				When 'section' Then s.CourseTitle + ' Questions (' + s.CourseCode + ')' 				When 'service_learning' Then 'Service Learning Questions' 				When 'nursing' Then 'Nursing Questions' 				When 'connections' Then 'Southern Connections Questions' 				When 'private_music_instruction' Then 'Private Music Leason Questions' 				Else Null 			End, 			Upper(QuestionType) As QuestionType, 			QuestionText From ( Select		--pv.ElementId As ElementID, 			Cast(Max(Iif(pv.PropertyName = 'QuestionEnabled', Iif(PropertyValue = 'True', 1, 0), 0)) As bit) As IsEnabled, 			Cast(Max(Iif(pv.PropertyName = 'QuestionOrder', PropertyValue, Null)) As int) As SortOrder, 			--Max(Iif(pv.PropertyName = 'QuestionSectionId', PropertyValue, Null)) As SectionID, 			Max(Iif(pv.PropertyName = 'QuestionShowCondition', PropertyValue, Null)) As Condition, 			Max(Iif(pv.PropertyName = 'QuestionShowWhen', Iif(PropertyValue = 'division', 'department', PropertyValue), Null)) As ShowWhen, 			Max(Iif(pv.PropertyName = 'QuestionText', PropertyValue, Null)) As QuestionText, 			Max(Iif(pv.PropertyName = 'QuestionType', Case PropertyValue 				When 'likert' Then PropertyValue 				When 'shortanswer' Then PropertyValue 				Else Null 			End, Null)) As QuestionType 			--Max(Iif(pv.PropertyName = 'TermCode', SubString(PropertyValue, 1, 3), Null)) As TermCode From		CourseEvaluation_PropertyValues pv 			Inner Join ( 				Select		ElementId 				From		CourseEvaluation_PropertyValues 				Where		PropertyName = 'Tag' 							And PropertyValue = 'EvaluationQuestion' 			) tags 				On tags.ElementId = pv.ElementId Group By	pv.ElementId ) list Cross Join @Sections s Where		IsEnabled = 1 And Case ShowWhen 				When 'global' Then 1 				When 'online' Then IsOnline 				When 'graduate' Then IsGraduateCourse 				When 'department' Then Iif(Department = Condition, 1, 0) 				When 'section' Then Iif(list.Condition = s.SectionID, 1, 0) 				When 'service_learning' Then IsServiceLearning 				When 'nursing' Then IsNursingCourse 				When 'connections' Then IsConnectionsCourse 				When 'private_music_instruction' Then IsPrivateMusicLessons 				Else 0 			End = 1 Order By	list.QuestionType, Case ShowWhen 				When 'global' Then 1 				When 'online' Then 2 				When 'graduate' Then 3 				When 'department' Then 4 				When 'section' Then 5 				When 'service_learning' Then 6 				When 'nursing' Then 7 				When 'connections' Then 8 				When 'private_music_instruction' Then 9 				Else 99 			End, SortOrder  Select * From @Returns_Questions;  /*   global; online=MATCH(section.MeetingRm,ONLINE); graduate=MATCH(section.IsGraduateCourse,True); department=section.DeptName; section=sectionId; service_learning=MATCH(section.GenEd,SERV1,SERV2,SERV3); nursing=MATCH_BEGIN(section.CourseName,NRSG,NRNT-125); connections=MATCH_BEGIN(section.CourseName,NOND-101,ENGR-121); private_music_instruction=MATCH_BEGIN(section.CourseName,MUPF-334)    QuestionEnabled QuestionOrder QuestionSectionId QuestionShowCondition QuestionShowWhen QuestionText QuestionType Tag TermCode  */,
      Category: Logger
    },
    {
      Id: SP0014,
      Title: Critical Generation Failure,
      Severity: Error,
      WarningLevel: 0,
      Location: : (0,0)-(0,0),
      MessageFormat: The hintName 'SectionTable.g.cs' of the added source file must be unique within a generator. (Parameter 'hintName')    at Microsoft.CodeAnalysis.AdditionalSourcesCollection.Add(String hintName, SourceText source)    at Microsoft.CodeAnalysis.SourceProductionContext.AddSource(String hintName, SourceText sourceText)    at Microsoft.CodeAnalysis.FileGenerator.AddSource(String filename, String source) in {SolutionDirectory}SQuiL.SourceGenerator\Microsoft.CodeAnalysis\FileGenerator.cs:line 25    at Microsoft.CodeAnalysis.FileGenerator.GenerateCode() in {SolutionDirectory}SQuiL.SourceGenerator\Microsoft.CodeAnalysis\FileGenerator.cs:line 100    at SQuiL.Generator.SQuiLGenerator.Execute(Compilation _, ImmutableArray`1 dependencies, ImmutableArray`1 files, ImmutableArray`1 definitions, ImmutableDictionary`2 records, SourceProductionContext context) in {SolutionDirectory}SQuiL.SourceGenerator\SQuiL\Generator\SQuiLGenerator.cs:line 319    at SQuiL.Generator.SQuiLGenerator.<Initialize>b__9_16(SourceProductionContext a, ValueTuple`2 b) in {SolutionDirectory}SQuiL.SourceGenerator\SQuiL\Generator\SQuiLGenerator.cs:line 129,
      Message: The hintName 'SectionTable.g.cs' of the added source file must be unique within a generator. (Parameter 'hintName')    at Microsoft.CodeAnalysis.AdditionalSourcesCollection.Add(String hintName, SourceText source)    at Microsoft.CodeAnalysis.SourceProductionContext.AddSource(String hintName, SourceText sourceText)    at Microsoft.CodeAnalysis.FileGenerator.AddSource(String filename, String source) in {SolutionDirectory}SQuiL.SourceGenerator\Microsoft.CodeAnalysis\FileGenerator.cs:line 25    at Microsoft.CodeAnalysis.FileGenerator.GenerateCode() in {SolutionDirectory}SQuiL.SourceGenerator\Microsoft.CodeAnalysis\FileGenerator.cs:line 100    at SQuiL.Generator.SQuiLGenerator.Execute(Compilation _, ImmutableArray`1 dependencies, ImmutableArray`1 files, ImmutableArray`1 definitions, ImmutableDictionary`2 records, SourceProductionContext context) in {SolutionDirectory}SQuiL.SourceGenerator\SQuiL\Generator\SQuiLGenerator.cs:line 319    at SQuiL.Generator.SQuiLGenerator.<Initialize>b__9_16(SourceProductionContext a, ValueTuple`2 b) in {SolutionDirectory}SQuiL.SourceGenerator\SQuiL\Generator\SQuiLGenerator.cs:line 129,
      Category: Design
    }
  ]
}