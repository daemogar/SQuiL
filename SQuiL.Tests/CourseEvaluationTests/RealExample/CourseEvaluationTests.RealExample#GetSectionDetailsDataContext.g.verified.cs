//HintName: GetSectionDetailsDataContext.g.cs
// <auto-generated />

#nullable enable

using Microsoft.Data.SqlClient;

using SQuiL;

namespace CourseEvaluation.Application.Data;

partial class CourseEvaluationDataContext : SQuiLBaseDataContext
{
	public async Task<GetSectionDetailsResponse> ProcessGetSectionDetailsAsync(
		GetSectionDetailsRequest request,
		CancellationToken cancellationToken = default!)
	{
		var builder = ConnectionStringBuilder("Warehouse");
		using SqlConnection connection = new(builder.ConnectionString);
		var command = connection.CreateCommand();
		
		List<SqlParameter> parameters = new()
		{
			new("EnvironmentName", System.Data.SqlDbType.VarChar, EnvironmentName.Length) { Value = EnvironmentName }, 
			new("Debug", System.Data.SqlDbType.Bit) { Value = EnvironmentName != "Production" }, 
			new("SectionID", System.Data.SqlDbType.VarChar, 20) 
			{
				IsNullable = true,
				Value = request.SectionID switch
				{
					null => (object)System.DBNull.Value,
					{ Length: <= 20 } => request.SectionID,
					_ => throw new Exception(
						"Request model data is larger then database size for the property [SectionID].")
				}
			}
		};
		
		command.CommandText = Query(parameters);
		command.Parameters.AddRange(parameters.ToArray());
		
		await connection.OpenAsync(cancellationToken);
		
		GetSectionDetailsResponse response = new();
		
		var isSections = false;
		
		using var reader = await command.ExecuteReaderAsync(cancellationToken);
		
		do
		{
			var tableTag = reader.GetName(0);
			if(tableTag.StartsWith("__SQuiL__Table__Type__"))
			{
				switch (tableTag)
				{
					case "__SQuiL__Table__Type__Returns_Sections__":
					{
						isSections = true;
						
						if (!await reader.ReadAsync(cancellationToken)) break;
						
						var indexSectionID = reader.GetOrdinal("SectionID");
						var indexDepartment = reader.GetOrdinal("Department");
						var indexCourseCode = reader.GetOrdinal("CourseCode");
						var indexCourseTitle = reader.GetOrdinal("CourseTitle");
						var indexIsOnline = reader.GetOrdinal("IsOnline");
						var indexIsGraduateCourse = reader.GetOrdinal("IsGraduateCourse");
						var indexIsAdultDegreeCourse = reader.GetOrdinal("IsAdultDegreeCourse");
						var indexIsNursingCourse = reader.GetOrdinal("IsNursingCourse");
						var indexIsConnectionsCourse = reader.GetOrdinal("IsConnectionsCourse");
						var indexIsPrivateMusicLessons = reader.GetOrdinal("IsPrivateMusicLessons");
						var indexIsServiceLearning = reader.GetOrdinal("IsServiceLearning");
						
						do
						{
							if (reader.GetString(0) == "Returns_Sections")
							{
								response.Sections.Add(new(
									reader.GetString(indexSectionID),
									reader.GetString(indexDepartment),
									reader.GetString(indexCourseCode),
									reader.GetString(indexCourseTitle),
									reader.GetBoolean(indexIsOnline),
									reader.GetBoolean(indexIsGraduateCourse),
									reader.GetBoolean(indexIsAdultDegreeCourse),
									reader.GetBoolean(indexIsNursingCourse),
									reader.GetBoolean(indexIsConnectionsCourse),
									reader.GetBoolean(indexIsPrivateMusicLessons),
									reader.GetBoolean(indexIsServiceLearning)));
							}
						}
						while (await reader.ReadAsync(cancellationToken));
						break;
					}
				}
			}
		}
		while (await reader.NextResultAsync(cancellationToken));
		
		if (!isSections) throw new Exception("Expected return table `Sections`)");
		
		return response;
		
		string Query(List<SqlParameter> parameters) => $"""
		Declare @Returns_Sections table(
			[__SQuiL__Table__Type__Returns_Sections__] varchar(max) default('Returns_Sections'),
			SectionID varchar(20),
			Department varchar(100),
			CourseCode varchar(20),
			CourseTitle varchar(150),
			IsOnline bit,
			IsGraduateCourse bit,
			IsAdultDegreeCourse bit,
			IsNursingCourse bit,
			IsConnectionsCourse bit,
			IsPrivateMusicLessons bit,
			IsServiceLearning bit);
		
		Use [{builder.InitialCatalog}];
		
		Insert Into @Returns_Sections(SectionID, Department, CourseCode, CourseTitle, IsOnline, IsGraduateCourse, IsAdultDegreeCourse, IsNursingCourse, IsConnectionsCourse, IsPrivateMusicLessons, IsServiceLearning)
		Select		SectionID, DeptName, CourseName, CourseTitle, Iif(Upper(MeetingRm) = 'ONLINE', 1, 0), Iif(CourseLevel = 'GR', 1, 0), IsADC,
					Iif(CourseName Like 'NURG-%' Or CourseName Like 'NRNT-125-%', 1, 0),
					Iif(CourseName Like 'NOND-101-%' Or CourseName Like 'ENGR-121-%', 1, 0),
					Iif(CourseName Like 'MUPF-334-%', 1, 0), Case
						When GenEd In ('SERV1','SERV2','SERV3') Then 1
						When GenEd2 In ('SERV1','SERV2','SERV3') Then 1
						When GenEd3 In ('SERV1','SERV2','SERV3') Then 1
						When GenEd4 In ('SERV1','SERV2','SERV3') Then 1
						When GenEd5 In ('SERV1','SERV2','SERV3') Then 1
						Else 0
					End
		From		adm.Sections s
		Where		s.SectionID = @Param_SectionID;
		
		Select * From @Returns_Sections;
		
		""";
	}
}
