//HintName: GetCourseForEvaluationByEvaluationIDDataContext.g.cs
// <auto-generated />

#nullable enable

using Microsoft.Data.SqlClient;

using SQuiL;

namespace CourseEvaluation.Application.Data;

partial class CourseEvaluationDataContext : SQuiLBaseDataContext
{
	public async Task<GetCourseForEvaluationByEvaluationIDResponse> ProcessGetCourseForEvaluationByEvaluationIDAsync(
		GetCourseForEvaluationByEvaluationIDRequest request,
		CancellationToken cancellationToken = default!)
	{
		var builder = ConnectionStringBuilder("Warehouse");
		using SqlConnection connection = new(builder.ConnectionString);
		var command = connection.CreateCommand();
		
		List<SqlParameter> parameters = new()
		{
			new("EnvironmentName", System.Data.SqlDbType.VarChar, EnvironmentName.Length) { Value = EnvironmentName }, 
			new("Debug", System.Data.SqlDbType.Bit) { Value = EnvironmentName != "Production" }, 
			new("EvaluationID", System.Data.SqlDbType.VarChar, 21) 
			{
				IsNullable = true,
				Value = request.EvaluationID switch
				{
					null => (object)System.DBNull.Value,
					{ Length: <= 21 } => request.EvaluationID,
					_ => throw new Exception(
						"Request model data is larger then database size for the property [EvaluationID].")
				}
			}
		};
		
		command.CommandText = Query(parameters);
		command.Parameters.AddRange(parameters.ToArray());
		
		await connection.OpenAsync(cancellationToken);
		
		GetCourseForEvaluationByEvaluationIDResponse response = new();
		
		var isSectionID = false;
		var isPersonID = false;
		var isTermCode = false;
		
		using var reader = await command.ExecuteReaderAsync(cancellationToken);
		
		do
		{
			var tableTag = reader.GetName(0);
			if(tableTag.StartsWith("__SQuiL__Table__Type__"))
			{
				switch (tableTag)
				{
					case "__SQuiL__Table__Type__Return_SectionID__":
					{
						if (isSectionID) throw new Exception(
							"Already returned value for `SectionID`");
						
						isSectionID = true;
						
						if (!await reader.ReadAsync(cancellationToken)) break;
						
						response.SectionID = !reader.IsDBNull(1) ? reader.GetString(1) : throw new NullReferenceException("Return value for Return_SectionID cannot be null.");
						break;
					}
					case "__SQuiL__Table__Type__Return_PersonID__":
					{
						if (isPersonID) throw new Exception(
							"Already returned value for `PersonID`");
						
						isPersonID = true;
						
						if (!await reader.ReadAsync(cancellationToken)) break;
						
						response.PersonID = !reader.IsDBNull(1) ? reader.GetString(1) : throw new NullReferenceException("Return value for Return_PersonID cannot be null.");
						break;
					}
					case "__SQuiL__Table__Type__Return_TermCode__":
					{
						if (isTermCode) throw new Exception(
							"Already returned value for `TermCode`");
						
						isTermCode = true;
						
						if (!await reader.ReadAsync(cancellationToken)) break;
						
						response.TermCode = !reader.IsDBNull(1) ? reader.GetString(1) : throw new NullReferenceException("Return value for Return_TermCode cannot be null.");
						break;
					}
				}
			}
		}
		while (await reader.NextResultAsync(cancellationToken));
		
		if (!isSectionID) throw new Exception("Expected return table `SectionID`)");
		if (!isPersonID) throw new Exception("Expected return table `PersonID`)");
		if (!isTermCode) throw new Exception("Expected return table `TermCode`)");
		
		return response;
		
		string Query(List<SqlParameter> parameters) => $"""
		Declare @Return_SectionID varchar(10);
		
		Declare @Return_PersonID varchar(10);
		
		Declare @Return_TermCode varchar(10);
		
		Use [{builder.InitialCatalog}];
		
		Select		@Return_SectionID = sf.SectionID,
					@Return_PersonID = sf.PersonID,
					@Return_TermCode = s.SectionTermActual
		From		adm.SectionFaculty sf
					Inner Join adm.Sections s
						On s.SectionID = sf.SectionID
					Inner Join pub.spPerson p
						On p.PersonID = sf.PersonID
		Where		Char(64 + sf.FacultyOrder) + Cast(sf.SectionFacultyID As varchar(10)) = @Param_EvaluationID;
		
		Select 'Return_SectionID' As [__SQuiL__Table__Type__Return_SectionID__], @Return_SectionID;
		Select 'Return_PersonID' As [__SQuiL__Table__Type__Return_PersonID__], @Return_PersonID;
		Select 'Return_TermCode' As [__SQuiL__Table__Type__Return_TermCode__], @Return_TermCode;
		
		""";
	}
}
