//HintName: UseStatementFailsWhenAddingDeclareTestDataContext.g.cs
// <auto-generated />

#nullable enable

using Microsoft.Data.SqlClient;
using System.Data.Common;

using SQuiL;

namespace TestCase;

partial class TestQueryParamsAndReturnsDataContext : SQuiLBaseDataContext
{
	public async Task<UseStatementFailsWhenAddingDeclareTestResponse> ProcessUseStatementFailsWhenAddingDeclareTestAsync(
		UseStatementFailsWhenAddingDeclareTestRequest request,
		CancellationToken cancellationToken = default!)
	{
		var builder = ConnectionStringBuilder("SQuiLDatabase");
		using var connection = CreateConnection(builder.ConnectionString);
		
		var command = connection.CreateCommand();
		
		List<DbParameter> parameters = new()
		{
			CreateParameter("@EnvironmentName", System.Data.SqlDbType.VarChar, EnvironmentName.Length, EnvironmentName),
			CreateParameter("@Debug", System.Data.SqlDbType.Bit, request.Debug || EnvironmentName != "Production")
		};
		
		command.CommandText = Query(parameters);
		command.Parameters.AddRange(parameters.ToArray());
		
		await connection.OpenAsync(cancellationToken);
		
		UseStatementFailsWhenAddingDeclareTestResponse response = new();
		
		var isExtendedCourses = false;
		
		using var reader = await command.ExecuteReaderAsync(cancellationToken);
		
		do
		{
			var tableTag = reader.GetName(0);
			if(tableTag.StartsWith("__SQuiL__Table__Type__"))
			{
				switch (tableTag)
				{
					case "__SQuiL__Table__Type__Error__":
					{
						if (!await reader.ReadAsync(cancellationToken)) break;
						
						break;
					}
					case "__SQuiL__Table__Type__Returns_ExtendedCourses__":
					{
						isExtendedCourses = true;
						
						if (!await reader.ReadAsync(cancellationToken)) break;
						
						var indexProfessorID = reader.GetOrdinal("ProfessorID");
						var indexUsername = reader.GetOrdinal("Username");
						
						do
						{
							if (reader.GetString(0) == "Returns_ExtendedCourses")
							{
								var valueProfessorID = reader.GetString(indexProfessorID);
								var valueUsername = reader.GetString(indexUsername);
								response.ExtendedCourses.Add(new(
									valueProfessorID,
									valueUsername));
							}
						}
						while (await reader.ReadAsync(cancellationToken));
						break;
					}
				}
			}
		}
		while (await reader.NextResultAsync(cancellationToken));
		
		if (!isExtendedCourses) throw new Exception("Expected return table `ExtendedCourses`");
		
		return response;
		
		string Query(List<DbParameter> parameters) => $"""
		Declare @Returns_ExtendedCourses table(
			[__SQuiL__Table__Type__Returns_ExtendedCourses__] varchar(max) default('Returns_ExtendedCourses'),
			[ProfessorID] varchar(10),
			[Username] varchar(1000));
		
		Use [{builder.InitialCatalog}];
		
		Use [Database];
		
		""";
	}
}
