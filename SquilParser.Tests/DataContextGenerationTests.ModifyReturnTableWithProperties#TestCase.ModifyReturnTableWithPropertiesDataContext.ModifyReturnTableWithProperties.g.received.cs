//HintName: TestCase.ModifyReturnTableWithPropertiesDataContext.ModifyReturnTableWithProperties.g.cs
// <auto-generated />

#nullable enable

using Microsoft.Data.SqlClient;

using SQuiL;

namespace TestCase;

partial class ModifyReturnTableWithPropertiesDataContext : SQuiLBaseDataContext
{
	public async Task<ModifyReturnTableWithPropertiesDataContextModifyReturnTableWithPropertiesResponse> ProcessModifyReturnTableWithPropertiesAsync(
		ModifyReturnTableWithPropertiesDataContextModifyReturnTableWithPropertiesRequest request,
		CancellationToken cancellationToken = default!)
	{
		var builder = ConnectionStringBuilder("SQuiLDatabase");
		using SqlConnection connection = new(builder.ConnectionString);
		var command = connection.CreateCommand();
		command.CommandText = Query();
		command.Parameters.AddRange(new SqlParameter[]
		{
			new("EnvironmentName", System.Data.SqlDbType.VarChar, EnvironmentName.Length) { Value = EnvironmentName }, 
			new("Debug", System.Data.SqlDbType.Bit) { Value = EnvironmentName != "Production" }, 
		});
		
		await connection.OpenAsync(cancellationToken);
		
		ModifyReturnTableWithPropertiesDataContextModifyReturnTableWithPropertiesResponse response = new();
		var isCourses = false;
		
		using var reader = await command.ExecuteReaderAsync(cancellationToken);
		
		do
		{
			while (await reader.ReadAsync(cancellationToken)
				&& reader.GetName(0).Equals("__SQuiL__Table__Type__"))
			{
				switch (reader.GetString(0))
				{
					case "Return_Courses":
						response.Courses.Add(new(
							reader.GetString(reader.GetOrdinal("EvalationID")),
							reader.GetString(reader.GetOrdinal("TermCode")),
							reader.GetString(reader.GetOrdinal("CourseCode")),
							reader.GetString(reader.GetOrdinal("CourseTitle")),
							reader.GetString(reader.GetOrdinal("ProfessorName")),
							reader.GetString(reader.GetOrdinal("EvaluationStatus"))));
						isCourses = true;
						break;
						
					//default: throw new Exception($"Invalid Table `{reader.GetString(0)}`");
				}
			}
		}
		while (await reader.NextResultAsync());
		
		if (!isCourses) throw new Exception("Expected return table `Courses`)");
		
		return response;
		
		string Query() => $"""
		Declare @Return_Courses table(
			[__SQuiL__Table__Type__] varchar(max) default('Return_Courses'),
			EvalationID varchar(20),
			TermCode varchar(10),
			CourseCode varchar(20),
			CourseTitle varchar(100),
			ProfessorName varchar(100),
			EvaluationStatus varchar(50));
		
		Use [{builder.InitialCatalog}];
		
		Insert Into @Return_Courses(EvalationID, TermCode, CourseCode, CourseTitle, ProfessorName, EvaluationStatus)
		Select		Char(64 + sf.FacultyOrder) + Cast(sf.SectionFacultyID As varchar(10)),
					c.TermCode, c.CourseCode, c.CourseTitle, p.PreferredName, Case
						When @AsOfDate < t.BeginDate Then 'Opens On ' + Format(t.BeginDate, 'dddd, MMMM d')
						When @AsOfDate < t.EndDate Then 'Open Until ' + Format(t.EndDate, 'dddd, MMMM d')
						Else 'Closed On ' + Format(t.EndDate, 'dddd, MMMM d')
					End
		From		adm.SectionFaculty sf
					Inner Join pub.Person p
						On p.PersonID = sf.PersonID
					Inner Join @Courses c
						On c.SectionID = sf.SectionID
					Inner Join @Terms t
						On t.TermCode = c.TermCode;
		
		""";
	}
}
