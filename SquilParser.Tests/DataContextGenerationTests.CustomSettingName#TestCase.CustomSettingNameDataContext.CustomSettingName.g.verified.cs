//HintName: TestCase.CustomSettingNameDataContext.CustomSettingName.g.cs
// <auto-generated />

#nullable enable

using Microsoft.Data.SqlClient;

using SQuiL;

namespace TestCase;

partial class CustomSettingNameDataContext : SQuiLBaseDataContext
{
	public override string SettingName { get; } = "TestDatabaseConnectionString";
	
	public async Task<CustomSettingNameDataContextCustomSettingNameResponse> ProcessCustomSettingNameAsync(
		CustomSettingNameDataContextCustomSettingNameRequest request,
		CancellationToken cancellationToken = default!)
	{
		using SqlConnection connection = new(ConnectionStringBuilder.ConnectionString);
		var command = connection.CreateCommand();
		command.CommandText = Query();
		command.Parameters.AddRange(new SqlParameter[]
		{
			new("EnvironmentName", System.Data.SqlDbType.VarChar, EnvironmentName.Length) { Value = EnvironmentName }, 
			new("Debug", System.Data.SqlDbType.Bit) { Value = EnvironmentName != "Production" }, 
			new("Bob1", System.Data.SqlDbType.VarChar, 4096) 
			{
				Value = request.Bob1 switch
				{
					null => null,
					{ Length: <= 4096 } => request.Bob1,
					_ => throw new Exception(
						"Request model data is larger then database size for the property [Bob1].")
				}
			}
		});
		
		await connection.OpenAsync(cancellationToken);
		
		await command.ExecuteNonQueryAsync(cancellationToken)
		
		return new();
		
		string Query() => $"""
		Use [{ConnectionStringBuilder.InitialCatalog}];
		
		Select 'Bob1' As [__SQuiL__Table__Type__], @Bob1;
		
		""";
	}
}
