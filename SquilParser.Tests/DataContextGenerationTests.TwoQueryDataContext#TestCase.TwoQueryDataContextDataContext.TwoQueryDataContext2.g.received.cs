//HintName: TestCase.TwoQueryDataContextDataContext.TwoQueryDataContext2.g.cs
// <auto-generated />

#nullable enable

using Microsoft.Data.SqlClient;

using SQuiL;

namespace TestCase;

partial class TwoQueryDataContextDataContext : SQuiLBaseDataContext
{
	public async Task<TwoQueryDataContextDataContextTwoQueryDataContext2Response> ProcessTwoQueryDataContext2Async(
		TwoQueryDataContextDataContextTwoQueryDataContext2Request request,
		CancellationToken cancellationToken = default!)
	{
		var builder = ConnectionStringBuilder("ConnectionStringTwoQueryDataContext2");
		using SqlConnection connection = new(builder.ConnectionString);
		var command = connection.CreateCommand();
		command.CommandText = Query();
		command.Parameters.AddRange(new SqlParameter[]
		{
			new("EnvironmentName", System.Data.SqlDbType.VarChar, EnvironmentName.Length) { Value = EnvironmentName }, 
			new("Debug", System.Data.SqlDbType.Bit) { Value = EnvironmentName != "Production" }, 
			new("PersonID", System.Data.SqlDbType.VarChar, 10) 
			{
				Value = request.PersonID switch
				{
					null => null,
					{ Length: <= 10 } => request.PersonID,
					_ => throw new Exception(
						"Request model data is larger then database size for the property [PersonID].")
				}
			}
		});
		
		await connection.OpenAsync(cancellationToken);
		
		TwoQueryDataContextDataContextTwoQueryDataContext2Response response = new();
		var isParticipation = false;
		var isOverride = false;
		
		using var reader = await command.ExecuteReaderAsync(cancellationToken);
		
		do
		{
			while (await reader.ReadAsync(cancellationToken)
				&& reader.GetName(0).Equals("__SQuiL__Table__Type__"))
			{
				switch (reader.GetString(0))
				{
					case "Return_Participation":
						response.Participation.Add(new(
							reader.GetString(reader.GetOrdinal("SectionID")),
							reader.GetString(reader.GetOrdinal("PersonID")),
							reader.GetString(reader.GetOrdinal("ProfessorID")),
							reader.GetString(reader.GetOrdinal("TermCode")),
							reader.GetDateTime(reader.GetOrdinal("CompletedDate"))));
						isParticipation = true;
						break;
						
					case "Return_Override":
						response.Override.Add(new(
							reader.GetString(reader.GetOrdinal("SectionID")),
							reader.GetString(reader.GetOrdinal("TermCode")),
							reader.GetString(reader.GetOrdinal("CourseCode")),
							reader.GetDateTime(reader.GetOrdinal("BeginDate")),
							reader.GetDateTime(reader.GetOrdinal("EndDate"))));
						isOverride = true;
						break;
						
					//default: throw new Exception($"Invalid Table `{reader.GetString(0)}`");
				}
			}
		}
		while (await reader.NextResultAsync());
		
		if (!isParticipation) throw new Exception("Expected return table `Participation`)");
		if (!isOverride) throw new Exception("Expected return table `Override`)");
		
		return response;
		
		string Query() => $"""
		Declare @Return_Participation table(
			[__SQuiL__Table__Type__] varchar(max) default('Return_Participation'),
			SectionID varchar(20),
			PersonID varchar(10),
			ProfessorID varchar(10),
			TermCode varchar(10),
			CompletedDate datetime);
		
		Declare @Return_Override table(
			[__SQuiL__Table__Type__] varchar(max) default('Return_Override'),
			SectionID varchar(20),
			TermCode varchar(10),
			CourseCode varchar(20),
			BeginDate datetime,
			EndDate datetime);
		
		Use [{builder.InitialCatalog}];
		
		Insert Into @Return_Participation(SectionID, PersonID, ProfessorID, TermCode, CompletedDate)
		Select * From (
		Select		--pv.ElementId As ElementID,
					Max(Iif(pv.PropertyName = 'ParticipationSectionId', PropertyValue, Null)) as SectionID,
					Max(Iif(pv.PropertyName = 'ParticipationStudentId', PropertyValue, Null)) as PersonID,
					Max(Iif(pv.PropertyName = 'ParticipationTeacherId', PropertyValue, Null)) as ProfessorID,
					Max(Iif(pv.PropertyName = 'ParticipationTerm', PropertyValue, Null)) as TermCode,
					Max(Iif(pv.PropertyName = 'ParticipationCompletedOn', Cast(PropertyValue As datetime), Null)) as CompletedDate
		From		CourseEvaluation_PropertyValues pv
					Inner Join (
						Select		ElementId
						From		CourseEvaluation_PropertyValues
						Where		PropertyName = 'Tag'
									And PropertyValue = 'Participation'
					) tags
						On tags.ElementId = pv.ElementId
		Group By	pv.ElementId
		) list
		Where PersonID = @PersonID;
		
		Insert Into @Return_Override(SectionID, TermCode, CourseCode, BeginDate, EndDate)
		Select		Max(Iif(pv.PropertyName = 'SectionDateSectionId', PropertyValue, Null)) as SectionID,
					Max(Iif(pv.PropertyName = 'SectionDateTerm', PropertyValue, Null)) as TermCode,
					Max(Iif(pv.PropertyName = 'SectionDateDescription', PropertyValue, Null)) as CourseCode,
					Max(Iif(pv.PropertyName = 'SectionDateEvaluationBeginDate', Cast(PropertyValue As date), Null)) as BeginDate,
					Max(Iif(pv.PropertyName = 'SectionDateEvaluationEndDate', Cast(PropertyValue As date), Null)) as EndDate
		From		CourseEvaluation_PropertyValues pv
					Inner Join (
						Select		ElementId
						From		CourseEvaluation_PropertyValues
						Where		PropertyName = 'Tag'
									And PropertyValue = 'SectionDate'
					) tags
						On tags.ElementId = pv.ElementId
		Group By	pv.ElementId
		
		Select * From @Return_Participation;
		Select * From @Return_Override;
		
		/*
		
		ParticipationCompletedOn
		ParticipationSectionId
		ParticipationStudentId
		ParticipationTeacherId
		ParticipationTerm
		
		*/
		
		""";
	}
}
