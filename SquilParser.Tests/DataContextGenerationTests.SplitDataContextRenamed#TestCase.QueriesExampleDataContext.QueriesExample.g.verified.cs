//HintName: TestCase.QueriesExampleDataContext.QueriesExample.g.cs
// <auto-generated />

#nullable enable

using Microsoft.Data.SqlClient;

using SQuiL;

namespace TestCase;

partial class QueriesExampleDataContext : SQuiLBaseDataContext
{
	public async Task<QueriesExampleDataContextQueriesExampleResponse> ProcessQueriesExampleAsync(
		QueriesExampleDataContextQueriesExampleRequest request,
		CancellationToken cancellationToken = default!)
	{
		using SqlConnection connection = new(ConnectionString);
		var command = connection.CreateCommand();
		command.CommandText = Query();
		command.Parameters.AddRange(new SqlParameter[]
		{
			new("RunAsOf", System.Data.SqlDbType.Date) { Value = request.RunAsOf },
			new("Bob1", System.Data.SqlDbType.VarChar, 10) 
			{
				Value = request.Bob1 switch
				{
					null => null,
					{ Length: <= 10 } => request.Bob1,
					_ => throw new Exception(
						"Request model data is larger then database size for the property [Bob1].")
				}
			},
			new("Sally1", System.Data.SqlDbType.BigInt) { Value = request.Sally1 },
			new("Sally2", System.Data.SqlDbType.Date) { Value = request.Sally2 },
			new("Bob2", System.Data.SqlDbType.VarChar, 10) 
			{
				Value = request.Bob2 switch
				{
					null => null,
					{ Length: <= 10 } => request.Bob2,
					_ => throw new Exception(
						"Request model data is larger then database size for the property [Bob2].")
				}
			},
			new("Bob3", System.Data.SqlDbType.VarChar, 10) 
			{
				Value = request.Bob3 switch
				{
					null => null,
					{ Length: <= 10 } => request.Bob3,
					_ => throw new Exception(
						"Request model data is larger then database size for the property [Bob3].")
				}
			}
		});
		
		await connection.OpenAsync(cancellationToken);
		
		QueriesExampleDataContextQueriesExampleResponse response = new();
		
		var isResult3 = false;
		var isInteger = false;
		var isResult4 = false;
		var isResult1 = false;
		var isResult2 = false;
		var isThat = false;
		
		using var reader = await command.ExecuteReaderAsync(cancellationToken);
		
		do
		{
			while (await reader.ReadAsync(cancellationToken)
				&& reader.GetName(0).Equals("__SQuiL__Table__Type__"))
			{
				switch (reader.GetString(0))
				{
					case "Result1":
						if (isResult1) throw new Exception(
							"Already returned value for `Result1`");
						
						response.Result1 = reader.GetInt32(reader.GetOrdinal("Result1"));
						isResult1 = true;
						break;
						
					case "Result2":
						if (isResult2) throw new Exception(
							"Already returned value for `Result2`");
						
						response.Result2 = reader.GetInt32(reader.GetOrdinal("Result2"));
						isResult2 = true;
						break;
						
					case "Result3":
						response.Result3.Add(new(
							reader.GetInt32(reader.GetOrdinal("Bob"))));
						isResult3 = true;
						break;
						
					case "Integer":
						response.Integer.Add(new(
							reader.GetInt32(reader.GetOrdinal("Bob"))));
						isInteger = true;
						break;
						
					case "Result4":
						response.Result4.Add(new(
							reader.GetInt32(reader.GetOrdinal("Bob")),
							reader.GetBoolean(reader.GetOrdinal("Sally"))));
						isResult4 = true;
						break;
						
					case "That":
						if (isThat) throw new Exception(
							"Already returned value for `That`");
						
						response.That = reader.GetInt32(reader.GetOrdinal("That"));
						isThat = true;
						break;
						
					if (!isResult3) throw new Exception("Expected return table `Result3`)");
					if (!isInteger) throw new Exception("Expected return table `Integer`)");
					if (!isResult4) throw new Exception("Expected return table `Result4`)");
					
					default: throw new Exception($"Invalid Table `{reader.GetString(0)}`");
				}
			}
		}
		while (await reader.NextResultAsync());
		
		return response;
		
		string inputSally()
		{
			System.Text.StringBuilder query = new();
			query.Append("Insert Into @Sally(Bob, Jim, Sam) Values");
			var comma = "";
			foreach(var item in request.Sally)
			{
				query.AppendLines(comma);
				query.Append("(");
				query.Append(item.Bob ? '1' : '0');
				query.Append(", ");
				query.Append(item.Jim is null || item.Jim.Length <= 20
					? (item.Jim is null ? "Null" : $"'{item.Jim}'")
					: throw new Exception($"""
						QueriesExampleDataContextSallyRequest model table property [Sally]
						at index [1] has a string property [Jim]
						with more than 20 characters.
						"""));
				query.Append(", ");
				query.Append(item.Sam);
				query.Append(")");
				comma = ",";
			}
			query.AppendLine(";");
			return query.ToString();
		}
		
		string Query() => $"""
		Declare @Sally table(
			[__SQuiL__Table__Type__] varchar(max) default('Sally'),
			Bob bit,
			Jim varchar(20),
			Sam int);
		{inputSally()}
		
		Declare @Return int;
		
		Declare @ReturnThis int;
		
		Declare @Returns table(
			[__SQuiL__Table__Type__] varchar(max) default('Returns'),
			Bob int);
		
		Declare @Returns_Integer table(
			[__SQuiL__Table__Type__] varchar(max) default('Returns_Integer'),
			Bob int);
		
		Declare @Returns2 table(
			[__SQuiL__Table__Type__] varchar(max) default('Returns2'),
			Bob int,
			Sally bit);
		
		Declare @Return_That int;
		
		Use [Database];
		
		Insert Into @Returns2(Bob, Sally) Values (42, 1);
		Insert Into @Returns2(Bob, Sally) Values (12, 0);
		
		Select 'ReturnThis' As [__SQuiL__Table__Type__], @ReturnThis
		
		Select 'Return' As [__SQuiL__Table__Type__], @Return
		
		Select 'Return_That' As [__SQuiL__Table__Type__], @Return_That
		
		""";
	}
}
