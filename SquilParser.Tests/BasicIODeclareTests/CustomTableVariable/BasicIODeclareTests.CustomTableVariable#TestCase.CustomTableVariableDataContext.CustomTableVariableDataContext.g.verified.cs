//HintName: TestCase.CustomTableVariableDataContext.CustomTableVariableDataContext.g.cs
// <auto-generated />

#nullable enable

using Microsoft.Data.SqlClient;

using SQuiL;

namespace TestCase;

partial class CustomTableVariableDataContext : SQuiLBaseDataContext
{
	public async Task<CustomTableVariableResponse> ProcessCustomTableVariableAsync(
		CustomTableVariableRequest request,
		CancellationToken cancellationToken = default!)
	{
		var builder = ConnectionStringBuilder("SQuiLDatabase");
		using SqlConnection connection = new(builder.ConnectionString);
		var command = connection.CreateCommand();
		
		List<SqlParameter> parameters = new()
		{
			new("EnvironmentName", System.Data.SqlDbType.VarChar, EnvironmentName.Length) { Value = EnvironmentName }, 
			new("Debug", System.Data.SqlDbType.Bit) { Value = EnvironmentName != "Production" }, 
		});
		
		command.CommandText = Query(parameters);
		command.Parameters.AddRange(parameters);
		
		await connection.OpenAsync(cancellationToken);
		
		CustomTableVariableResponse response = new();
		
		var isTable = false;
		
		using var reader = await command.ExecuteReaderAsync(cancellationToken);
		
		do
		{
			var tableTag = reader.GetName(0);
			if(tableTag.StartsWith("__SQuiL__Table__Type__"))
			{
				switch (tableTag)
				{
					case "__SQuiL__Table__Type__Returns_Table__":
					{
						isTable = true;
						
						if (!await reader.ReadAsync(cancellationToken)) break;
						
						var indexTableID = reader.GetOrdinal("TableID");
						var indexIsBoth = reader.GetOrdinal("IsBoth");
						var indexNickName = reader.GetOrdinal("NickName");
						
						do
						{
							if (reader.GetString(0) == "Returns_Table")
							{
								response.Table.Add(new(
									reader.GetInt32(indexTableID),
									reader.GetBoolean(indexIsBoth),
									reader.GetString(indexNickName)));
							}
						}
						while (await reader.ReadAsync(cancellationToken));
						break;
					}
				}
			}
		}
		while (await reader.NextResultAsync(cancellationToken));
		
		if (!isTable) throw new Exception("Expected return table `Table`)");
		
		return response;
		
		string inputTable(List<SqlParameter> parameters)
		{
			System.Text.StringBuilder query = new();
			query.Append("Insert Into @Params_Table(TableID, IsFemale, LastName)");
			
			if (request.Table.Count == 0) return "";
			
			query.AppendLine(" Values");
			
			var comma = "";
			var index = 0;
			
			foreach(var item in request.Table)
			{
				index++;
				
				query.AppendLine(comma);
				query.Append('(');
				AddParams(query, parameters, index, "ParamsTable", "TableID", System.Data.SqlDbType.BigInt, item.TableID);
				query.Append(", ");
				AddParams(query, parameters, index, "ParamsTable", "IsFemale", System.Data.SqlDbType.Bit, item.IsFemale);
				query.Append(", ");
				AddParams(query, parameters, index, "ParamsTable", "LastName", System.Data.SqlDbType.VarChar, item.LastName, 100);
				query.Append(')');
				
				comma = ",";
			}
			
			query.AppendLine(';');
			query.AppendLine();
			
			return query.ToString();
		}
		
		string Query(List<SqlParameter> parameters) => $"""
		Declare @Params_Table table(
			[__SQuiL__Table__Type__Params_Table__] varchar(max) default('Params_Table'),
			TableID int,
			IsFemale bit,
			LastName varchar(100));
		{inputTable(parameters)}
		
		Declare @Returns_Table table(
			[__SQuiL__Table__Type__Returns_Table__] varchar(max) default('Returns_Table'),
			TableID int,
			IsBoth bit,
			NickName varchar(100));
		
		Use [{builder.InitialCatalog}];
		
		Select 1;
		
		""";
	}
}
